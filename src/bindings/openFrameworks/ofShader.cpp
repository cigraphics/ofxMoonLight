/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofShader
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "gl/ofShader.h"


/** ofShader::ofShader()
 * api/openFrameworks/gl/ofShader.h:19
 */
static int ofShader_ofShader(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      ofShader *shader = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
      ofShader *retval__ = new ofShader(*shader);
      dub_pushudata(L, retval__, "ofShader", true);
      return 1;
    } else {
      ofShader *retval__ = new ofShader();
      dub_pushudata(L, retval__, "ofShader", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** ofShader::~ofShader()
 * api/openFrameworks/gl/ofShader.h:20
 */
static int ofShader__ofShader(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofShader"));
    if (userdata->gc) {
      ofShader *self = (ofShader *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** ofShader& ofShader::operator=(const ofShader &shader)
 * api/openFrameworks/gl/ofShader.h:22
 */
static int ofShader_operator_sete(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    ofShader *shader = *((ofShader **)dub_checksdata(L, 2, "ofShader"));
    dub_pushudata(L, &self->operator=(*shader), "ofShader", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofShader::load(string shaderName)
 * api/openFrameworks/gl/ofShader.h:24
 */
static int ofShader_load(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      size_t vertName_sz_;
      const char *vertName = dub_checklstring(L, 2, &vertName_sz_);
      size_t fragName_sz_;
      const char *fragName = dub_checklstring(L, 3, &fragName_sz_);
      size_t geomName_sz_;
      const char *geomName = dub_checklstring(L, 4, &geomName_sz_);
      lua_pushboolean(L, self->load(std::string(vertName, vertName_sz_), std::string(fragName, fragName_sz_), std::string(geomName, geomName_sz_)));
      return 1;
    } else if (top__ >= 3) {
      size_t vertName_sz_;
      const char *vertName = dub_checklstring(L, 2, &vertName_sz_);
      size_t fragName_sz_;
      const char *fragName = dub_checklstring(L, 3, &fragName_sz_);
      lua_pushboolean(L, self->load(std::string(vertName, vertName_sz_), std::string(fragName, fragName_sz_)));
      return 1;
    } else {
      size_t shaderName_sz_;
      const char *shaderName = dub_checklstring(L, 2, &shaderName_sz_);
      lua_pushboolean(L, self->load(std::string(shaderName, shaderName_sz_)));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "load: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "load: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setGeometryInputType(GLenum type)
 * api/openFrameworks/gl/ofShader.h:30
 */
static int ofShader_setGeometryInputType(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLenum type = dub_checkint(L, 2);
    self->setGeometryInputType(type);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setGeometryInputType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setGeometryInputType: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setGeometryOutputType(GLenum type)
 * api/openFrameworks/gl/ofShader.h:31
 */
static int ofShader_setGeometryOutputType(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLenum type = dub_checkint(L, 2);
    self->setGeometryOutputType(type);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setGeometryOutputType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setGeometryOutputType: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setGeometryOutputCount(int count)
 * api/openFrameworks/gl/ofShader.h:32
 */
static int ofShader_setGeometryOutputCount(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    int count = dub_checkint(L, 2);
    self->setGeometryOutputCount(count);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setGeometryOutputCount: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setGeometryOutputCount: Unknown exception");
  }
  return dub_error(L);
}

/** int ofShader::getGeometryMaxOutputCount()
 * api/openFrameworks/gl/ofShader.h:34
 */
static int ofShader_getGeometryMaxOutputCount(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    lua_pushnumber(L, self->getGeometryMaxOutputCount());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGeometryMaxOutputCount: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGeometryMaxOutputCount: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::unload()
 * api/openFrameworks/gl/ofShader.h:37
 */
static int ofShader_unload(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    self->unload();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "unload: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "unload: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofShader::isLoaded()
 * api/openFrameworks/gl/ofShader.h:39
 */
static int ofShader_isLoaded(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    lua_pushboolean(L, self->isLoaded());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isLoaded: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isLoaded: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::begin()
 * api/openFrameworks/gl/ofShader.h:41
 */
static int ofShader_begin(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    self->begin();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "begin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "begin: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::end()
 * api/openFrameworks/gl/ofShader.h:42
 */
static int ofShader_end(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    self->end();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "end: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "end: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniformTexture(const char *name, ofBaseHasTexture &img, int textureLocation)
 * api/openFrameworks/gl/ofShader.h:45
 */
static int ofShader_setUniformTexture(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      const char *name = dub_checkstring(L, 2);
      int textureTarget = dub_checkint(L, 3);
      GLint textureID = dub_checkint(L, 4);
      int textureLocation = dub_checkint(L, 5);
      self->setUniformTexture(name, textureTarget, textureID, textureLocation);
      return 0;
    } else {
      int type__ = lua_type(L, 3);
      void **ptr3__;
      if ( (ptr3__ = dub_issdata(L, 3, "ofBaseHasTexture", type__)) ) {
        const char *name = dub_checkstring(L, 2);
        ofBaseHasTexture *img = *((ofBaseHasTexture **)ptr3__);
        int textureLocation = dub_checkint(L, 4);
        self->setUniformTexture(name, *img, textureLocation);
        return 0;
      } else {
        const char *name = dub_checkstring(L, 2);
        ofTexture *img = *((ofTexture **)dub_checksdata(L, 3, "ofTexture"));
        int textureLocation = dub_checkint(L, 4);
        self->setUniformTexture(name, *img, textureLocation);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniformTexture: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniformTexture: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniform1i(const char *name, int v1)
 * api/openFrameworks/gl/ofShader.h:50
 */
static int ofShader_setUniform1i(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    const char *name = dub_checkstring(L, 2);
    int v1 = dub_checkint(L, 3);
    self->setUniform1i(name, v1);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniform1i: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniform1i: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniform2i(const char *name, int v1, int v2)
 * api/openFrameworks/gl/ofShader.h:51
 */
static int ofShader_setUniform2i(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    const char *name = dub_checkstring(L, 2);
    int v1 = dub_checkint(L, 3);
    int v2 = dub_checkint(L, 4);
    self->setUniform2i(name, v1, v2);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniform2i: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniform2i: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniform3i(const char *name, int v1, int v2, int v3)
 * api/openFrameworks/gl/ofShader.h:52
 */
static int ofShader_setUniform3i(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    const char *name = dub_checkstring(L, 2);
    int v1 = dub_checkint(L, 3);
    int v2 = dub_checkint(L, 4);
    int v3 = dub_checkint(L, 5);
    self->setUniform3i(name, v1, v2, v3);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniform3i: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniform3i: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniform4i(const char *name, int v1, int v2, int v3, int v4)
 * api/openFrameworks/gl/ofShader.h:53
 */
static int ofShader_setUniform4i(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    const char *name = dub_checkstring(L, 2);
    int v1 = dub_checkint(L, 3);
    int v2 = dub_checkint(L, 4);
    int v3 = dub_checkint(L, 5);
    int v4 = dub_checkint(L, 6);
    self->setUniform4i(name, v1, v2, v3, v4);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniform4i: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniform4i: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniform1f(const char *name, float v1)
 * api/openFrameworks/gl/ofShader.h:55
 */
static int ofShader_setUniform1f(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    const char *name = dub_checkstring(L, 2);
    float v1 = dub_checknumber(L, 3);
    self->setUniform1f(name, v1);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniform1f: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniform1f: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniform2f(const char *name, float v1, float v2)
 * api/openFrameworks/gl/ofShader.h:56
 */
static int ofShader_setUniform2f(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    const char *name = dub_checkstring(L, 2);
    float v1 = dub_checknumber(L, 3);
    float v2 = dub_checknumber(L, 4);
    self->setUniform2f(name, v1, v2);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniform2f: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniform2f: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniform3f(const char *name, float v1, float v2, float v3)
 * api/openFrameworks/gl/ofShader.h:57
 */
static int ofShader_setUniform3f(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    const char *name = dub_checkstring(L, 2);
    float v1 = dub_checknumber(L, 3);
    float v2 = dub_checknumber(L, 4);
    float v3 = dub_checknumber(L, 5);
    self->setUniform3f(name, v1, v2, v3);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniform3f: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniform3f: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniform4f(const char *name, float v1, float v2, float v3, float v4)
 * api/openFrameworks/gl/ofShader.h:58
 */
static int ofShader_setUniform4f(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    const char *name = dub_checkstring(L, 2);
    float v1 = dub_checknumber(L, 3);
    float v2 = dub_checknumber(L, 4);
    float v3 = dub_checknumber(L, 5);
    float v4 = dub_checknumber(L, 6);
    self->setUniform4f(name, v1, v2, v3, v4);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniform4f: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniform4f: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniform1iv(const char *name, int *v, int count=1)
 * api/openFrameworks/gl/ofShader.h:61
 */
static int ofShader_setUniform1iv(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      const char *name = dub_checkstring(L, 2);
      int * v = (int *) lua_touserdata (L, 3);
      
      int count = dub_checkint(L, 4);
      self->setUniform1iv(name, (int *) v, count);
      return 0;
    } else {
      const char *name = dub_checkstring(L, 2);
      int * v = (int *) lua_touserdata (L, 3);
      
      self->setUniform1iv(name, (int *) v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniform1iv: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniform1iv: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniform2iv(const char *name, int *v, int count=1)
 * api/openFrameworks/gl/ofShader.h:62
 */
static int ofShader_setUniform2iv(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      const char *name = dub_checkstring(L, 2);
      int * v = (int *) lua_touserdata (L, 3);
      
      int count = dub_checkint(L, 4);
      self->setUniform2iv(name, (int *) v, count);
      return 0;
    } else {
      const char *name = dub_checkstring(L, 2);
      int * v = (int *) lua_touserdata (L, 3);
      
      self->setUniform2iv(name, (int *) v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniform2iv: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniform2iv: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniform3iv(const char *name, int *v, int count=1)
 * api/openFrameworks/gl/ofShader.h:63
 */
static int ofShader_setUniform3iv(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      const char *name = dub_checkstring(L, 2);
      int * v = (int *) lua_touserdata (L, 3);
      
      int count = dub_checkint(L, 4);
      self->setUniform3iv(name, (int *) v, count);
      return 0;
    } else {
      const char *name = dub_checkstring(L, 2);
      int * v = (int *) lua_touserdata (L, 3);
      
      self->setUniform3iv(name, (int *) v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniform3iv: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniform3iv: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniform4iv(const char *name, int *v, int count=1)
 * api/openFrameworks/gl/ofShader.h:64
 */
static int ofShader_setUniform4iv(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      const char *name = dub_checkstring(L, 2);
      int * v = (int *) lua_touserdata (L, 3);
      
      int count = dub_checkint(L, 4);
      self->setUniform4iv(name, (int *) v, count);
      return 0;
    } else {
      const char *name = dub_checkstring(L, 2);
      int * v = (int *) lua_touserdata (L, 3);
      
      self->setUniform4iv(name, (int *) v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniform4iv: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniform4iv: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniform1fv(const char *name, float *v, int count=1)
 * api/openFrameworks/gl/ofShader.h:66
 */
static int ofShader_setUniform1fv(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      const char *name = dub_checkstring(L, 2);
      float * v = (float *) lua_touserdata (L, 3);
      
      int count = dub_checkint(L, 4);
      self->setUniform1fv(name, (float *) v, count);
      return 0;
    } else {
      const char *name = dub_checkstring(L, 2);
      float * v = (float *) lua_touserdata (L, 3);
      
      self->setUniform1fv(name, (float *) v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniform1fv: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniform1fv: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniform2fv(const char *name, float *v, int count=1)
 * api/openFrameworks/gl/ofShader.h:67
 */
static int ofShader_setUniform2fv(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      const char *name = dub_checkstring(L, 2);
      float * v = (float *) lua_touserdata (L, 3);
      
      int count = dub_checkint(L, 4);
      self->setUniform2fv(name, (float *) v, count);
      return 0;
    } else {
      const char *name = dub_checkstring(L, 2);
      float * v = (float *) lua_touserdata (L, 3);
      
      self->setUniform2fv(name, (float *) v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniform2fv: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniform2fv: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniform3fv(const char *name, float *v, int count=1)
 * api/openFrameworks/gl/ofShader.h:68
 */
static int ofShader_setUniform3fv(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      const char *name = dub_checkstring(L, 2);
      float * v = (float *) lua_touserdata (L, 3);
      
      int count = dub_checkint(L, 4);
      self->setUniform3fv(name, (float *) v, count);
      return 0;
    } else {
      const char *name = dub_checkstring(L, 2);
      float * v = (float *) lua_touserdata (L, 3);
      
      self->setUniform3fv(name, (float *) v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniform3fv: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniform3fv: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniform4fv(const char *name, float *v, int count=1)
 * api/openFrameworks/gl/ofShader.h:69
 */
static int ofShader_setUniform4fv(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      const char *name = dub_checkstring(L, 2);
      float * v = (float *) lua_touserdata (L, 3);
      
      int count = dub_checkint(L, 4);
      self->setUniform4fv(name, (float *) v, count);
      return 0;
    } else {
      const char *name = dub_checkstring(L, 2);
      float * v = (float *) lua_touserdata (L, 3);
      
      self->setUniform4fv(name, (float *) v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniform4fv: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniform4fv: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setUniformMatrix4f(const char *name, const ofMatrix4x4 &m)
 * api/openFrameworks/gl/ofShader.h:71
 */
static int ofShader_setUniformMatrix4f(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    const char *name = dub_checkstring(L, 2);
    ofMatrix4x4 *m = *((ofMatrix4x4 **)dub_checksdata(L, 3, "ofMatrix4x4"));
    self->setUniformMatrix4f(name, *m);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUniformMatrix4f: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUniformMatrix4f: Unknown exception");
  }
  return dub_error(L);
}

/** GLint ofShader::getAttributeLocation(const char *name)
 * api/openFrameworks/gl/ofShader.h:74
 */
static int ofShader_getAttributeLocation(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    const char *name = dub_checkstring(L, 2);
    lua_pushnumber(L, self->getAttributeLocation(name));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAttributeLocation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAttributeLocation: Unknown exception");
  }
  return dub_error(L);
}

#ifndef TARGET_OPENGLES

/** void ofShader::setAttribute1s(GLint location, short v1)
 * api/openFrameworks/gl/ofShader.h:77
 */
static int ofShader_setAttribute1s(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLint location = dub_checkint(L, 2);
    short v1 = dub_checkint(L, 3);
    self->setAttribute1s(location, v1);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute1s: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute1s: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setAttribute2s(GLint location, short v1, short v2)
 * api/openFrameworks/gl/ofShader.h:78
 */
static int ofShader_setAttribute2s(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLint location = dub_checkint(L, 2);
    short v1 = dub_checkint(L, 3);
    short v2 = dub_checkint(L, 4);
    self->setAttribute2s(location, v1, v2);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute2s: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute2s: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setAttribute3s(GLint location, short v1, short v2, short v3)
 * api/openFrameworks/gl/ofShader.h:79
 */
static int ofShader_setAttribute3s(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLint location = dub_checkint(L, 2);
    short v1 = dub_checkint(L, 3);
    short v2 = dub_checkint(L, 4);
    short v3 = dub_checkint(L, 5);
    self->setAttribute3s(location, v1, v2, v3);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute3s: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute3s: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setAttribute4s(GLint location, short v1, short v2, short v3, short v4)
 * api/openFrameworks/gl/ofShader.h:80
 */
static int ofShader_setAttribute4s(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLint location = dub_checkint(L, 2);
    short v1 = dub_checkint(L, 3);
    short v2 = dub_checkint(L, 4);
    short v3 = dub_checkint(L, 5);
    short v4 = dub_checkint(L, 6);
    self->setAttribute4s(location, v1, v2, v3, v4);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute4s: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute4s: Unknown exception");
  }
  return dub_error(L);
}

#endif

/** void ofShader::setAttribute1f(GLint location, float v1)
 * api/openFrameworks/gl/ofShader.h:83
 */
static int ofShader_setAttribute1f(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLint location = dub_checkint(L, 2);
    float v1 = dub_checknumber(L, 3);
    self->setAttribute1f(location, v1);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute1f: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute1f: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setAttribute2f(GLint location, float v1, float v2)
 * api/openFrameworks/gl/ofShader.h:84
 */
static int ofShader_setAttribute2f(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLint location = dub_checkint(L, 2);
    float v1 = dub_checknumber(L, 3);
    float v2 = dub_checknumber(L, 4);
    self->setAttribute2f(location, v1, v2);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute2f: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute2f: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setAttribute3f(GLint location, float v1, float v2, float v3)
 * api/openFrameworks/gl/ofShader.h:85
 */
static int ofShader_setAttribute3f(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLint location = dub_checkint(L, 2);
    float v1 = dub_checknumber(L, 3);
    float v2 = dub_checknumber(L, 4);
    float v3 = dub_checknumber(L, 5);
    self->setAttribute3f(location, v1, v2, v3);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute3f: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute3f: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setAttribute4f(GLint location, float v1, float v2, float v3, float v4)
 * api/openFrameworks/gl/ofShader.h:86
 */
static int ofShader_setAttribute4f(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLint location = dub_checkint(L, 2);
    float v1 = dub_checknumber(L, 3);
    float v2 = dub_checknumber(L, 4);
    float v3 = dub_checknumber(L, 5);
    float v4 = dub_checknumber(L, 6);
    self->setAttribute4f(location, v1, v2, v3, v4);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute4f: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute4f: Unknown exception");
  }
  return dub_error(L);
}

#ifndef TARGET_OPENGLES

/** void ofShader::setAttribute1d(GLint location, double v1)
 * api/openFrameworks/gl/ofShader.h:89
 */
static int ofShader_setAttribute1d(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLint location = dub_checkint(L, 2);
    double v1 = dub_checknumber(L, 3);
    self->setAttribute1d(location, v1);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute1d: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute1d: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setAttribute2d(GLint location, double v1, double v2)
 * api/openFrameworks/gl/ofShader.h:90
 */
static int ofShader_setAttribute2d(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLint location = dub_checkint(L, 2);
    double v1 = dub_checknumber(L, 3);
    double v2 = dub_checknumber(L, 4);
    self->setAttribute2d(location, v1, v2);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute2d: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute2d: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setAttribute3d(GLint location, double v1, double v2, double v3)
 * api/openFrameworks/gl/ofShader.h:91
 */
static int ofShader_setAttribute3d(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLint location = dub_checkint(L, 2);
    double v1 = dub_checknumber(L, 3);
    double v2 = dub_checknumber(L, 4);
    double v3 = dub_checknumber(L, 5);
    self->setAttribute3d(location, v1, v2, v3);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute3d: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute3d: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setAttribute4d(GLint location, double v1, double v2, double v3, double v4)
 * api/openFrameworks/gl/ofShader.h:92
 */
static int ofShader_setAttribute4d(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLint location = dub_checkint(L, 2);
    double v1 = dub_checknumber(L, 3);
    double v2 = dub_checknumber(L, 4);
    double v3 = dub_checknumber(L, 5);
    double v4 = dub_checknumber(L, 6);
    self->setAttribute4d(location, v1, v2, v3, v4);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute4d: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute4d: Unknown exception");
  }
  return dub_error(L);
}

#endif

/** void ofShader::setAttribute1fv(const char *name, float *v, GLsizei stride=sizeof(float))
 * api/openFrameworks/gl/ofShader.h:95
 */
static int ofShader_setAttribute1fv(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      const char *name = dub_checkstring(L, 2);
      float * v = (float *) lua_touserdata (L, 3);
      
      GLsizei *stride = *((GLsizei **)dub_checksdata(L, 4, "GLsizei"));
      self->setAttribute1fv(name, (float *) v, *stride);
      return 0;
    } else {
      const char *name = dub_checkstring(L, 2);
      float * v = (float *) lua_touserdata (L, 3);
      
      self->setAttribute1fv(name, (float *) v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute1fv: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute1fv: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setAttribute2fv(const char *name, float *v, GLsizei stride=sizeof(float)*2)
 * api/openFrameworks/gl/ofShader.h:96
 */
static int ofShader_setAttribute2fv(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      const char *name = dub_checkstring(L, 2);
      float * v = (float *) lua_touserdata (L, 3);
      
      GLsizei *stride = *((GLsizei **)dub_checksdata(L, 4, "GLsizei"));
      self->setAttribute2fv(name, (float *) v, *stride);
      return 0;
    } else {
      const char *name = dub_checkstring(L, 2);
      float * v = (float *) lua_touserdata (L, 3);
      
      self->setAttribute2fv(name, (float *) v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute2fv: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute2fv: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setAttribute3fv(const char *name, float *v, GLsizei stride=sizeof(float)*3)
 * api/openFrameworks/gl/ofShader.h:97
 */
static int ofShader_setAttribute3fv(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      const char *name = dub_checkstring(L, 2);
      float * v = (float *) lua_touserdata (L, 3);
      
      GLsizei *stride = *((GLsizei **)dub_checksdata(L, 4, "GLsizei"));
      self->setAttribute3fv(name, (float *) v, *stride);
      return 0;
    } else {
      const char *name = dub_checkstring(L, 2);
      float * v = (float *) lua_touserdata (L, 3);
      
      self->setAttribute3fv(name, (float *) v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute3fv: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute3fv: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::setAttribute4fv(const char *name, float *v, GLsizei stride=sizeof(float)*4)
 * api/openFrameworks/gl/ofShader.h:98
 */
static int ofShader_setAttribute4fv(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      const char *name = dub_checkstring(L, 2);
      float * v = (float *) lua_touserdata (L, 3);
      
      GLsizei *stride = *((GLsizei **)dub_checksdata(L, 4, "GLsizei"));
      self->setAttribute4fv(name, (float *) v, *stride);
      return 0;
    } else {
      const char *name = dub_checkstring(L, 2);
      float * v = (float *) lua_touserdata (L, 3);
      
      self->setAttribute4fv(name, (float *) v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttribute4fv: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttribute4fv: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::printActiveUniforms()
 * api/openFrameworks/gl/ofShader.h:100
 */
static int ofShader_printActiveUniforms(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    self->printActiveUniforms();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "printActiveUniforms: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "printActiveUniforms: Unknown exception");
  }
  return dub_error(L);
}

/** void ofShader::printActiveAttributes()
 * api/openFrameworks/gl/ofShader.h:101
 */
static int ofShader_printActiveAttributes(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    self->printActiveAttributes();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "printActiveAttributes: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "printActiveAttributes: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofShader::setupShaderFromSource(GLenum type, string source)
 * api/openFrameworks/gl/ofShader.h:108
 */
static int ofShader_setupShaderFromSource(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLenum type = dub_checkint(L, 2);
    size_t source_sz_;
    const char *source = dub_checklstring(L, 3, &source_sz_);
    lua_pushboolean(L, self->setupShaderFromSource(type, std::string(source, source_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setupShaderFromSource: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setupShaderFromSource: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofShader::setupShaderFromFile(GLenum type, string filename)
 * api/openFrameworks/gl/ofShader.h:109
 */
static int ofShader_setupShaderFromFile(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLenum type = dub_checkint(L, 2);
    size_t filename_sz_;
    const char *filename = dub_checklstring(L, 3, &filename_sz_);
    lua_pushboolean(L, self->setupShaderFromFile(type, std::string(filename, filename_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setupShaderFromFile: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setupShaderFromFile: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofShader::linkProgram()
 * api/openFrameworks/gl/ofShader.h:112
 */
static int ofShader_linkProgram(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    lua_pushboolean(L, self->linkProgram());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "linkProgram: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "linkProgram: Unknown exception");
  }
  return dub_error(L);
}

/** GLuint& ofShader::getProgram()
 * api/openFrameworks/gl/ofShader.h:114
 */
static int ofShader_getProgram(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    lua_pushnumber(L, self->getProgram());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getProgram: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getProgram: Unknown exception");
  }
  return dub_error(L);
}

/** GLuint& ofShader::getShader(GLenum type)
 * api/openFrameworks/gl/ofShader.h:115
 */
static int ofShader_getShader(lua_State *L) {
  try {
    ofShader *self = *((ofShader **)dub_checksdata(L, 1, "ofShader"));
    GLenum type = dub_checkint(L, 2);
    lua_pushnumber(L, self->getShader(type));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getShader: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getShader: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofShader___tostring(lua_State *L) {
  ofShader *self = *((ofShader **)dub_checksdata_n(L, 1, "ofShader"));
  lua_pushfstring(L, "ofShader: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofShader_member_methods[] = {
  { "new"          , ofShader_ofShader    },
  { "__gc"         , ofShader__ofShader   },
  { "set"          , ofShader_operator_sete },
  { "load"         , ofShader_load        },
  { "setGeometryInputType", ofShader_setGeometryInputType },
  { "setGeometryOutputType", ofShader_setGeometryOutputType },
  { "setGeometryOutputCount", ofShader_setGeometryOutputCount },
  { "getGeometryMaxOutputCount", ofShader_getGeometryMaxOutputCount },
  { "unload"       , ofShader_unload      },
  { "isLoaded"     , ofShader_isLoaded    },
  { "begin"        , ofShader_begin       },
  { "finish"          , ofShader_end         },
  { "setUniformTexture", ofShader_setUniformTexture },
  { "setUniform1i" , ofShader_setUniform1i },
  { "setUniform2i" , ofShader_setUniform2i },
  { "setUniform3i" , ofShader_setUniform3i },
  { "setUniform4i" , ofShader_setUniform4i },
  { "setUniform1f" , ofShader_setUniform1f },
  { "setUniform2f" , ofShader_setUniform2f },
  { "setUniform3f" , ofShader_setUniform3f },
  { "setUniform4f" , ofShader_setUniform4f },
  { "setUniform1iv", ofShader_setUniform1iv },
  { "setUniform2iv", ofShader_setUniform2iv },
  { "setUniform3iv", ofShader_setUniform3iv },
  { "setUniform4iv", ofShader_setUniform4iv },
  { "setUniform1fv", ofShader_setUniform1fv },
  { "setUniform2fv", ofShader_setUniform2fv },
  { "setUniform3fv", ofShader_setUniform3fv },
  { "setUniform4fv", ofShader_setUniform4fv },
  { "setUniformMatrix4f", ofShader_setUniformMatrix4f },
  { "getAttributeLocation", ofShader_getAttributeLocation },
#ifndef TARGET_OPENGLES
  { "setAttribute1s", ofShader_setAttribute1s },
  { "setAttribute2s", ofShader_setAttribute2s },
  { "setAttribute3s", ofShader_setAttribute3s },
  { "setAttribute4s", ofShader_setAttribute4s },
#endif
  { "setAttribute1f", ofShader_setAttribute1f },
  { "setAttribute2f", ofShader_setAttribute2f },
  { "setAttribute3f", ofShader_setAttribute3f },
  { "setAttribute4f", ofShader_setAttribute4f },
#ifndef TARGET_OPENGLES
  { "setAttribute1d", ofShader_setAttribute1d },
  { "setAttribute2d", ofShader_setAttribute2d },
  { "setAttribute3d", ofShader_setAttribute3d },
  { "setAttribute4d", ofShader_setAttribute4d },
#endif
  { "setAttribute1fv", ofShader_setAttribute1fv },
  { "setAttribute2fv", ofShader_setAttribute2fv },
  { "setAttribute3fv", ofShader_setAttribute3fv },
  { "setAttribute4fv", ofShader_setAttribute4fv },
  { "printActiveUniforms", ofShader_printActiveUniforms },
  { "printActiveAttributes", ofShader_printActiveAttributes },
  { "setupShaderFromSource", ofShader_setupShaderFromSource },
  { "setupShaderFromFile", ofShader_setupShaderFromFile },
  { "linkProgram"  , ofShader_linkProgram },
  { "getProgram"   , ofShader_getProgram  },
  { "getShader"    , ofShader_getShader   },
  { "__tostring"   , ofShader___tostring  },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofShader(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofShader");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofShader_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofShader", "ofShader");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
