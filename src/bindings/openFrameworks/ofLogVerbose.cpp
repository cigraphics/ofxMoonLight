/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofLogVerbose
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "utils/ofLog.h"


/** ~ofLogVerbose()
 * 
 */
static int ofLogVerbose__ofLogVerbose(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofLogVerbose"));
    if (userdata->gc) {
      ofLogVerbose *self = (ofLogVerbose *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** Cast (class_name)
 * 
 */
static int ofLogVerbose__cast_(lua_State *L) {

  ofLogVerbose *self = *((ofLogVerbose **)dub_checksdata_n(L, 1, "ofLogVerbose"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "ofLog")) break;
      *retval__ = static_cast<ofLog *>(self);
      return 1;
    }
  }
  return 0;
}

/** ofLogVerbose::ofLogVerbose(const string &module="OF")
 * api/openFrameworks/utils/ofLog.h:117
 */
static int ofLogVerbose_ofLogVerbose(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      size_t module_sz_;
      const char *module = dub_checklstring(L, 1, &module_sz_);
      size_t message_sz_;
      const char *message = dub_checklstring(L, 2, &message_sz_);
      ofLogVerbose *retval__ = new ofLogVerbose(std::string(module, module_sz_), std::string(message, message_sz_));
      dub_pushudata(L, retval__, "ofLogVerbose", true);
      return 1;
    } else if (top__ >= 1) {
      size_t module_sz_;
      const char *module = dub_checklstring(L, 1, &module_sz_);
      ofLogVerbose *retval__ = new ofLogVerbose(std::string(module, module_sz_));
      dub_pushudata(L, retval__, "ofLogVerbose", true);
      return 1;
    } else {
      ofLogVerbose *retval__ = new ofLogVerbose();
      dub_pushudata(L, retval__, "ofLogVerbose", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofLogVerbose___tostring(lua_State *L) {
  ofLogVerbose *self = *((ofLogVerbose **)dub_checksdata_n(L, 1, "ofLogVerbose"));
  lua_pushfstring(L, "ofLogVerbose: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofLogVerbose_member_methods[] = {
  { "__gc"         , ofLogVerbose__ofLogVerbose },
  { "_cast_"       , ofLogVerbose__cast_  },
  { "new"          , ofLogVerbose_ofLogVerbose },
  { "__tostring"   , ofLogVerbose___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofLogVerbose(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofLogVerbose");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofLogVerbose_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofLogVerbose", "ofLogVerbose");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
