/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofLight
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/gl/ofLight.h"


/** Cast (class_name)
 * 
 */
static int ofLight__cast_(lua_State *L) {

  ofLight *self = *((ofLight **)dub_checksdata_n(L, 1, "ofLight"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "ofNode")) break;
      *retval__ = static_cast<ofNode *>(self);
      return 1;
    }
  }
  return 0;
}

/** ofLight::ofLight()
 * api/openFrameworks/gl/ofLight.h:38
 */
static int ofLight_ofLight(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      ofLight *mom = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
      ofLight *retval__ = new ofLight(*mom);
      dub_pushudata(L, retval__, "ofLight", true);
      return 1;
    } else {
      ofLight *retval__ = new ofLight();
      dub_pushudata(L, retval__, "ofLight", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** ofLight& ofLight::operator=(const ofLight &mom)
 * api/openFrameworks/gl/ofLight.h:40
 */
static int ofLight_operator_sete(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    ofLight *mom = *((ofLight **)dub_checksdata(L, 2, "ofLight"));
    dub_pushudata(L, &self->operator=(*mom), "ofLight", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofLight::~ofLight()
 * api/openFrameworks/gl/ofLight.h:41
 */
static int ofLight__ofLight(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofLight"));
    if (userdata->gc) {
      ofLight *self = (ofLight *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** void ofLight::destroy()
 * api/openFrameworks/gl/ofLight.h:42
 */
static int ofLight_destroy(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    self->destroy();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "destroy: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "destroy: Unknown exception");
  }
  return dub_error(L);
}

/** void ofLight::setup()
 * api/openFrameworks/gl/ofLight.h:44
 */
static int ofLight_setup(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    self->setup();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setup: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setup: Unknown exception");
  }
  return dub_error(L);
}

/** void ofLight::enable()
 * api/openFrameworks/gl/ofLight.h:45
 */
static int ofLight_enable(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    self->enable();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enable: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enable: Unknown exception");
  }
  return dub_error(L);
}

/** void ofLight::disable()
 * api/openFrameworks/gl/ofLight.h:46
 */
static int ofLight_disable(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    self->disable();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disable: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disable: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofLight::getIsEnabled() const
 * api/openFrameworks/gl/ofLight.h:47
 */
static int ofLight_getIsEnabled(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushboolean(L, self->getIsEnabled());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getIsEnabled: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getIsEnabled: Unknown exception");
  }
  return dub_error(L);
}

/** void ofLight::setDirectional()
 * api/openFrameworks/gl/ofLight.h:49
 */
static int ofLight_setDirectional(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    self->setDirectional();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDirectional: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDirectional: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofLight::getIsDirectional() const
 * api/openFrameworks/gl/ofLight.h:50
 */
static int ofLight_getIsDirectional(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushboolean(L, self->getIsDirectional());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getIsDirectional: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getIsDirectional: Unknown exception");
  }
  return dub_error(L);
}

/** void ofLight::setSpotlight(float spotCutOff=45.f, float exponent=0.f)
 * api/openFrameworks/gl/ofLight.h:52
 */
static int ofLight_setSpotlight(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float spotCutOff = dub_checknumber(L, 2);
      float exponent = dub_checknumber(L, 3);
      self->setSpotlight(spotCutOff, exponent);
      return 0;
    } else if (top__ >= 2) {
      float spotCutOff = dub_checknumber(L, 2);
      self->setSpotlight(spotCutOff);
      return 0;
    } else {
      self->setSpotlight();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSpotlight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSpotlight: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofLight::getIsSpotlight()
 * api/openFrameworks/gl/ofLight.h:53
 */
static int ofLight_getIsSpotlight(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushboolean(L, self->getIsSpotlight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getIsSpotlight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getIsSpotlight: Unknown exception");
  }
  return dub_error(L);
}

/** void ofLight::setSpotlightCutOff(float spotCutOff)
 * api/openFrameworks/gl/ofLight.h:54
 */
static int ofLight_setSpotlightCutOff(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    float spotCutOff = dub_checknumber(L, 2);
    self->setSpotlightCutOff(spotCutOff);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSpotlightCutOff: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSpotlightCutOff: Unknown exception");
  }
  return dub_error(L);
}

/** float ofLight::getSpotlightCutOff()
 * api/openFrameworks/gl/ofLight.h:55
 */
static int ofLight_getSpotlightCutOff(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushnumber(L, self->getSpotlightCutOff());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSpotlightCutOff: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSpotlightCutOff: Unknown exception");
  }
  return dub_error(L);
}

/** void ofLight::setSpotConcentration(float exponent)
 * api/openFrameworks/gl/ofLight.h:56
 */
static int ofLight_setSpotConcentration(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    float exponent = dub_checknumber(L, 2);
    self->setSpotConcentration(exponent);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSpotConcentration: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSpotConcentration: Unknown exception");
  }
  return dub_error(L);
}

/** float ofLight::getSpotConcentration()
 * api/openFrameworks/gl/ofLight.h:57
 */
static int ofLight_getSpotConcentration(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushnumber(L, self->getSpotConcentration());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSpotConcentration: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSpotConcentration: Unknown exception");
  }
  return dub_error(L);
}

/** void ofLight::setPointLight()
 * api/openFrameworks/gl/ofLight.h:59
 */
static int ofLight_setPointLight(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    self->setPointLight();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setPointLight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setPointLight: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofLight::getIsPointLight()
 * api/openFrameworks/gl/ofLight.h:60
 */
static int ofLight_getIsPointLight(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushboolean(L, self->getIsPointLight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getIsPointLight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getIsPointLight: Unknown exception");
  }
  return dub_error(L);
}

/** void ofLight::setAttenuation(float constant=1.f, float linear=0.f, float quadratic=0.f)
 * api/openFrameworks/gl/ofLight.h:61
 */
static int ofLight_setAttenuation(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float constant = dub_checknumber(L, 2);
      float linear = dub_checknumber(L, 3);
      float quadratic = dub_checknumber(L, 4);
      self->setAttenuation(constant, linear, quadratic);
      return 0;
    } else if (top__ >= 3) {
      float constant = dub_checknumber(L, 2);
      float linear = dub_checknumber(L, 3);
      self->setAttenuation(constant, linear);
      return 0;
    } else if (top__ >= 2) {
      float constant = dub_checknumber(L, 2);
      self->setAttenuation(constant);
      return 0;
    } else {
      self->setAttenuation();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAttenuation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAttenuation: Unknown exception");
  }
  return dub_error(L);
}

/** float ofLight::getAttenuationConstant()
 * api/openFrameworks/gl/ofLight.h:62
 */
static int ofLight_getAttenuationConstant(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushnumber(L, self->getAttenuationConstant());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAttenuationConstant: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAttenuationConstant: Unknown exception");
  }
  return dub_error(L);
}

/** float ofLight::getAttenuationLinear()
 * api/openFrameworks/gl/ofLight.h:63
 */
static int ofLight_getAttenuationLinear(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushnumber(L, self->getAttenuationLinear());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAttenuationLinear: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAttenuationLinear: Unknown exception");
  }
  return dub_error(L);
}

/** float ofLight::getAttenuationQuadratic()
 * api/openFrameworks/gl/ofLight.h:64
 */
static int ofLight_getAttenuationQuadratic(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushnumber(L, self->getAttenuationQuadratic());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAttenuationQuadratic: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAttenuationQuadratic: Unknown exception");
  }
  return dub_error(L);
}

/** int ofLight::getType()
 * api/openFrameworks/gl/ofLight.h:66
 */
static int ofLight_getType(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushnumber(L, self->getType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getType: Unknown exception");
  }
  return dub_error(L);
}

/** void ofLight::setAmbientColor(const ofFloatColor &c)
 * api/openFrameworks/gl/ofLight.h:68
 */
static int ofLight_setAmbientColor(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    ofFloatColor *c = *((ofFloatColor **)dub_checksdata(L, 2, "ofFloatColor"));
    self->setAmbientColor(*c);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAmbientColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAmbientColor: Unknown exception");
  }
  return dub_error(L);
}

/** void ofLight::setDiffuseColor(const ofFloatColor &c)
 * api/openFrameworks/gl/ofLight.h:69
 */
static int ofLight_setDiffuseColor(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    ofFloatColor *c = *((ofFloatColor **)dub_checksdata(L, 2, "ofFloatColor"));
    self->setDiffuseColor(*c);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDiffuseColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDiffuseColor: Unknown exception");
  }
  return dub_error(L);
}

/** void ofLight::setSpecularColor(const ofFloatColor &c)
 * api/openFrameworks/gl/ofLight.h:70
 */
static int ofLight_setSpecularColor(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    ofFloatColor *c = *((ofFloatColor **)dub_checksdata(L, 2, "ofFloatColor"));
    self->setSpecularColor(*c);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSpecularColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSpecularColor: Unknown exception");
  }
  return dub_error(L);
}

/** ofFloatColor ofLight::getAmbientColor() const
 * api/openFrameworks/gl/ofLight.h:72
 */
static int ofLight_getAmbientColor(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofFloatColor(self->getAmbientColor()), "ofFloatColor", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAmbientColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAmbientColor: Unknown exception");
  }
  return dub_error(L);
}

/** ofFloatColor ofLight::getDiffuseColor() const
 * api/openFrameworks/gl/ofLight.h:73
 */
static int ofLight_getDiffuseColor(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofFloatColor(self->getDiffuseColor()), "ofFloatColor", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getDiffuseColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getDiffuseColor: Unknown exception");
  }
  return dub_error(L);
}

/** ofFloatColor ofLight::getSpecularColor() const
 * api/openFrameworks/gl/ofLight.h:74
 */
static int ofLight_getSpecularColor(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofFloatColor(self->getSpecularColor()), "ofFloatColor", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSpecularColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSpecularColor: Unknown exception");
  }
  return dub_error(L);
}

/** int ofLight::getLightID() const
 * api/openFrameworks/gl/ofLight.h:76
 */
static int ofLight_getLightID(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushnumber(L, self->getLightID());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLightID: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLightID: Unknown exception");
  }
  return dub_error(L);
}

/** void ofLight::customDraw()
 * api/openFrameworks/gl/ofLight.h:78
 */
static int ofLight_customDraw(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    self->customDraw();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "customDraw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "customDraw: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setParent(ofNode &parent)
 * api/openFrameworks/3d/ofNode.h:26
 */
static int ofLight_setParent(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    ofNode *parent = *((ofNode **)dub_checksdata(L, 2, "ofNode"));
    self->setParent(*parent);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setParent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setParent: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::clearParent()
 * api/openFrameworks/3d/ofNode.h:27
 */
static int ofLight_clearParent(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    self->clearParent();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearParent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearParent: Unknown exception");
  }
  return dub_error(L);
}

/** ofNode* ofNode::getParent() const
 * api/openFrameworks/3d/ofNode.h:28
 */
static int ofLight_getParent(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    ofNode *retval__ = self->getParent();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "ofNode", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getParent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getParent: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getPosition() const
 * api/openFrameworks/3d/ofNode.h:34
 */
static int ofLight_getPosition(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofVec3f(self->getPosition()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPosition: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getX() const
 * api/openFrameworks/3d/ofNode.h:35
 */
static int ofLight_getX(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushnumber(L, self->getX());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getX: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getX: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getY() const
 * api/openFrameworks/3d/ofNode.h:36
 */
static int ofLight_getY(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushnumber(L, self->getY());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getY: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getY: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getZ() const
 * api/openFrameworks/3d/ofNode.h:37
 */
static int ofLight_getZ(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushnumber(L, self->getZ());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getZ: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getZ: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getXAxis() const
 * api/openFrameworks/3d/ofNode.h:39
 */
static int ofLight_getXAxis(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofVec3f(self->getXAxis()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getXAxis: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getXAxis: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getYAxis() const
 * api/openFrameworks/3d/ofNode.h:40
 */
static int ofLight_getYAxis(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofVec3f(self->getYAxis()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getYAxis: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getYAxis: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getZAxis() const
 * api/openFrameworks/3d/ofNode.h:41
 */
static int ofLight_getZAxis(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofVec3f(self->getZAxis()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getZAxis: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getZAxis: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getSideDir() const
 * api/openFrameworks/3d/ofNode.h:43
 */
static int ofLight_getSideDir(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofVec3f(self->getSideDir()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSideDir: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSideDir: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getLookAtDir() const
 * api/openFrameworks/3d/ofNode.h:44
 */
static int ofLight_getLookAtDir(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofVec3f(self->getLookAtDir()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLookAtDir: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLookAtDir: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getUpDir() const
 * api/openFrameworks/3d/ofNode.h:45
 */
static int ofLight_getUpDir(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofVec3f(self->getUpDir()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUpDir: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUpDir: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getPitch() const
 * api/openFrameworks/3d/ofNode.h:47
 */
static int ofLight_getPitch(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushnumber(L, self->getPitch());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPitch: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPitch: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getHeading() const
 * api/openFrameworks/3d/ofNode.h:48
 */
static int ofLight_getHeading(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushnumber(L, self->getHeading());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getHeading: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getHeading: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getRoll() const
 * api/openFrameworks/3d/ofNode.h:49
 */
static int ofLight_getRoll(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    lua_pushnumber(L, self->getRoll());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRoll: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRoll: Unknown exception");
  }
  return dub_error(L);
}

/** ofQuaternion ofNode::getOrientationQuat() const
 * api/openFrameworks/3d/ofNode.h:51
 */
static int ofLight_getOrientationQuat(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofQuaternion(self->getOrientationQuat()), "ofQuaternion", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getOrientationQuat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getOrientationQuat: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getOrientationEuler() const
 * api/openFrameworks/3d/ofNode.h:52
 */
static int ofLight_getOrientationEuler(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofVec3f(self->getOrientationEuler()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getOrientationEuler: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getOrientationEuler: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getScale() const
 * api/openFrameworks/3d/ofNode.h:53
 */
static int ofLight_getScale(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofVec3f(self->getScale()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getScale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getScale: Unknown exception");
  }
  return dub_error(L);
}

/** const ofMatrix4x4& ofNode::getLocalTransformMatrix() const
 * api/openFrameworks/3d/ofNode.h:55
 */
static int ofLight_getLocalTransformMatrix(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, const_cast<ofMatrix4x4*>(&self->getLocalTransformMatrix()), "ofMatrix4x4", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLocalTransformMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLocalTransformMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** ofMatrix4x4 ofNode::getGlobalTransformMatrix() const
 * api/openFrameworks/3d/ofNode.h:60
 */
static int ofLight_getGlobalTransformMatrix(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofMatrix4x4(self->getGlobalTransformMatrix()), "ofMatrix4x4", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGlobalTransformMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGlobalTransformMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getGlobalPosition() const
 * api/openFrameworks/3d/ofNode.h:61
 */
static int ofLight_getGlobalPosition(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofVec3f(self->getGlobalPosition()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGlobalPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGlobalPosition: Unknown exception");
  }
  return dub_error(L);
}

/** ofQuaternion ofNode::getGlobalOrientation() const
 * api/openFrameworks/3d/ofNode.h:62
 */
static int ofLight_getGlobalOrientation(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofQuaternion(self->getGlobalOrientation()), "ofQuaternion", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGlobalOrientation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGlobalOrientation: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getGlobalScale() const
 * api/openFrameworks/3d/ofNode.h:63
 */
static int ofLight_getGlobalScale(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    dub_pushudata(L, new ofVec3f(self->getGlobalScale()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGlobalScale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGlobalScale: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setTransformMatrix(const ofMatrix4x4 &m44)
 * api/openFrameworks/3d/ofNode.h:70
 */
static int ofLight_setTransformMatrix(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    ofMatrix4x4 *m44 = *((ofMatrix4x4 **)dub_checksdata(L, 2, "ofMatrix4x4"));
    self->setTransformMatrix(*m44);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setTransformMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setTransformMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setPosition(float px, float py, float pz)
 * api/openFrameworks/3d/ofNode.h:73
 */
static int ofLight_setPosition(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float px = dub_checknumber(L, 2);
      float py = dub_checknumber(L, 3);
      float pz = dub_checknumber(L, 4);
      self->setPosition(px, py, pz);
      return 0;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->setPosition(*p);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setPosition: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setGlobalPosition(float px, float py, float pz)
 * api/openFrameworks/3d/ofNode.h:76
 */
static int ofLight_setGlobalPosition(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float px = dub_checknumber(L, 2);
      float py = dub_checknumber(L, 3);
      float pz = dub_checknumber(L, 4);
      self->setGlobalPosition(px, py, pz);
      return 0;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->setGlobalPosition(*p);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setGlobalPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setGlobalPosition: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setOrientation(const ofQuaternion &q)
 * api/openFrameworks/3d/ofNode.h:81
 */
static int ofLight_setOrientation(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofQuaternion", type__)) ) {
      ofQuaternion *q = *((ofQuaternion **)ptr2__);
      self->setOrientation(*q);
      return 0;
    } else {
      ofVec3f *eulerAngles = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->setOrientation(*eulerAngles);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setOrientation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setOrientation: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setGlobalOrientation(const ofQuaternion &q)
 * api/openFrameworks/3d/ofNode.h:85
 */
static int ofLight_setGlobalOrientation(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    ofQuaternion *q = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
    self->setGlobalOrientation(*q);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setGlobalOrientation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setGlobalOrientation: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setScale(float s)
 * api/openFrameworks/3d/ofNode.h:89
 */
static int ofLight_setScale(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float sx = dub_checknumber(L, 2);
      float sy = dub_checknumber(L, 3);
      float sz = dub_checknumber(L, 4);
      self->setScale(sx, sy, sz);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float s = dub_checknumber(L, 2);
        self->setScale(s);
        return 0;
      } else {
        ofVec3f *s = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
        self->setScale(*s);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setScale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setScale: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::move(float x, float y, float z)
 * api/openFrameworks/3d/ofNode.h:95
 */
static int ofLight_move(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      self->move(x, y, z);
      return 0;
    } else {
      ofVec3f *offset = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->move(*offset);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "move: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "move: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::truck(float amount)
 * api/openFrameworks/3d/ofNode.h:97
 */
static int ofLight_truck(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    float amount = dub_checknumber(L, 2);
    self->truck(amount);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "truck: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "truck: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::boom(float amount)
 * api/openFrameworks/3d/ofNode.h:98
 */
static int ofLight_boom(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    float amount = dub_checknumber(L, 2);
    self->boom(amount);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "boom: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "boom: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::dolly(float amount)
 * api/openFrameworks/3d/ofNode.h:99
 */
static int ofLight_dolly(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    float amount = dub_checknumber(L, 2);
    self->dolly(amount);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "dolly: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "dolly: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::tilt(float degrees)
 * api/openFrameworks/3d/ofNode.h:103
 */
static int ofLight_tilt(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    float degrees = dub_checknumber(L, 2);
    self->tilt(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "tilt: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "tilt: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::pan(float degrees)
 * api/openFrameworks/3d/ofNode.h:104
 */
static int ofLight_pan(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    float degrees = dub_checknumber(L, 2);
    self->pan(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "pan: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "pan: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::roll(float degrees)
 * api/openFrameworks/3d/ofNode.h:105
 */
static int ofLight_roll(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    float degrees = dub_checknumber(L, 2);
    self->roll(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "roll: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "roll: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::rotate(const ofQuaternion &q)
 * api/openFrameworks/3d/ofNode.h:106
 */
static int ofLight_rotate(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float degrees = dub_checknumber(L, 2);
      float vx = dub_checknumber(L, 3);
      float vy = dub_checknumber(L, 4);
      float vz = dub_checknumber(L, 5);
      self->rotate(degrees, vx, vy, vz);
      return 0;
    } else if (top__ >= 3) {
      float degrees = dub_checknumber(L, 2);
      ofVec3f *v = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      self->rotate(degrees, *v);
      return 0;
    } else {
      ofQuaternion *q = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
      self->rotate(*q);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::rotateAround(const ofQuaternion &q, const ofVec3f &point)
 * api/openFrameworks/3d/ofNode.h:110
 */
static int ofLight_rotateAround(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float degrees = dub_checknumber(L, 2);
      ofVec3f *axis = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      ofVec3f *point = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
      self->rotateAround(degrees, *axis, *point);
      return 0;
    } else {
      ofQuaternion *q = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
      ofVec3f *point = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      self->rotateAround(*q, *point);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotateAround: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotateAround: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::lookAt(const ofVec3f &lookAtPosition, ofVec3f upVector=ofVec3f(0, 1, 0))
 * api/openFrameworks/3d/ofNode.h:114
 */
static int ofLight_lookAt(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
        ofVec3f *lookAtPosition = *((ofVec3f **)ptr2__);
        ofVec3f *upVector = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
        self->lookAt(*lookAtPosition, *upVector);
        return 0;
      } else {
        ofNode *lookAtNode = *((ofNode **)dub_checksdata(L, 2, "ofNode"));
        ofVec3f *upVector = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
        self->lookAt(*lookAtNode, *upVector);
        return 0;
      }
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
        ofVec3f *lookAtPosition = *((ofVec3f **)ptr2__);
        self->lookAt(*lookAtPosition);
        return 0;
      } else {
        ofNode *lookAtNode = *((ofNode **)dub_checksdata(L, 2, "ofNode"));
        self->lookAt(*lookAtNode);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "lookAt: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "lookAt: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::orbit(float longitude, float latitude, float radius, const ofVec3f &centerPoint=ofVec3f(0, 0, 0))
 * api/openFrameworks/3d/ofNode.h:119
 */
static int ofLight_orbit(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      int type__ = lua_type(L, 5);
      void **ptr5__;
      if ( (ptr5__ = dub_issdata(L, 5, "ofVec3f", type__)) ) {
        float longitude = dub_checknumber(L, 2);
        float latitude = dub_checknumber(L, 3);
        float radius = dub_checknumber(L, 4);
        ofVec3f *centerPoint = *((ofVec3f **)ptr5__);
        self->orbit(longitude, latitude, radius, *centerPoint);
        return 0;
      } else {
        float longitude = dub_checknumber(L, 2);
        float latitude = dub_checknumber(L, 3);
        float radius = dub_checknumber(L, 4);
        ofNode *centerNode = *((ofNode **)dub_checksdata(L, 5, "ofNode"));
        self->orbit(longitude, latitude, radius, *centerNode);
        return 0;
      }
    } else {
      float longitude = dub_checknumber(L, 2);
      float latitude = dub_checknumber(L, 3);
      float radius = dub_checknumber(L, 4);
      self->orbit(longitude, latitude, radius);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "orbit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "orbit: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::transformGL() const
 * api/openFrameworks/3d/ofNode.h:127
 */
static int ofLight_transformGL(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    self->transformGL();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "transformGL: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "transformGL: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::restoreTransformGL() const
 * api/openFrameworks/3d/ofNode.h:128
 */
static int ofLight_restoreTransformGL(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    self->restoreTransformGL();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "restoreTransformGL: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "restoreTransformGL: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::resetTransform()
 * api/openFrameworks/3d/ofNode.h:132
 */
static int ofLight_resetTransform(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    self->resetTransform();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "resetTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "resetTransform: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::draw()
 * api/openFrameworks/3d/ofNode.h:145
 */
static int ofLight_draw(lua_State *L) {
  try {
    ofLight *self = *((ofLight **)dub_checksdata(L, 1, "ofLight"));
    self->draw();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "draw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "draw: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofLight___tostring(lua_State *L) {
  ofLight *self = *((ofLight **)dub_checksdata_n(L, 1, "ofLight"));
  lua_pushfstring(L, "ofLight: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofLight_member_methods[] = {
  { "_cast_"       , ofLight__cast_       },
  { "new"          , ofLight_ofLight      },
  { "set"          , ofLight_operator_sete },
  { "__gc"         , ofLight__ofLight     },
  { "destroy"      , ofLight_destroy      },
  { "setup"        , ofLight_setup        },
  { "enable"       , ofLight_enable       },
  { "disable"      , ofLight_disable      },
  { "getIsEnabled" , ofLight_getIsEnabled },
  { "setDirectional", ofLight_setDirectional },
  { "getIsDirectional", ofLight_getIsDirectional },
  { "setSpotlight" , ofLight_setSpotlight },
  { "getIsSpotlight", ofLight_getIsSpotlight },
  { "setSpotlightCutOff", ofLight_setSpotlightCutOff },
  { "getSpotlightCutOff", ofLight_getSpotlightCutOff },
  { "setSpotConcentration", ofLight_setSpotConcentration },
  { "getSpotConcentration", ofLight_getSpotConcentration },
  { "setPointLight", ofLight_setPointLight },
  { "getIsPointLight", ofLight_getIsPointLight },
  { "setAttenuation", ofLight_setAttenuation },
  { "getAttenuationConstant", ofLight_getAttenuationConstant },
  { "getAttenuationLinear", ofLight_getAttenuationLinear },
  { "getAttenuationQuadratic", ofLight_getAttenuationQuadratic },
  { "getType"      , ofLight_getType      },
  { "setAmbientColor", ofLight_setAmbientColor },
  { "setDiffuseColor", ofLight_setDiffuseColor },
  { "setSpecularColor", ofLight_setSpecularColor },
  { "getAmbientColor", ofLight_getAmbientColor },
  { "getDiffuseColor", ofLight_getDiffuseColor },
  { "getSpecularColor", ofLight_getSpecularColor },
  { "getLightID"   , ofLight_getLightID   },
  { "customDraw"   , ofLight_customDraw   },
  { "setParent"    , ofLight_setParent    },
  { "clearParent"  , ofLight_clearParent  },
  { "getParent"    , ofLight_getParent    },
  { "getPosition"  , ofLight_getPosition  },
  { "getX"         , ofLight_getX         },
  { "getY"         , ofLight_getY         },
  { "getZ"         , ofLight_getZ         },
  { "getXAxis"     , ofLight_getXAxis     },
  { "getYAxis"     , ofLight_getYAxis     },
  { "getZAxis"     , ofLight_getZAxis     },
  { "getSideDir"   , ofLight_getSideDir   },
  { "getLookAtDir" , ofLight_getLookAtDir },
  { "getUpDir"     , ofLight_getUpDir     },
  { "getPitch"     , ofLight_getPitch     },
  { "getHeading"   , ofLight_getHeading   },
  { "getRoll"      , ofLight_getRoll      },
  { "getOrientationQuat", ofLight_getOrientationQuat },
  { "getOrientationEuler", ofLight_getOrientationEuler },
  { "getScale"     , ofLight_getScale     },
  { "getLocalTransformMatrix", ofLight_getLocalTransformMatrix },
  { "getGlobalTransformMatrix", ofLight_getGlobalTransformMatrix },
  { "getGlobalPosition", ofLight_getGlobalPosition },
  { "getGlobalOrientation", ofLight_getGlobalOrientation },
  { "getGlobalScale", ofLight_getGlobalScale },
  { "setTransformMatrix", ofLight_setTransformMatrix },
  { "setPosition"  , ofLight_setPosition  },
  { "setGlobalPosition", ofLight_setGlobalPosition },
  { "setOrientation", ofLight_setOrientation },
  { "setGlobalOrientation", ofLight_setGlobalOrientation },
  { "setScale"     , ofLight_setScale     },
  { "move"         , ofLight_move         },
  { "truck"        , ofLight_truck        },
  { "boom"         , ofLight_boom         },
  { "dolly"        , ofLight_dolly        },
  { "tilt"         , ofLight_tilt         },
  { "pan"          , ofLight_pan          },
  { "roll"         , ofLight_roll         },
  { "rotate"       , ofLight_rotate       },
  { "rotateAround" , ofLight_rotateAround },
  { "lookAt"       , ofLight_lookAt       },
  { "orbit"        , ofLight_orbit        },
  { "transformGL"  , ofLight_transformGL  },
  { "restoreTransformGL", ofLight_restoreTransformGL },
  { "resetTransform", ofLight_resetTransform },
  { "draw"         , ofLight_draw         },
  { "__tostring"   , ofLight___tostring   },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofLight(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofLight");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofLight_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofLight", "ofLight");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
