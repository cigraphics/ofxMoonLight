/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofFilePath
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "utils/ofFileUtils.h"


/** ofFilePath()
 * 
 */
static int ofFilePath_ofFilePath(lua_State *L) {
  try {
    ofFilePath *retval__ = new ofFilePath();
    dub_pushudata(L, retval__, "ofFilePath", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** static string ofFilePath::getFileExt(string filename)
 * api/openFrameworks/utils/ofFileUtils.h:65
 */
static int ofFilePath_getFileExt(lua_State *L) {
  try {
    size_t filename_sz_;
    const char *filename = dub_checklstring(L, 1, &filename_sz_);
    lua_pushlstring(L, ofFilePath::getFileExt(std::string(filename, filename_sz_)).data(), ofFilePath::getFileExt(std::string(filename, filename_sz_)).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getFileExt: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getFileExt: Unknown exception");
  }
  return dub_error(L);
}

/** static string ofFilePath::removeExt(string filename)
 * api/openFrameworks/utils/ofFileUtils.h:66
 */
static int ofFilePath_removeExt(lua_State *L) {
  try {
    size_t filename_sz_;
    const char *filename = dub_checklstring(L, 1, &filename_sz_);
    lua_pushlstring(L, ofFilePath::removeExt(std::string(filename, filename_sz_)).data(), ofFilePath::removeExt(std::string(filename, filename_sz_)).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeExt: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeExt: Unknown exception");
  }
  return dub_error(L);
}

/** static string ofFilePath::addLeadingSlash(string path)
 * api/openFrameworks/utils/ofFileUtils.h:67
 */
static int ofFilePath_addLeadingSlash(lua_State *L) {
  try {
    size_t path_sz_;
    const char *path = dub_checklstring(L, 1, &path_sz_);
    lua_pushlstring(L, ofFilePath::addLeadingSlash(std::string(path, path_sz_)).data(), ofFilePath::addLeadingSlash(std::string(path, path_sz_)).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addLeadingSlash: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addLeadingSlash: Unknown exception");
  }
  return dub_error(L);
}

/** static string ofFilePath::addTrailingSlash(string path)
 * api/openFrameworks/utils/ofFileUtils.h:68
 */
static int ofFilePath_addTrailingSlash(lua_State *L) {
  try {
    size_t path_sz_;
    const char *path = dub_checklstring(L, 1, &path_sz_);
    lua_pushlstring(L, ofFilePath::addTrailingSlash(std::string(path, path_sz_)).data(), ofFilePath::addTrailingSlash(std::string(path, path_sz_)).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addTrailingSlash: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addTrailingSlash: Unknown exception");
  }
  return dub_error(L);
}

/** static string ofFilePath::removeTrailingSlash(string path)
 * api/openFrameworks/utils/ofFileUtils.h:69
 */
static int ofFilePath_removeTrailingSlash(lua_State *L) {
  try {
    size_t path_sz_;
    const char *path = dub_checklstring(L, 1, &path_sz_);
    lua_pushlstring(L, ofFilePath::removeTrailingSlash(std::string(path, path_sz_)).data(), ofFilePath::removeTrailingSlash(std::string(path, path_sz_)).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeTrailingSlash: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeTrailingSlash: Unknown exception");
  }
  return dub_error(L);
}

/** static string ofFilePath::getPathForDirectory(string path)
 * api/openFrameworks/utils/ofFileUtils.h:70
 */
static int ofFilePath_getPathForDirectory(lua_State *L) {
  try {
    size_t path_sz_;
    const char *path = dub_checklstring(L, 1, &path_sz_);
    lua_pushlstring(L, ofFilePath::getPathForDirectory(std::string(path, path_sz_)).data(), ofFilePath::getPathForDirectory(std::string(path, path_sz_)).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPathForDirectory: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPathForDirectory: Unknown exception");
  }
  return dub_error(L);
}

/** static string ofFilePath::getAbsolutePath(string path, bool bRelativeToData=true)
 * api/openFrameworks/utils/ofFileUtils.h:71
 */
static int ofFilePath_getAbsolutePath(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      size_t path_sz_;
      const char *path = dub_checklstring(L, 1, &path_sz_);
      bool bRelativeToData = dub_checkboolean(L, 2);
      lua_pushlstring(L, ofFilePath::getAbsolutePath(std::string(path, path_sz_), bRelativeToData).data(), ofFilePath::getAbsolutePath(std::string(path, path_sz_), bRelativeToData).length());
      return 1;
    } else {
      size_t path_sz_;
      const char *path = dub_checklstring(L, 1, &path_sz_);
      lua_pushlstring(L, ofFilePath::getAbsolutePath(std::string(path, path_sz_)).data(), ofFilePath::getAbsolutePath(std::string(path, path_sz_)).length());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAbsolutePath: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAbsolutePath: Unknown exception");
  }
  return dub_error(L);
}

/** static bool ofFilePath::isAbsolute(string path)
 * api/openFrameworks/utils/ofFileUtils.h:73
 */
static int ofFilePath_isAbsolute(lua_State *L) {
  try {
    size_t path_sz_;
    const char *path = dub_checklstring(L, 1, &path_sz_);
    lua_pushboolean(L, ofFilePath::isAbsolute(std::string(path, path_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isAbsolute: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isAbsolute: Unknown exception");
  }
  return dub_error(L);
}

/** static string ofFilePath::getFileName(string filePath, bool bRelativeToData=true)
 * api/openFrameworks/utils/ofFileUtils.h:75
 */
static int ofFilePath_getFileName(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      size_t filePath_sz_;
      const char *filePath = dub_checklstring(L, 1, &filePath_sz_);
      bool bRelativeToData = dub_checkboolean(L, 2);
      lua_pushlstring(L, ofFilePath::getFileName(std::string(filePath, filePath_sz_), bRelativeToData).data(), ofFilePath::getFileName(std::string(filePath, filePath_sz_), bRelativeToData).length());
      return 1;
    } else {
      size_t filePath_sz_;
      const char *filePath = dub_checklstring(L, 1, &filePath_sz_);
      lua_pushlstring(L, ofFilePath::getFileName(std::string(filePath, filePath_sz_)).data(), ofFilePath::getFileName(std::string(filePath, filePath_sz_)).length());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "getFileName: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getFileName: Unknown exception");
  }
  return dub_error(L);
}

/** static string ofFilePath::getBaseName(string filePath)
 * api/openFrameworks/utils/ofFileUtils.h:76
 */
static int ofFilePath_getBaseName(lua_State *L) {
  try {
    size_t filePath_sz_;
    const char *filePath = dub_checklstring(L, 1, &filePath_sz_);
    lua_pushlstring(L, ofFilePath::getBaseName(std::string(filePath, filePath_sz_)).data(), ofFilePath::getBaseName(std::string(filePath, filePath_sz_)).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBaseName: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBaseName: Unknown exception");
  }
  return dub_error(L);
}

/** static string ofFilePath::getEnclosingDirectory(string filePath, bool bRelativeToData=true)
 * api/openFrameworks/utils/ofFileUtils.h:78
 */
static int ofFilePath_getEnclosingDirectory(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      size_t filePath_sz_;
      const char *filePath = dub_checklstring(L, 1, &filePath_sz_);
      bool bRelativeToData = dub_checkboolean(L, 2);
      lua_pushlstring(L, ofFilePath::getEnclosingDirectory(std::string(filePath, filePath_sz_), bRelativeToData).data(), ofFilePath::getEnclosingDirectory(std::string(filePath, filePath_sz_), bRelativeToData).length());
      return 1;
    } else {
      size_t filePath_sz_;
      const char *filePath = dub_checklstring(L, 1, &filePath_sz_);
      lua_pushlstring(L, ofFilePath::getEnclosingDirectory(std::string(filePath, filePath_sz_)).data(), ofFilePath::getEnclosingDirectory(std::string(filePath, filePath_sz_)).length());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "getEnclosingDirectory: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getEnclosingDirectory: Unknown exception");
  }
  return dub_error(L);
}

/** static string ofFilePath::getCurrentWorkingDirectory()
 * api/openFrameworks/utils/ofFileUtils.h:79
 */
static int ofFilePath_getCurrentWorkingDirectory(lua_State *L) {
  try {
    lua_pushlstring(L, ofFilePath::getCurrentWorkingDirectory().data(), ofFilePath::getCurrentWorkingDirectory().length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCurrentWorkingDirectory: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCurrentWorkingDirectory: Unknown exception");
  }
  return dub_error(L);
}

/** static string ofFilePath::join(string path1, string path2)
 * api/openFrameworks/utils/ofFileUtils.h:80
 */
static int ofFilePath_join(lua_State *L) {
  try {
    size_t path1_sz_;
    const char *path1 = dub_checklstring(L, 1, &path1_sz_);
    size_t path2_sz_;
    const char *path2 = dub_checklstring(L, 2, &path2_sz_);
    lua_pushlstring(L, ofFilePath::join(std::string(path1, path1_sz_), std::string(path2, path2_sz_)).data(), ofFilePath::join(std::string(path1, path1_sz_), std::string(path2, path2_sz_)).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "join: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "join: Unknown exception");
  }
  return dub_error(L);
}

/** static string ofFilePath::getCurrentExePath()
 * api/openFrameworks/utils/ofFileUtils.h:82
 */
static int ofFilePath_getCurrentExePath(lua_State *L) {
  try {
    lua_pushlstring(L, ofFilePath::getCurrentExePath().data(), ofFilePath::getCurrentExePath().length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCurrentExePath: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCurrentExePath: Unknown exception");
  }
  return dub_error(L);
}

/** static string ofFilePath::getCurrentExeDir()
 * api/openFrameworks/utils/ofFileUtils.h:83
 */
static int ofFilePath_getCurrentExeDir(lua_State *L) {
  try {
    lua_pushlstring(L, ofFilePath::getCurrentExeDir().data(), ofFilePath::getCurrentExeDir().length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCurrentExeDir: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCurrentExeDir: Unknown exception");
  }
  return dub_error(L);
}

/** static string ofFilePath::getUserHomeDir()
 * api/openFrameworks/utils/ofFileUtils.h:85
 */
static int ofFilePath_getUserHomeDir(lua_State *L) {
  try {
    lua_pushlstring(L, ofFilePath::getUserHomeDir().data(), ofFilePath::getUserHomeDir().length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUserHomeDir: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUserHomeDir: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofFilePath___tostring(lua_State *L) {
  ofFilePath *self = *((ofFilePath **)dub_checksdata_n(L, 1, "ofFilePath"));
  lua_pushfstring(L, "ofFilePath: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofFilePath_member_methods[] = {
  { "new"          , ofFilePath_ofFilePath },
  { "getFileExt"   , ofFilePath_getFileExt },
  { "removeExt"    , ofFilePath_removeExt },
  { "addLeadingSlash", ofFilePath_addLeadingSlash },
  { "addTrailingSlash", ofFilePath_addTrailingSlash },
  { "removeTrailingSlash", ofFilePath_removeTrailingSlash },
  { "getPathForDirectory", ofFilePath_getPathForDirectory },
  { "getAbsolutePath", ofFilePath_getAbsolutePath },
  { "isAbsolute"   , ofFilePath_isAbsolute },
  { "getFileName"  , ofFilePath_getFileName },
  { "getBaseName"  , ofFilePath_getBaseName },
  { "getEnclosingDirectory", ofFilePath_getEnclosingDirectory },
  { "getCurrentWorkingDirectory", ofFilePath_getCurrentWorkingDirectory },
  { "join"         , ofFilePath_join      },
  { "getCurrentExePath", ofFilePath_getCurrentExePath },
  { "getCurrentExeDir", ofFilePath_getCurrentExeDir },
  { "getUserHomeDir", ofFilePath_getUserHomeDir },
  { "__tostring"   , ofFilePath___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofFilePath(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofFilePath");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofFilePath_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofFilePath", "ofFilePath");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
