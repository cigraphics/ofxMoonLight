/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofRectangle
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "types/ofRectangle.h"


/** Set attributes (key, value)
 * 
 */
static int ofRectangle__set_(lua_State *L) {

  ofRectangle *self = *((ofRectangle **)dub_checksdata_n(L, 1, "ofRectangle"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 10);
  switch(key_h) {
    case 9: {
      if (DUB_ASSERT_KEY(key, "position")) break;
      self->position = **((ofVec3f **)dub_checksdata_n(L, 3, "ofVec3f"));
      return 0;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "x")) break;
      self->x = luaL_checknumber(L, 3);
      return 0;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "y")) break;
      self->y = luaL_checknumber(L, 3);
      return 0;
    }
    case 4: {
      if (DUB_ASSERT_KEY(key, "width")) break;
      self->width = luaL_checknumber(L, 3);
      return 0;
    }
    case 5: {
      if (DUB_ASSERT_KEY(key, "height")) break;
      self->height = luaL_checknumber(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int ofRectangle__get_(lua_State *L) {

  ofRectangle *self = *((ofRectangle **)dub_checksdata_n(L, 1, "ofRectangle", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 10);
  switch(key_h) {
    case 9: {
      if (DUB_ASSERT_KEY(key, "position")) break;
      dub_pushudata(L, &self->position, "ofVec3f", false);
      return 1;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "x")) break;
      lua_pushnumber(L, self->x);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "y")) break;
      lua_pushnumber(L, self->y);
      return 1;
    }
    case 4: {
      if (DUB_ASSERT_KEY(key, "width")) break;
      lua_pushnumber(L, self->width);
      return 1;
    }
    case 5: {
      if (DUB_ASSERT_KEY(key, "height")) break;
      lua_pushnumber(L, self->height);
      return 1;
    }
  }
  return 0;
}

/** ofRectangle::ofRectangle()
 * api/openFrameworks/types/ofRectangle.h:60
 */
static int ofRectangle_ofRectangle(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float px = dub_checknumber(L, 1);
      float py = dub_checknumber(L, 2);
      float w = dub_checknumber(L, 3);
      float h = dub_checknumber(L, 4);
      ofRectangle *retval__ = new ofRectangle(px, py, w, h);
      dub_pushudata(L, retval__, "ofRectangle", true);
      return 1;
    } else if (top__ >= 3) {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      float w = dub_checknumber(L, 2);
      float h = dub_checknumber(L, 3);
      ofRectangle *retval__ = new ofRectangle(*p, w, h);
      dub_pushudata(L, retval__, "ofRectangle", true);
      return 1;
    } else if (top__ >= 2) {
      ofVec3f *p0 = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      ofVec3f *p1 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofRectangle *retval__ = new ofRectangle(*p0, *p1);
      dub_pushudata(L, retval__, "ofRectangle", true);
      return 1;
    } else if (top__ >= 1) {
      ofRectangle *rect = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
      ofRectangle *retval__ = new ofRectangle(*rect);
      dub_pushudata(L, retval__, "ofRectangle", true);
      return 1;
    } else {
      ofRectangle *retval__ = new ofRectangle();
      dub_pushudata(L, retval__, "ofRectangle", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofRectangle::~ofRectangle()
 * api/openFrameworks/types/ofRectangle.h:61
 */
static int ofRectangle__ofRectangle(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofRectangle"));
    if (userdata->gc) {
      ofRectangle *self = (ofRectangle *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::set(float px, float py, float w, float h)
 * api/openFrameworks/types/ofRectangle.h:67
 */
static int ofRectangle_set(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float px = dub_checknumber(L, 2);
      float py = dub_checknumber(L, 3);
      float w = dub_checknumber(L, 4);
      float h = dub_checknumber(L, 5);
      self->set(px, py, w, h);
      return 0;
    } else if (top__ >= 4) {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      float w = dub_checknumber(L, 3);
      float h = dub_checknumber(L, 4);
      self->set(*p, w, h);
      return 0;
    } else if (top__ >= 3) {
      ofVec3f *p0 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofVec3f *p1 = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      self->set(*p0, *p1);
      return 0;
    } else {
      ofRectangle *rect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
      self->set(*rect);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::setX(float px)
 * api/openFrameworks/types/ofRectangle.h:72
 */
static int ofRectangle_setX(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    float px = dub_checknumber(L, 2);
    self->setX(px);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setX: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setX: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::setY(float py)
 * api/openFrameworks/types/ofRectangle.h:73
 */
static int ofRectangle_setY(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    float py = dub_checknumber(L, 2);
    self->setY(py);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setY: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setY: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::setWidth(float w)
 * api/openFrameworks/types/ofRectangle.h:75
 */
static int ofRectangle_setWidth(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    float w = dub_checknumber(L, 2);
    self->setWidth(w);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setWidth: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::setHeight(float h)
 * api/openFrameworks/types/ofRectangle.h:76
 */
static int ofRectangle_setHeight(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    float h = dub_checknumber(L, 2);
    self->setHeight(h);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setHeight: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::setPosition(float px, float py)
 * api/openFrameworks/types/ofRectangle.h:78
 */
static int ofRectangle_setPosition(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float px = dub_checknumber(L, 2);
      float py = dub_checknumber(L, 3);
      self->setPosition(px, py);
      return 0;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->setPosition(*p);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setPosition: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::setFromCenter(float px, float py, float w, float h)
 * api/openFrameworks/types/ofRectangle.h:81
 */
static int ofRectangle_setFromCenter(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float px = dub_checknumber(L, 2);
      float py = dub_checknumber(L, 3);
      float w = dub_checknumber(L, 4);
      float h = dub_checknumber(L, 5);
      self->setFromCenter(px, py, w, h);
      return 0;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      float w = dub_checknumber(L, 3);
      float h = dub_checknumber(L, 4);
      self->setFromCenter(*p, w, h);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFromCenter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFromCenter: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::translate(float dx, float dy)
 * api/openFrameworks/types/ofRectangle.h:84
 */
static int ofRectangle_translate(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float dx = dub_checknumber(L, 2);
      float dy = dub_checknumber(L, 3);
      self->translate(dx, dy);
      return 0;
    } else {
      ofVec3f *dp = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->translate(*dp);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "translate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "translate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::translateX(float dx)
 * api/openFrameworks/types/ofRectangle.h:87
 */
static int ofRectangle_translateX(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    float dx = dub_checknumber(L, 2);
    self->translateX(dx);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "translateX: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "translateX: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::translateY(float dy)
 * api/openFrameworks/types/ofRectangle.h:88
 */
static int ofRectangle_translateY(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    float dy = dub_checknumber(L, 2);
    self->translateY(dy);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "translateY: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "translateY: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::scale(float s)
 * api/openFrameworks/types/ofRectangle.h:90
 */
static int ofRectangle_scale(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float sX = dub_checknumber(L, 2);
      float sY = dub_checknumber(L, 3);
      self->scale(sX, sY);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float s = dub_checknumber(L, 2);
        self->scale(s);
        return 0;
      } else {
        ofVec3f *s = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
        self->scale(*s);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "scale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "scale: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::scaleWidth(float sX)
 * api/openFrameworks/types/ofRectangle.h:94
 */
static int ofRectangle_scaleWidth(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    float sX = dub_checknumber(L, 2);
    self->scaleWidth(sX);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "scaleWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "scaleWidth: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::scaleHeight(float sY)
 * api/openFrameworks/types/ofRectangle.h:95
 */
static int ofRectangle_scaleHeight(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    float sY = dub_checknumber(L, 2);
    self->scaleHeight(sY);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "scaleHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "scaleHeight: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::scaleFromCenter(float s)
 * api/openFrameworks/types/ofRectangle.h:97
 */
static int ofRectangle_scaleFromCenter(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float sX = dub_checknumber(L, 2);
      float sY = dub_checknumber(L, 3);
      self->scaleFromCenter(sX, sY);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float s = dub_checknumber(L, 2);
        self->scaleFromCenter(s);
        return 0;
      } else {
        ofVec3f *s = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
        self->scaleFromCenter(*s);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "scaleFromCenter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "scaleFromCenter: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::scaleTo(const ofRectangle &targetRect, ofScaleMode scaleMode=OF_SCALEMODE_FIT)
 * api/openFrameworks/types/ofRectangle.h:102
 */
static int ofRectangle_scaleTo(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofRectangle *targetRect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
      ofScaleMode scaleMode = (ofScaleMode)dub_checkint(L, 3);
      self->scaleTo(*targetRect, scaleMode);
      return 0;
    } else {
      ofRectangle *targetRect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
      self->scaleTo(*targetRect);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "scaleTo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "scaleTo: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::alignToHorz(const float &targetX, ofAlignHorz thisHorzAnchor=OF_ALIGN_HORZ_CENTER)
 * api/openFrameworks/types/ofRectangle.h:117
 */
static int ofRectangle_alignToHorz(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      ofRectangle *targetRect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
      ofAlignHorz targetHorzAnchor = (ofAlignHorz)dub_checkint(L, 3);
      ofAlignHorz thisHorzAnchor = (ofAlignHorz)dub_checkint(L, 4);
      self->alignToHorz(*targetRect, targetHorzAnchor, thisHorzAnchor);
      return 0;
    } else if (top__ >= 3) {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        const float targetX = dub_checknumber(L, 2);
        ofAlignHorz thisHorzAnchor = (ofAlignHorz)dub_checkint(L, 3);
        self->alignToHorz(targetX, thisHorzAnchor);
        return 0;
      } else {
        ofRectangle *targetRect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
        ofAlignHorz sharedAnchor = (ofAlignHorz)dub_checkint(L, 3);
        self->alignToHorz(*targetRect, sharedAnchor);
        return 0;
      }
    } else {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        const float targetX = dub_checknumber(L, 2);
        self->alignToHorz(targetX);
        return 0;
      } else {
        ofRectangle *targetRect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
        self->alignToHorz(*targetRect);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "alignToHorz: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "alignToHorz: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::alignToVert(const float &targetY, ofAlignVert sharedAnchor=OF_ALIGN_VERT_CENTER)
 * api/openFrameworks/types/ofRectangle.h:127
 */
static int ofRectangle_alignToVert(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      ofRectangle *targetRect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
      ofAlignVert targetVertAnchor = (ofAlignVert)dub_checkint(L, 3);
      ofAlignVert thisVertAnchor = (ofAlignVert)dub_checkint(L, 4);
      self->alignToVert(*targetRect, targetVertAnchor, thisVertAnchor);
      return 0;
    } else if (top__ >= 3) {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        const float targetY = dub_checknumber(L, 2);
        ofAlignVert sharedAnchor = (ofAlignVert)dub_checkint(L, 3);
        self->alignToVert(targetY, sharedAnchor);
        return 0;
      } else {
        ofRectangle *targetRect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
        ofAlignVert sharedAnchor = (ofAlignVert)dub_checkint(L, 3);
        self->alignToVert(*targetRect, sharedAnchor);
        return 0;
      }
    } else {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        const float targetY = dub_checknumber(L, 2);
        self->alignToVert(targetY);
        return 0;
      } else {
        ofRectangle *targetRect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
        self->alignToVert(*targetRect);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "alignToVert: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "alignToVert: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::alignTo(const ofPoint &targetPoint, ofAlignHorz thisHorzAnchor=OF_ALIGN_HORZ_CENTER, ofAlignVert thisVertAnchor=OF_ALIGN_VERT_CENTER)
 * api/openFrameworks/types/ofRectangle.h:138
 */
static int ofRectangle_alignTo(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      ofRectangle *targetRect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
      ofAlignHorz targetHorzAnchor = (ofAlignHorz)dub_checkint(L, 3);
      ofAlignVert targetVertAnchor = (ofAlignVert)dub_checkint(L, 4);
      ofAlignHorz thisHorzAnchor = (ofAlignHorz)dub_checkint(L, 5);
      ofAlignVert thisVertAnchor = (ofAlignVert)dub_checkint(L, 6);
      self->alignTo(*targetRect, targetHorzAnchor, targetVertAnchor, thisHorzAnchor, thisVertAnchor);
      return 0;
    } else if (top__ >= 4) {
      ofVec3f *targetPoint = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofAlignHorz thisHorzAnchor = (ofAlignHorz)dub_checkint(L, 3);
      ofAlignVert thisVertAnchor = (ofAlignVert)dub_checkint(L, 4);
      self->alignTo(*targetPoint, thisHorzAnchor, thisVertAnchor);
      return 0;
    } else if (top__ >= 3) {
      ofVec3f *targetPoint = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofAlignHorz thisHorzAnchor = (ofAlignHorz)dub_checkint(L, 3);
      self->alignTo(*targetPoint, thisHorzAnchor);
      return 0;
    } else {
      ofVec3f *targetPoint = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->alignTo(*targetPoint);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "alignTo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "alignTo: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofRectangle::inside(float px, float py) const
 * api/openFrameworks/types/ofRectangle.h:150
 */
static int ofRectangle_inside(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float px = dub_checknumber(L, 2);
        float py = dub_checknumber(L, 3);
        lua_pushboolean(L, self->inside(px, py));
        return 1;
      } else {
        ofVec3f *p0 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
        ofVec3f *p1 = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
        lua_pushboolean(L, self->inside(*p0, *p1));
        return 1;
      }
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
        ofVec3f *p = *((ofVec3f **)ptr2__);
        lua_pushboolean(L, self->inside(*p));
        return 1;
      } else {
        ofRectangle *rect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
        lua_pushboolean(L, self->inside(*rect));
        return 1;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "inside: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "inside: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofRectangle::intersects(const ofRectangle &rect) const
 * api/openFrameworks/types/ofRectangle.h:155
 */
static int ofRectangle_intersects(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofVec3f *p0 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofVec3f *p1 = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      lua_pushboolean(L, self->intersects(*p0, *p1));
      return 1;
    } else {
      ofRectangle *rect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
      lua_pushboolean(L, self->intersects(*rect));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "intersects: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "intersects: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::growToInclude(float px, float py)
 * api/openFrameworks/types/ofRectangle.h:158
 */
static int ofRectangle_growToInclude(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float px = dub_checknumber(L, 2);
        float py = dub_checknumber(L, 3);
        self->growToInclude(px, py);
        return 0;
      } else {
        ofVec3f *p0 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
        ofVec3f *p1 = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
        self->growToInclude(*p0, *p1);
        return 0;
      }
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
        ofVec3f *p = *((ofVec3f **)ptr2__);
        self->growToInclude(*p);
        return 0;
      } else {
        ofRectangle *rect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
        self->growToInclude(*rect);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "growToInclude: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "growToInclude: Unknown exception");
  }
  return dub_error(L);
}

/** ofRectangle ofRectangle::getIntersection(const ofRectangle &rect) const
 * api/openFrameworks/types/ofRectangle.h:163
 */
static int ofRectangle_getIntersection(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    ofRectangle *rect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
    dub_pushudata(L, new ofRectangle(self->getIntersection(*rect)), "ofRectangle", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getIntersection: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getIntersection: Unknown exception");
  }
  return dub_error(L);
}

/** ofRectangle ofRectangle::getUnion(const ofRectangle &rect) const
 * api/openFrameworks/types/ofRectangle.h:165
 */
static int ofRectangle_getUnion(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    ofRectangle *rect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
    dub_pushudata(L, new ofRectangle(self->getUnion(*rect)), "ofRectangle", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUnion: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUnion: Unknown exception");
  }
  return dub_error(L);
}

/** void ofRectangle::standardize()
 * api/openFrameworks/types/ofRectangle.h:167
 */
static int ofRectangle_standardize(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    self->standardize();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "standardize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "standardize: Unknown exception");
  }
  return dub_error(L);
}

/** ofRectangle ofRectangle::getStandardized() const
 * api/openFrameworks/types/ofRectangle.h:168
 */
static int ofRectangle_getStandardized(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    dub_pushudata(L, new ofRectangle(self->getStandardized()), "ofRectangle", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getStandardized: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getStandardized: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofRectangle::isStandardized() const
 * api/openFrameworks/types/ofRectangle.h:169
 */
static int ofRectangle_isStandardized(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushboolean(L, self->isStandardized());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isStandardized: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isStandardized: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getArea() const
 * api/openFrameworks/types/ofRectangle.h:171
 */
static int ofRectangle_getArea(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushnumber(L, self->getArea());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getArea: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getArea: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getPerimeter() const
 * api/openFrameworks/types/ofRectangle.h:172
 */
static int ofRectangle_getPerimeter(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushnumber(L, self->getPerimeter());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPerimeter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPerimeter: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getAspectRatio() const
 * api/openFrameworks/types/ofRectangle.h:173
 */
static int ofRectangle_getAspectRatio(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushnumber(L, self->getAspectRatio());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAspectRatio: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAspectRatio: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofRectangle::isEmpty() const
 * api/openFrameworks/types/ofRectangle.h:175
 */
static int ofRectangle_isEmpty(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushboolean(L, self->isEmpty());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isEmpty: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isEmpty: Unknown exception");
  }
  return dub_error(L);
}

/** ofPoint ofRectangle::getMin() const
 * api/openFrameworks/types/ofRectangle.h:177
 */
static int ofRectangle_getMin(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    dub_pushudata(L, new ofVec3f(self->getMin()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getMin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getMin: Unknown exception");
  }
  return dub_error(L);
}

/** ofPoint ofRectangle::getMax() const
 * api/openFrameworks/types/ofRectangle.h:178
 */
static int ofRectangle_getMax(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    dub_pushudata(L, new ofVec3f(self->getMax()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getMax: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getMax: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getMinX() const
 * api/openFrameworks/types/ofRectangle.h:180
 */
static int ofRectangle_getMinX(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushnumber(L, self->getMinX());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getMinX: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getMinX: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getMaxX() const
 * api/openFrameworks/types/ofRectangle.h:181
 */
static int ofRectangle_getMaxX(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushnumber(L, self->getMaxX());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getMaxX: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getMaxX: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getMinY() const
 * api/openFrameworks/types/ofRectangle.h:182
 */
static int ofRectangle_getMinY(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushnumber(L, self->getMinY());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getMinY: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getMinY: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getMaxY() const
 * api/openFrameworks/types/ofRectangle.h:183
 */
static int ofRectangle_getMaxY(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushnumber(L, self->getMaxY());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getMaxY: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getMaxY: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getLeft() const
 * api/openFrameworks/types/ofRectangle.h:185
 */
static int ofRectangle_getLeft(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushnumber(L, self->getLeft());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLeft: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLeft: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getRight() const
 * api/openFrameworks/types/ofRectangle.h:186
 */
static int ofRectangle_getRight(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushnumber(L, self->getRight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRight: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getTop() const
 * api/openFrameworks/types/ofRectangle.h:187
 */
static int ofRectangle_getTop(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushnumber(L, self->getTop());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getTop: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getTop: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getBottom() const
 * api/openFrameworks/types/ofRectangle.h:188
 */
static int ofRectangle_getBottom(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushnumber(L, self->getBottom());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBottom: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBottom: Unknown exception");
  }
  return dub_error(L);
}

/** ofPoint ofRectangle::getTopLeft() const
 * api/openFrameworks/types/ofRectangle.h:190
 */
static int ofRectangle_getTopLeft(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    dub_pushudata(L, new ofVec3f(self->getTopLeft()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getTopLeft: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getTopLeft: Unknown exception");
  }
  return dub_error(L);
}

/** ofPoint ofRectangle::getTopRight() const
 * api/openFrameworks/types/ofRectangle.h:191
 */
static int ofRectangle_getTopRight(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    dub_pushudata(L, new ofVec3f(self->getTopRight()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getTopRight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getTopRight: Unknown exception");
  }
  return dub_error(L);
}

/** ofPoint ofRectangle::getBottomLeft() const
 * api/openFrameworks/types/ofRectangle.h:192
 */
static int ofRectangle_getBottomLeft(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    dub_pushudata(L, new ofVec3f(self->getBottomLeft()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBottomLeft: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBottomLeft: Unknown exception");
  }
  return dub_error(L);
}

/** ofPoint ofRectangle::getBottomRight() const
 * api/openFrameworks/types/ofRectangle.h:193
 */
static int ofRectangle_getBottomRight(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    dub_pushudata(L, new ofVec3f(self->getBottomRight()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBottomRight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBottomRight: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getHorzAnchor(ofAlignHorz anchor) const
 * api/openFrameworks/types/ofRectangle.h:195
 */
static int ofRectangle_getHorzAnchor(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    ofAlignHorz anchor = (ofAlignHorz)dub_checkint(L, 2);
    lua_pushnumber(L, self->getHorzAnchor(anchor));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getHorzAnchor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getHorzAnchor: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getVertAnchor(ofAlignVert anchor) const
 * api/openFrameworks/types/ofRectangle.h:196
 */
static int ofRectangle_getVertAnchor(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    ofAlignVert anchor = (ofAlignVert)dub_checkint(L, 2);
    lua_pushnumber(L, self->getVertAnchor(anchor));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getVertAnchor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getVertAnchor: Unknown exception");
  }
  return dub_error(L);
}

/** ofPoint ofRectangle::getPosition() const
 * api/openFrameworks/types/ofRectangle.h:198
 */
static int ofRectangle_getPosition(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    dub_pushudata(L, new ofVec3f(self->getPosition()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPosition: Unknown exception");
  }
  return dub_error(L);
}

/** ofPoint& ofRectangle::getPositionRef()
 * api/openFrameworks/types/ofRectangle.h:199
 */
static int ofRectangle_getPositionRef(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    dub_pushudata(L, &self->getPositionRef(), "ofVec3f", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPositionRef: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPositionRef: Unknown exception");
  }
  return dub_error(L);
}

/** ofPoint ofRectangle::getCenter() const
 * api/openFrameworks/types/ofRectangle.h:201
 */
static int ofRectangle_getCenter(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    dub_pushudata(L, new ofVec3f(self->getCenter()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCenter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCenter: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getX() const
 * api/openFrameworks/types/ofRectangle.h:203
 */
static int ofRectangle_getX(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushnumber(L, self->getX());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getX: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getX: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getY() const
 * api/openFrameworks/types/ofRectangle.h:204
 */
static int ofRectangle_getY(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushnumber(L, self->getY());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getY: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getY: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getWidth() const
 * api/openFrameworks/types/ofRectangle.h:205
 */
static int ofRectangle_getWidth(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushnumber(L, self->getWidth());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWidth: Unknown exception");
  }
  return dub_error(L);
}

/** float ofRectangle::getHeight() const
 * api/openFrameworks/types/ofRectangle.h:206
 */
static int ofRectangle_getHeight(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    lua_pushnumber(L, self->getHeight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getHeight: Unknown exception");
  }
  return dub_error(L);
}

/** ofRectangle& ofRectangle::operator=(const ofRectangle &rect)
 * api/openFrameworks/types/ofRectangle.h:208
 */
static int ofRectangle_operator_sete(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    ofRectangle *rect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
    dub_pushudata(L, &self->operator=(*rect), "ofRectangle", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub_error(L);
}

/** ofRectangle& ofRectangle::operator+(const ofPoint &p)
 * api/openFrameworks/types/ofRectangle.h:209
 */
static int ofRectangle_operator_add(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
    dub_pushudata(L, &self->operator+(*p), "ofRectangle", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__add: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__add: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofRectangle::operator==(const ofRectangle &rect) const
 * api/openFrameworks/types/ofRectangle.h:211
 */
static int ofRectangle_operator_eq(lua_State *L) {
  try {
    ofRectangle *self = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    ofRectangle *rect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
    lua_pushboolean(L, self->operator==(*rect));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__eq: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__eq: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofRectangle___tostring(lua_State *L) {
  ofRectangle *self = *((ofRectangle **)dub_checksdata_n(L, 1, "ofRectangle"));
  lua_pushfstring(L, "ofRectangle: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofRectangle_member_methods[] = {
  { "__newindex"   , ofRectangle__set_    },
  { "__index"      , ofRectangle__get_    },
  { "new"          , ofRectangle_ofRectangle },
  { "__gc"         , ofRectangle__ofRectangle },
  { "set"          , ofRectangle_set      },
  { "setX"         , ofRectangle_setX     },
  { "setY"         , ofRectangle_setY     },
  { "setWidth"     , ofRectangle_setWidth },
  { "setHeight"    , ofRectangle_setHeight },
  { "setPosition"  , ofRectangle_setPosition },
  { "setFromCenter", ofRectangle_setFromCenter },
  { "translate"    , ofRectangle_translate },
  { "translateX"   , ofRectangle_translateX },
  { "translateY"   , ofRectangle_translateY },
  { "scale"        , ofRectangle_scale    },
  { "scaleWidth"   , ofRectangle_scaleWidth },
  { "scaleHeight"  , ofRectangle_scaleHeight },
  { "scaleFromCenter", ofRectangle_scaleFromCenter },
  { "scaleTo"      , ofRectangle_scaleTo  },
  { "alignToHorz"  , ofRectangle_alignToHorz },
  { "alignToVert"  , ofRectangle_alignToVert },
  { "alignTo"      , ofRectangle_alignTo  },
  { "inside"       , ofRectangle_inside   },
  { "intersects"   , ofRectangle_intersects },
  { "growToInclude", ofRectangle_growToInclude },
  { "getIntersection", ofRectangle_getIntersection },
  { "getUnion"     , ofRectangle_getUnion },
  { "standardize"  , ofRectangle_standardize },
  { "getStandardized", ofRectangle_getStandardized },
  { "isStandardized", ofRectangle_isStandardized },
  { "getArea"      , ofRectangle_getArea  },
  { "getPerimeter" , ofRectangle_getPerimeter },
  { "getAspectRatio", ofRectangle_getAspectRatio },
  { "isEmpty"      , ofRectangle_isEmpty  },
  { "getMin"       , ofRectangle_getMin   },
  { "getMax"       , ofRectangle_getMax   },
  { "getMinX"      , ofRectangle_getMinX  },
  { "getMaxX"      , ofRectangle_getMaxX  },
  { "getMinY"      , ofRectangle_getMinY  },
  { "getMaxY"      , ofRectangle_getMaxY  },
  { "getLeft"      , ofRectangle_getLeft  },
  { "getRight"     , ofRectangle_getRight },
  { "getTop"       , ofRectangle_getTop   },
  { "getBottom"    , ofRectangle_getBottom },
  { "getTopLeft"   , ofRectangle_getTopLeft },
  { "getTopRight"  , ofRectangle_getTopRight },
  { "getBottomLeft", ofRectangle_getBottomLeft },
  { "getBottomRight", ofRectangle_getBottomRight },
  { "getHorzAnchor", ofRectangle_getHorzAnchor },
  { "getVertAnchor", ofRectangle_getVertAnchor },
  { "getPosition"  , ofRectangle_getPosition },
  { "getPositionRef", ofRectangle_getPositionRef },
  { "getCenter"    , ofRectangle_getCenter },
  { "getX"         , ofRectangle_getX     },
  { "getY"         , ofRectangle_getY     },
  { "getWidth"     , ofRectangle_getWidth },
  { "getHeight"    , ofRectangle_getHeight },
  { "set"          , ofRectangle_operator_sete },
  { "__add"        , ofRectangle_operator_add },
  { "__eq"         , ofRectangle_operator_eq },
  { "__tostring"   , ofRectangle___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofRectangle(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofRectangle");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofRectangle_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofRectangle", "ofRectangle");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
