/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofAppBaseWindow
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/app/ofAppBaseWindow.h"


/** ofAppBaseWindow::ofAppBaseWindow()
 * api/openFrameworks/app/ofAppBaseWindow.h:12
 */
static int ofAppBaseWindow_ofAppBaseWindow(lua_State *L) {
  try {
    ofAppBaseWindow *retval__ = new ofAppBaseWindow();
    dub_pushudata(L, retval__, "ofAppBaseWindow", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofAppBaseWindow::~ofAppBaseWindow()
 * api/openFrameworks/app/ofAppBaseWindow.h:13
 */
static int ofAppBaseWindow__ofAppBaseWindow(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofAppBaseWindow"));
    if (userdata->gc) {
      ofAppBaseWindow *self = (ofAppBaseWindow *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofAppBaseWindow::setupOpenGL(int w, int h, int screenMode)
 * api/openFrameworks/app/ofAppBaseWindow.h:15
 */
static int ofAppBaseWindow_setupOpenGL(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    int w = dub_checkint(L, 2);
    int h = dub_checkint(L, 3);
    int screenMode = dub_checkint(L, 4);
    self->setupOpenGL(w, h, screenMode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setupOpenGL: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setupOpenGL: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofAppBaseWindow::initializeWindow()
 * api/openFrameworks/app/ofAppBaseWindow.h:16
 */
static int ofAppBaseWindow_initializeWindow(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    self->initializeWindow();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "initializeWindow: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "initializeWindow: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofAppBaseWindow::runAppViaInfiniteLoop(ofBaseApp *appPtr)
 * api/openFrameworks/app/ofAppBaseWindow.h:17
 */
static int ofAppBaseWindow_runAppViaInfiniteLoop(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    ofBaseApp *appPtr = *((ofBaseApp **)dub_checksdata(L, 2, "ofBaseApp"));
    self->runAppViaInfiniteLoop(appPtr);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "runAppViaInfiniteLoop: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "runAppViaInfiniteLoop: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofAppBaseWindow::hideCursor()
 * api/openFrameworks/app/ofAppBaseWindow.h:19
 */
static int ofAppBaseWindow_hideCursor(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    self->hideCursor();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "hideCursor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "hideCursor: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofAppBaseWindow::showCursor()
 * api/openFrameworks/app/ofAppBaseWindow.h:20
 */
static int ofAppBaseWindow_showCursor(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    self->showCursor();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "showCursor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "showCursor: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofAppBaseWindow::setWindowPosition(int x, int y)
 * api/openFrameworks/app/ofAppBaseWindow.h:22
 */
static int ofAppBaseWindow_setWindowPosition(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    int x = dub_checkint(L, 2);
    int y = dub_checkint(L, 3);
    self->setWindowPosition(x, y);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setWindowPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setWindowPosition: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofAppBaseWindow::setWindowShape(int w, int h)
 * api/openFrameworks/app/ofAppBaseWindow.h:23
 */
static int ofAppBaseWindow_setWindowShape(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    int w = dub_checkint(L, 2);
    int h = dub_checkint(L, 3);
    self->setWindowShape(w, h);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setWindowShape: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setWindowShape: Unknown exception");
  }
  return dub_error(L);
}

/** virtual int ofAppBaseWindow::getFrameNum()
 * api/openFrameworks/app/ofAppBaseWindow.h:25
 */
static int ofAppBaseWindow_getFrameNum(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    lua_pushnumber(L, self->getFrameNum());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getFrameNum: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getFrameNum: Unknown exception");
  }
  return dub_error(L);
}

/** virtual float ofAppBaseWindow::getFrameRate()
 * api/openFrameworks/app/ofAppBaseWindow.h:26
 */
static int ofAppBaseWindow_getFrameRate(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    lua_pushnumber(L, self->getFrameRate());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getFrameRate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getFrameRate: Unknown exception");
  }
  return dub_error(L);
}

/** virtual double ofAppBaseWindow::getLastFrameTime()
 * api/openFrameworks/app/ofAppBaseWindow.h:27
 */
static int ofAppBaseWindow_getLastFrameTime(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    lua_pushnumber(L, self->getLastFrameTime());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLastFrameTime: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLastFrameTime: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofPoint ofAppBaseWindow::getWindowPosition()
 * api/openFrameworks/app/ofAppBaseWindow.h:29
 */
static int ofAppBaseWindow_getWindowPosition(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    dub_pushudata(L, new ofVec3f(self->getWindowPosition()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWindowPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWindowPosition: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofPoint ofAppBaseWindow::getWindowSize()
 * api/openFrameworks/app/ofAppBaseWindow.h:30
 */
static int ofAppBaseWindow_getWindowSize(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    dub_pushudata(L, new ofVec3f(self->getWindowSize()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWindowSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWindowSize: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofPoint ofAppBaseWindow::getScreenSize()
 * api/openFrameworks/app/ofAppBaseWindow.h:31
 */
static int ofAppBaseWindow_getScreenSize(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    dub_pushudata(L, new ofVec3f(self->getScreenSize()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getScreenSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getScreenSize: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofAppBaseWindow::setOrientation(ofOrientation orientation)
 * api/openFrameworks/app/ofAppBaseWindow.h:33
 */
static int ofAppBaseWindow_setOrientation(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    ofOrientation orientation = (ofOrientation)dub_checkint(L, 2);
    self->setOrientation(orientation);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setOrientation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setOrientation: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofOrientation ofAppBaseWindow::getOrientation()
 * api/openFrameworks/app/ofAppBaseWindow.h:34
 */
static int ofAppBaseWindow_getOrientation(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    lua_pushnumber(L, self->getOrientation());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getOrientation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getOrientation: Unknown exception");
  }
  return dub_error(L);
}

/** virtual bool ofAppBaseWindow::doesHWOrientation()
 * api/openFrameworks/app/ofAppBaseWindow.h:35
 */
static int ofAppBaseWindow_doesHWOrientation(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    lua_pushboolean(L, self->doesHWOrientation());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "doesHWOrientation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "doesHWOrientation: Unknown exception");
  }
  return dub_error(L);
}

/** virtual int ofAppBaseWindow::getWidth()
 * api/openFrameworks/app/ofAppBaseWindow.h:38
 */
static int ofAppBaseWindow_getWidth(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    lua_pushnumber(L, self->getWidth());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWidth: Unknown exception");
  }
  return dub_error(L);
}

/** virtual int ofAppBaseWindow::getHeight()
 * api/openFrameworks/app/ofAppBaseWindow.h:39
 */
static int ofAppBaseWindow_getHeight(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    lua_pushnumber(L, self->getHeight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getHeight: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofAppBaseWindow::setFrameRate(float targetRate)
 * api/openFrameworks/app/ofAppBaseWindow.h:41
 */
static int ofAppBaseWindow_setFrameRate(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    float targetRate = dub_checknumber(L, 2);
    self->setFrameRate(targetRate);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFrameRate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFrameRate: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofAppBaseWindow::setWindowTitle(string title)
 * api/openFrameworks/app/ofAppBaseWindow.h:42
 */
static int ofAppBaseWindow_setWindowTitle(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    string *title = *((string **)dub_checksdata(L, 2, "string"));
    self->setWindowTitle(*title);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setWindowTitle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setWindowTitle: Unknown exception");
  }
  return dub_error(L);
}

/** virtual int ofAppBaseWindow::getWindowMode()
 * api/openFrameworks/app/ofAppBaseWindow.h:44
 */
static int ofAppBaseWindow_getWindowMode(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    lua_pushnumber(L, self->getWindowMode());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWindowMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWindowMode: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofAppBaseWindow::setFullscreen(bool fullscreen)
 * api/openFrameworks/app/ofAppBaseWindow.h:46
 */
static int ofAppBaseWindow_setFullscreen(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    bool fullscreen = dub_checkboolean(L, 2);
    self->setFullscreen(fullscreen);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFullscreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFullscreen: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofAppBaseWindow::toggleFullscreen()
 * api/openFrameworks/app/ofAppBaseWindow.h:47
 */
static int ofAppBaseWindow_toggleFullscreen(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    self->toggleFullscreen();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "toggleFullscreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "toggleFullscreen: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofAppBaseWindow::enableSetupScreen()
 * api/openFrameworks/app/ofAppBaseWindow.h:49
 */
static int ofAppBaseWindow_enableSetupScreen(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    self->enableSetupScreen();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableSetupScreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableSetupScreen: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofAppBaseWindow::disableSetupScreen()
 * api/openFrameworks/app/ofAppBaseWindow.h:50
 */
static int ofAppBaseWindow_disableSetupScreen(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    self->disableSetupScreen();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disableSetupScreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disableSetupScreen: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofAppBaseWindow::setVerticalSync(bool enabled)
 * api/openFrameworks/app/ofAppBaseWindow.h:52
 */
static int ofAppBaseWindow_setVerticalSync(lua_State *L) {
  try {
    ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata(L, 1, "ofAppBaseWindow"));
    bool enabled = dub_checkboolean(L, 2);
    self->setVerticalSync(enabled);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setVerticalSync: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setVerticalSync: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofAppBaseWindow___tostring(lua_State *L) {
  ofAppBaseWindow *self = *((ofAppBaseWindow **)dub_checksdata_n(L, 1, "ofAppBaseWindow"));
  lua_pushfstring(L, "ofAppBaseWindow: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofAppBaseWindow_member_methods[] = {
  { "new"          , ofAppBaseWindow_ofAppBaseWindow },
  { "__gc"         , ofAppBaseWindow__ofAppBaseWindow },
  { "setupOpenGL"  , ofAppBaseWindow_setupOpenGL },
  { "initializeWindow", ofAppBaseWindow_initializeWindow },
  { "runAppViaInfiniteLoop", ofAppBaseWindow_runAppViaInfiniteLoop },
  { "hideCursor"   , ofAppBaseWindow_hideCursor },
  { "showCursor"   , ofAppBaseWindow_showCursor },
  { "setWindowPosition", ofAppBaseWindow_setWindowPosition },
  { "setWindowShape", ofAppBaseWindow_setWindowShape },
  { "getFrameNum"  , ofAppBaseWindow_getFrameNum },
  { "getFrameRate" , ofAppBaseWindow_getFrameRate },
  { "getLastFrameTime", ofAppBaseWindow_getLastFrameTime },
  { "getWindowPosition", ofAppBaseWindow_getWindowPosition },
  { "getWindowSize", ofAppBaseWindow_getWindowSize },
  { "getScreenSize", ofAppBaseWindow_getScreenSize },
  { "setOrientation", ofAppBaseWindow_setOrientation },
  { "getOrientation", ofAppBaseWindow_getOrientation },
  { "doesHWOrientation", ofAppBaseWindow_doesHWOrientation },
  { "getWidth"     , ofAppBaseWindow_getWidth },
  { "getHeight"    , ofAppBaseWindow_getHeight },
  { "setFrameRate" , ofAppBaseWindow_setFrameRate },
  { "setWindowTitle", ofAppBaseWindow_setWindowTitle },
  { "getWindowMode", ofAppBaseWindow_getWindowMode },
  { "setFullscreen", ofAppBaseWindow_setFullscreen },
  { "toggleFullscreen", ofAppBaseWindow_toggleFullscreen },
  { "enableSetupScreen", ofAppBaseWindow_enableSetupScreen },
  { "disableSetupScreen", ofAppBaseWindow_disableSetupScreen },
  { "setVerticalSync", ofAppBaseWindow_setVerticalSync },
  { "__tostring"   , ofAppBaseWindow___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofAppBaseWindow(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofAppBaseWindow");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofAppBaseWindow_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofAppBaseWindow", "ofAppBaseWindow");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
