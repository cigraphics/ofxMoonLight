/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofImage
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/types/ofBaseTypes.h"


/** ofImage()
 * 
 */
static int ofImage_ofImage(lua_State *L) {
  try {
    ofImage *retval__ = new ofImage();
    dub_pushudata(L, retval__, "ofImage", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** ~ofImage_()
 * 
 */
static int ofImage__ofImage(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofImage"));
    if (userdata->gc) {
      ofImage *self = (ofImage *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofImage___tostring(lua_State *L) {
  ofImage *self = *((ofImage **)dub_checksdata_n(L, 1, "ofImage"));
  lua_pushfstring(L, "ofImage: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofImage_member_methods[] = {
  { "new"          , ofImage_ofImage      },
  { "__gc"         , ofImage__ofImage     },
  { "__tostring"   , ofImage___tostring   },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofImage(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofImage");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofImage_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofImage", "ofImage");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
