/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofImage
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "graphics/ofImage.h"


/** Set attributes (key, value)
 * 
 */
static int ofImage__set_(lua_State *L) {

  ofImage *self = *((ofImage **)dub_checksdata_n(L, 1, "ofImage"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 9);
  switch(key_h) {
    case 2: {
      if (DUB_ASSERT_KEY(key, "width")) break;
      self->width = luaL_checkint(L, 3);
      return 0;
    }
    case 8: {
      if (DUB_ASSERT_KEY(key, "height")) break;
      self->height = luaL_checkint(L, 3);
      return 0;
    }
    case 5: {
      if (DUB_ASSERT_KEY(key, "bpp")) break;
      self->bpp = luaL_checkint(L, 3);
      return 0;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "type")) break;
      self->type = luaL_checkint(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int ofImage__get_(lua_State *L) {

  ofImage *self = *((ofImage **)dub_checksdata_n(L, 1, "ofImage", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 9);
  switch(key_h) {
    case 2: {
      if (DUB_ASSERT_KEY(key, "width")) break;
      lua_pushnumber(L, self->width);
      return 1;
    }
    case 8: {
      if (DUB_ASSERT_KEY(key, "height")) break;
      lua_pushnumber(L, self->height);
      return 1;
    }
    case 5: {
      if (DUB_ASSERT_KEY(key, "bpp")) break;
      lua_pushnumber(L, self->bpp);
      return 1;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "type")) break;
      lua_pushnumber(L, self->type);
      return 1;
    }
  }
  return 0;
}

/** ofImage_< PixelType >::ofImage_()
 * api/openFrameworks/graphics/ofImage.h:89
 */
static int ofImage_ofImage(lua_State *L) {
  try {
    ofImage *retval__ = new ofImage();
    dub_pushudata(L, retval__, "ofImage", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofImage_< PixelType >::~ofImage_()
 * api/openFrameworks/graphics/ofImage.h:90
 */
static int ofImage__ofImage(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofImage"));
    if (userdata->gc) {
      ofImage *self = (ofImage *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::allocate(int w, int h, ofImageType type)
 * api/openFrameworks/graphics/ofImage.h:97
 */
static int ofImage_allocate(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    int w = dub_checkint(L, 2);
    int h = dub_checkint(L, 3);
    ofImageType type = (ofImageType)dub_checkint(L, 4);
    self->allocate(w, h, type);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "allocate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "allocate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::clear()
 * api/openFrameworks/graphics/ofImage.h:98
 */
static int ofImage_clear(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    self->clear();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clear: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clear: Unknown exception");
  }
  return dub_error(L);
}

/** ofImage_<PixelType>& ofImage_< PixelType >::operator=(const ofImage_< PixelType > &mom)
 * api/openFrameworks/graphics/ofImage.h:102
 */
static int ofImage_operator_sete(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    ofImage *mom = *((ofImage **)dub_checksdata(L, 2, "ofImage"));
    dub_pushudata(L, &self->operator=(*mom), "ofImage", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::setUseTexture(bool bUse)
 * api/openFrameworks/graphics/ofImage.h:115
 */
static int ofImage_setUseTexture(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    bool bUse = dub_checkboolean(L, 2);
    self->setUseTexture(bUse);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUseTexture: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUseTexture: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofImage_< PixelType >::isUsingTexture()
 * api/openFrameworks/graphics/ofImage.h:116
 */
static int ofImage_isUsingTexture(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    lua_pushboolean(L, self->isUsingTexture());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isUsingTexture: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isUsingTexture: Unknown exception");
  }
  return dub_error(L);
}

/** ofTexture& ofImage_< PixelType >::getTextureReference()
 * api/openFrameworks/graphics/ofImage.h:119
 */
static int ofImage_getTextureReference(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    dub_pushudata(L, &self->getTextureReference(), "ofTexture", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getTextureReference: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getTextureReference: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::bind()
 * api/openFrameworks/graphics/ofImage.h:122
 */
static int ofImage_bind(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    self->bind();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "bind: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "bind: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::unbind()
 * api/openFrameworks/graphics/ofImage.h:123
 */
static int ofImage_unbind(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    self->unbind();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "unbind: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "unbind: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofImage_< PixelType >::loadImage(string fileName)
 * api/openFrameworks/graphics/ofImage.h:126
 */
static int ofImage_loadImage(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    size_t fileName_sz_;
    const char *fileName = dub_checklstring(L, 2, &fileName_sz_);
    lua_pushboolean(L, self->loadImage(std::string(fileName, fileName_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "loadImage: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "loadImage: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::saveImage(string fileName, ofImageQualityType compressionLevel=OF_IMAGE_QUALITY_BEST)
 * api/openFrameworks/graphics/ofImage.h:129
 */
static int ofImage_saveImage(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    size_t fileName_sz_;
    const char *fileName = dub_checklstring(L, 2, &fileName_sz_);
    ofImageQualityType compressionLevel = (ofImageQualityType)dub_checkint(L, 3);
    self->saveImage(std::string(fileName, fileName_sz_), compressionLevel);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "saveImage: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "saveImage: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::setCompression(ofTexCompression compression)
 * api/openFrameworks/graphics/ofImage.h:134
 */
static int ofImage_setCompression(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    ofTexCompression compression = (ofTexCompression)dub_checkint(L, 2);
    self->setCompression(compression);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCompression: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCompression: Unknown exception");
  }
  return dub_error(L);
}

///** PixelType* ofImage_< PixelType >::getPixels()
// * api/openFrameworks/graphics/ofImage.h:137
// */
//static int ofImage_getPixels(lua_State *L) {
//  try {
//    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
//    PixelType *retval__ = self->getPixels();
//    if (!retval__) return 0;
//    dub_pushudata(L, retval__, "PixelType", false);
//    return 1;
//  } catch (std::exception &e) {
//    lua_pushfstring(L, "getPixels: %s", e.what());
//  } catch (...) {
//    lua_pushfstring(L, "getPixels: Unknown exception");
//  }
//  return dub_error(L);
//}
//
///** ofPixels_<PixelType>& ofImage_< PixelType >::getPixelsRef()
// * api/openFrameworks/graphics/ofImage.h:138
// */
//static int ofImage_getPixelsRef(lua_State *L) {
//  try {
//    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
//    dub_pushudata(L, &self->getPixelsRef(), "ofPixels_< PixelType >", false);
//    return 1;
//  } catch (std::exception &e) {
//    lua_pushfstring(L, "getPixelsRef: %s", e.what());
//  } catch (...) {
//    lua_pushfstring(L, "getPixelsRef: Unknown exception");
//  }
//  return dub_error(L);
//}

/** ofColor_<PixelType> ofImage_< PixelType >::getColor(int x, int y) const
 * api/openFrameworks/graphics/ofImage.h:142
 */
static int ofImage_getColor(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    int x = dub_checkint(L, 2);
    int y = dub_checkint(L, 3);
    dub_pushudata(L, new ofColor(self->getColor(x, y)), "ofColor", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getColor: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::setColor(int x, int y, ofColor color)
 * api/openFrameworks/graphics/ofImage.h:145
 */
static int ofImage_setColor(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    int x = dub_checkint(L, 2);
    int y = dub_checkint(L, 3);
    ofColor *color = *((ofColor **)dub_checksdata(L, 4, "ofColor"));
    self->setColor(x, y, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setColor: Unknown exception");
  }
  return dub_error(L);
}

///** void ofImage_< PixelType >::setFromPixels(const PixelType *pixels, int w, int h, ofImageType type, bool bOrderIsRGB=true)
// * api/openFrameworks/graphics/ofImage.h:146
// */
//static int ofImage_setFromPixels(lua_State *L) {
//  try {
//    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
//    PixelType *pixels = *((PixelType **)dub_checksdata(L, 2, "PixelType"));
//    int w = dub_checkint(L, 3);
//    int h = dub_checkint(L, 4);
//    ofImageType type = (ofImageType)dub_checkint(L, 5);
//    bool bOrderIsRGB = dub_checkboolean(L, 6);
//    self->setFromPixels(pixels, w, h, type, bOrderIsRGB);
//    return 0;
//  } catch (std::exception &e) {
//    lua_pushfstring(L, "setFromPixels: %s", e.what());
//  } catch (...) {
//    lua_pushfstring(L, "setFromPixels: Unknown exception");
//  }
//  return dub_error(L);
//}

/** void ofImage_< PixelType >::setImageType(ofImageType type)
 * api/openFrameworks/graphics/ofImage.h:148
 */
static int ofImage_setImageType(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    ofImageType type = (ofImageType)dub_checkint(L, 2);
    self->setImageType(type);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setImageType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setImageType: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::resize(int newWidth, int newHeight)
 * api/openFrameworks/graphics/ofImage.h:149
 */
static int ofImage_resize(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    int newWidth = dub_checkint(L, 2);
    int newHeight = dub_checkint(L, 3);
    self->resize(newWidth, newHeight);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "resize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "resize: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::grabScreen(int x, int y, int w, int h)
 * api/openFrameworks/graphics/ofImage.h:150
 */
static int ofImage_grabScreen(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    int x = dub_checkint(L, 2);
    int y = dub_checkint(L, 3);
    int w = dub_checkint(L, 4);
    int h = dub_checkint(L, 5);
    self->grabScreen(x, y, w, h);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "grabScreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "grabScreen: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::crop(int x, int y, int w, int h)
 * api/openFrameworks/graphics/ofImage.h:153
 */
static int ofImage_crop(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    int x = dub_checkint(L, 2);
    int y = dub_checkint(L, 3);
    int w = dub_checkint(L, 4);
    int h = dub_checkint(L, 5);
    self->crop(x, y, w, h);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "crop: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "crop: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::cropFrom(ofImage_< PixelType > &otherImage, int x, int y, int w, int h)
 * api/openFrameworks/graphics/ofImage.h:157
 */
static int ofImage_cropFrom(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    ofImage *otherImage = *((ofImage **)dub_checksdata(L, 2, "ofImage"));
    int x = dub_checkint(L, 3);
    int y = dub_checkint(L, 4);
    int w = dub_checkint(L, 5);
    int h = dub_checkint(L, 6);
    self->cropFrom(*otherImage, x, y, w, h);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "cropFrom: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "cropFrom: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::rotate90(int rotation)
 * api/openFrameworks/graphics/ofImage.h:159
 */
static int ofImage_rotate90(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    int rotation = dub_checkint(L, 2);
    self->rotate90(rotation);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotate90: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotate90: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::mirror(bool vertical, bool horizontal)
 * api/openFrameworks/graphics/ofImage.h:160
 */
static int ofImage_mirror(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    bool vertical = dub_checkboolean(L, 2);
    bool horizontal = dub_checkboolean(L, 3);
    self->mirror(vertical, horizontal);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "mirror: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mirror: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::update()
 * api/openFrameworks/graphics/ofImage.h:166
 */
static int ofImage_update(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    self->update();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "update: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "update: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::setAnchorPercent(float xPct, float yPct)
 * api/openFrameworks/graphics/ofImage.h:170
 */
static int ofImage_setAnchorPercent(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    float xPct = dub_checknumber(L, 2);
    float yPct = dub_checknumber(L, 3);
    self->setAnchorPercent(xPct, yPct);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAnchorPercent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAnchorPercent: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::setAnchorPoint(float x, float y)
 * api/openFrameworks/graphics/ofImage.h:171
 */
static int ofImage_setAnchorPoint(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    self->setAnchorPoint(x, y);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAnchorPoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAnchorPoint: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::resetAnchor()
 * api/openFrameworks/graphics/ofImage.h:172
 */
static int ofImage_resetAnchor(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    self->resetAnchor();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "resetAnchor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "resetAnchor: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::draw(float x, float y)
 * api/openFrameworks/graphics/ofImage.h:176
 */
static int ofImage_draw(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    self->draw(x, y);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "draw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "draw: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::drawSubsection(float x, float y, float w, float h, float sx, float sy)
 * api/openFrameworks/graphics/ofImage.h:181
 */
static int ofImage_drawSubsection(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    float w = dub_checknumber(L, 4);
    float h = dub_checknumber(L, 5);
    float sx = dub_checknumber(L, 6);
    float sy = dub_checknumber(L, 7);
    self->drawSubsection(x, y, w, h, sx, sy);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawSubsection: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawSubsection: Unknown exception");
  }
  return dub_error(L);
}

/** float ofImage_< PixelType >::getHeight()
 * api/openFrameworks/graphics/ofImage.h:186
 */
static int ofImage_getHeight(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    lua_pushnumber(L, self->getHeight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getHeight: Unknown exception");
  }
  return dub_error(L);
}

/** float ofImage_< PixelType >::getWidth()
 * api/openFrameworks/graphics/ofImage.h:187
 */
static int ofImage_getWidth(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    lua_pushnumber(L, self->getWidth());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWidth: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofImage_< PixelType >::bAllocated()
 * api/openFrameworks/graphics/ofImage.h:189
 */
static int ofImage_bAllocated(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    lua_pushboolean(L, self->bAllocated());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "bAllocated: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "bAllocated: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofImage_< PixelType >::isAllocated()
 * api/openFrameworks/graphics/ofImage.h:190
 */
static int ofImage_isAllocated(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    lua_pushboolean(L, self->isAllocated());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isAllocated: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isAllocated: Unknown exception");
  }
  return dub_error(L);
}

/** void ofImage_< PixelType >::reloadTexture()
 * api/openFrameworks/graphics/ofImage.h:192
 */
static int ofImage_reloadTexture(lua_State *L) {
  try {
    ofImage *self = *((ofImage **)dub_checksdata(L, 1, "ofImage"));
    self->reloadTexture();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "reloadTexture: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "reloadTexture: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofImage___tostring(lua_State *L) {
  ofImage *self = *((ofImage **)dub_checksdata_n(L, 1, "ofImage"));
  lua_pushfstring(L, "ofImage: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofImage_member_methods[] = {
  { "__newindex"   , ofImage__set_        },
  { "__index"      , ofImage__get_        },
  { "new"          , ofImage_ofImage      },
  { "__gc"         , ofImage__ofImage     },
  { "allocate"     , ofImage_allocate     },
  { "clear"        , ofImage_clear        },
  { "set"          , ofImage_operator_sete },
  { "setUseTexture", ofImage_setUseTexture },
  { "isUsingTexture", ofImage_isUsingTexture },
  { "getTextureReference", ofImage_getTextureReference },
  { "bind"         , ofImage_bind         },
  { "unbind"       , ofImage_unbind       },
  { "loadImage"    , ofImage_loadImage    },
  { "saveImage"    , ofImage_saveImage    },
  { "setCompression", ofImage_setCompression },
//  { "getPixels"    , ofImage_getPixels    },
//  { "getPixelsRef" , ofImage_getPixelsRef },
  { "getColor"     , ofImage_getColor     },
  { "setColor"     , ofImage_setColor     },
//  { "setFromPixels", ofImage_setFromPixels },
  { "setImageType" , ofImage_setImageType },
  { "resize"       , ofImage_resize       },
  { "grabScreen"   , ofImage_grabScreen   },
  { "crop"         , ofImage_crop         },
  { "cropFrom"     , ofImage_cropFrom     },
  { "rotate90"     , ofImage_rotate90     },
  { "mirror"       , ofImage_mirror       },
  { "update"       , ofImage_update       },
  { "setAnchorPercent", ofImage_setAnchorPercent },
  { "setAnchorPoint", ofImage_setAnchorPoint },
  { "resetAnchor"  , ofImage_resetAnchor  },
  { "draw"         , ofImage_draw         },
  { "drawSubsection", ofImage_drawSubsection },
  { "getHeight"    , ofImage_getHeight    },
  { "getWidth"     , ofImage_getWidth     },
  { "bAllocated"   , ofImage_bAllocated   },
  { "isAllocated"  , ofImage_isAllocated  },
  { "reloadTexture", ofImage_reloadTexture },
  { "__tostring"   , ofImage___tostring   },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofImage(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofImage");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofImage_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofImage", "ofImage");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
