/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for library of
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "app/ofAppBaseWindow.h"
#include "types/ofBaseTypes.h"
#include "3d/ofCamera.h"
#include "types/ofColor.h"
#include "3d/ofEasyCam.h"
#include "events/ofEvents.h"
#include "gl/ofGLES2Renderer.h"
#include "gl/ofFbo.h"
#include "utils/ofFileUtils.h"
#include "gl/ofLight.h"
#include "utils/ofLog.h"
#include "ofLuaApp.h"
#include "gl/ofMaterial.h"
#include "math/ofMatrix3x3.h"
#include "math/ofMatrix4x4.h"
#include "3d/ofMesh.h"
#include "3d/ofNode.h"
#include "graphics/ofPath.h"
#include "graphics/ofPolyline.h"
#include "math/ofQuaternion.h"
#include "types/ofRectangle.h"
#include "gl/ofShader.h"
#include "sound/ofSoundPlayer.h"
#include "sound/ofSoundStream.h"
#include "graphics/ofTessellator.h"
#include "gl/ofTexture.h"
#include "utils/ofThread.h"
#include "graphics/ofTrueTypeFont.h"
#include "types/ofTypes.h"
#include "utils/ofURLFileLoader.h"
#include "gl/ofVbo.h"
#include "gl/ofVboMesh.h"
#include "math/ofVec2f.h"
#include "math/ofVec3f.h"
#include "math/ofVec4f.h"
#include "video/ofVideoGrabber.h"
#include "video/ofVideoPlayer.h"
#include "3d/of3dUtils.h"
#include "app/ofAppRunner.h"
#include "graphics/ofBitmapFont.h"
#include "events/ofEventUtils.h"
#include "gl/ofGLUtils.h"
#include "graphics/ofGraphics.h"
#include "graphics/ofImage.h"
#include "math/ofMath.h"
#include "utils/ofNoise.h"
#include "utils/ofSystemUtils.h"
#include "utils/ofUtils.h"
#include "utils/ofConstants.h"
#include "graphics/ofPixels.h"

using namespace std;

extern "C" {
int luaopen_ofAppBaseWindow(lua_State *L);
int luaopen_ofBaseGLRenderer(lua_State *L);
int luaopen_ofCamera(lua_State *L);
int luaopen_ofColor(lua_State *L);
int luaopen_ofEasyCam(lua_State *L);
int luaopen_ofDragInfo(lua_State *L);
int luaopen_ofEventArgs(lua_State *L);
int luaopen_ofEntryEventArgs(lua_State *L);
int luaopen_ofKeyEventArgs(lua_State *L);
int luaopen_ofMouseEventArgs(lua_State *L);
int luaopen_ofTouchEventArgs(lua_State *L);
int luaopen_ofAudioEventArgs(lua_State *L);
int luaopen_ofResizeEventArgs(lua_State *L);
int luaopen_ofMessage(lua_State *L);
int luaopen_ofCoreEvents(lua_State *L);
int luaopen_ofGLES2Renderer(lua_State *L);
int luaopen_ofFbo(lua_State *L);
int luaopen_ofBuffer(lua_State *L);
int luaopen_ofFilePath(lua_State *L);
int luaopen_ofFile(lua_State *L);
int luaopen_ofDirectory(lua_State *L);
int luaopen_ofLight(lua_State *L);
int luaopen_ofLog(lua_State *L);
int luaopen_ofLogVerbose(lua_State *L);
int luaopen_ofLogNotice(lua_State *L);
int luaopen_ofLogWarning(lua_State *L);
int luaopen_ofLogError(lua_State *L);
int luaopen_ofLogFatalError(lua_State *L);
int luaopen_ofConsoleLoggerChannel(lua_State *L);
int luaopen_ofFileLoggerChannel(lua_State *L);
int luaopen_ofLuaApp(lua_State *L);
int luaopen_ofMaterial(lua_State *L);
int luaopen_ofMatrix3x3(lua_State *L);
int luaopen_ofMatrix4x4(lua_State *L);
int luaopen_ofMesh(lua_State *L);
int luaopen_ofNode(lua_State *L);
int luaopen_ofPath(lua_State *L);
int luaopen_ofPixels(lua_State *L);
int luaopen_ofSubPath(lua_State *L);
int luaopen_ofPolyline(lua_State *L);
int luaopen_ofQuaternion(lua_State *L);
int luaopen_ofRectangle(lua_State *L);
int luaopen_ofShader(lua_State *L);
int luaopen_ofSoundPlayer(lua_State *L);
int luaopen_ofSoundStream(lua_State *L);
int luaopen_ofTessellator(lua_State *L);
int luaopen_ofTextureData(lua_State *L);
int luaopen_ofTexture(lua_State *L);
int luaopen_ofThread(lua_State *L);
int luaopen_ofTrueTypeFont(lua_State *L);
int luaopen_ofStyle(lua_State *L);
int luaopen_ofHttpRequest(lua_State *L);
int luaopen_ofHttpResponse(lua_State *L);
int luaopen_ofURLFileLoader(lua_State *L);
int luaopen_ofVbo(lua_State *L);
int luaopen_ofVboMesh(lua_State *L);
int luaopen_ofVec2f(lua_State *L);
int luaopen_ofVec3f(lua_State *L);
int luaopen_ofVec4f(lua_State *L);
int luaopen_ofVideoGrabber(lua_State *L);
int luaopen_ofVideoPlayer(lua_State *L);
int luaopen_ofImage(lua_State *L);
}

/** void ofDrawAxis(float size)
 * api/openFrameworks/3d/of3dUtils.h:4
 */
static int ofDrawAxis(lua_State *L) {
  try {
    float size = dub_checknumber(L, 1);
    ofDrawAxis(size);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDrawAxis: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDrawAxis: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDrawGrid(float scale=10.0f, float ticks=8.0f, bool labels=false, bool x=true, bool y=true, bool z=true)
 * api/openFrameworks/3d/of3dUtils.h:5
 */
static int ofDrawGrid(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      float scale = dub_checknumber(L, 1);
      float ticks = dub_checknumber(L, 2);
      bool labels = dub_checkboolean(L, 3);
      bool x = dub_checkboolean(L, 4);
      bool y = dub_checkboolean(L, 5);
      bool z = dub_checkboolean(L, 6);
      ofDrawGrid(scale, ticks, labels, x, y, z);
      return 0;
    } else if (top__ >= 5) {
      float scale = dub_checknumber(L, 1);
      float ticks = dub_checknumber(L, 2);
      bool labels = dub_checkboolean(L, 3);
      bool x = dub_checkboolean(L, 4);
      bool y = dub_checkboolean(L, 5);
      ofDrawGrid(scale, ticks, labels, x, y);
      return 0;
    } else if (top__ >= 4) {
      float scale = dub_checknumber(L, 1);
      float ticks = dub_checknumber(L, 2);
      bool labels = dub_checkboolean(L, 3);
      bool x = dub_checkboolean(L, 4);
      ofDrawGrid(scale, ticks, labels, x);
      return 0;
    } else if (top__ >= 3) {
      float scale = dub_checknumber(L, 1);
      float ticks = dub_checknumber(L, 2);
      bool labels = dub_checkboolean(L, 3);
      ofDrawGrid(scale, ticks, labels);
      return 0;
    } else if (top__ >= 2) {
      float scale = dub_checknumber(L, 1);
      float ticks = dub_checknumber(L, 2);
      ofDrawGrid(scale, ticks);
      return 0;
    } else if (top__ >= 1) {
      float scale = dub_checknumber(L, 1);
      ofDrawGrid(scale);
      return 0;
    } else {
      ofDrawGrid();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDrawGrid: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDrawGrid: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDrawGridPlane(float scale, float ticks=8.0f, bool labels=false)
 * api/openFrameworks/3d/of3dUtils.h:6
 */
static int ofDrawGridPlane(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float scale = dub_checknumber(L, 1);
      float ticks = dub_checknumber(L, 2);
      bool labels = dub_checkboolean(L, 3);
      ofDrawGridPlane(scale, ticks, labels);
      return 0;
    } else if (top__ >= 2) {
      float scale = dub_checknumber(L, 1);
      float ticks = dub_checknumber(L, 2);
      ofDrawGridPlane(scale, ticks);
      return 0;
    } else {
      float scale = dub_checknumber(L, 1);
      ofDrawGridPlane(scale);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDrawGridPlane: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDrawGridPlane: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDrawArrow(const ofVec3f &start, const ofVec3f &end, float headSize=0.05f)
 * api/openFrameworks/3d/of3dUtils.h:7
 */
static int ofDrawArrow(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofVec3f *start = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      ofVec3f *end = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      float headSize = dub_checknumber(L, 3);
      ofDrawArrow(*start, *end, headSize);
      return 0;
    } else {
      ofVec3f *start = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      ofVec3f *end = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofDrawArrow(*start, *end);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDrawArrow: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDrawArrow: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDrawRotationAxes(float radius, float stripWidth=10, int circleRes=60)
 * api/openFrameworks/3d/of3dUtils.h:8
 */
static int ofDrawRotationAxes(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float radius = dub_checknumber(L, 1);
      float stripWidth = dub_checknumber(L, 2);
      int circleRes = dub_checkint(L, 3);
      ofDrawRotationAxes(radius, stripWidth, circleRes);
      return 0;
    } else if (top__ >= 2) {
      float radius = dub_checknumber(L, 1);
      float stripWidth = dub_checknumber(L, 2);
      ofDrawRotationAxes(radius, stripWidth);
      return 0;
    } else {
      float radius = dub_checknumber(L, 1);
      ofDrawRotationAxes(radius);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDrawRotationAxes: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDrawRotationAxes: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetupOpenGL(ofPtr< ofAppBaseWindow > windowPtr, int w, int h, int screenMode)
 * api/openFrameworks/app/ofAppRunner.h:11
 */
static int ofSetupOpenGL(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      ofPtr < ofAppBaseWindow > *windowPtr = *((ofPtr < ofAppBaseWindow > **)dub_checksdata(L, 1, "ofPtr < ofAppBaseWindow >"));
      int w = dub_checkint(L, 2);
      int h = dub_checkint(L, 3);
      int screenMode = dub_checkint(L, 4);
      ofSetupOpenGL(*windowPtr, w, h, screenMode);
      return 0;
    } else {
      int w = dub_checkint(L, 1);
      int h = dub_checkint(L, 2);
      int screenMode = dub_checkint(L, 3);
#ifdef TARGET_OPENGLES
        ofSetCurrentRenderer(ofPtr<ofBaseRenderer>(new ofGLES2Renderer()));
#endif
      ofSetupOpenGL(w, h, screenMode);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetupOpenGL: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetupOpenGL: Unknown exception");
  }
  return lua_error(L);
}

/** void ofRunApp(ofPtr< ofBaseApp > OFSA)
 * api/openFrameworks/app/ofAppRunner.h:14
 */
static int ofRunApp(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      int type__ = lua_type(L, 1);
      void **ptr1__;
      if ( (ptr1__ = dub_issdata(L, 1, "ofBaseApp", type__)) ) {
        ofBaseApp *OFSA = *((ofBaseApp **)ptr1__);
        ofRunApp(OFSA);
        return 0;
      } else {
        ofPtr < ofBaseApp > *OFSA = *((ofPtr < ofBaseApp > **)dub_checksdata(L, 1, "ofPtr < ofBaseApp >"));
        ofRunApp(*OFSA);
        return 0;
      }
    } else {
      ofRunApp();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRunApp: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRunApp: Unknown exception");
  }
  return lua_error(L);
}

/** ofBaseApp* ofGetAppPtr()
 * api/openFrameworks/app/ofAppRunner.h:17
 */
static int ofGetAppPtr(lua_State *L) {
  try {
    ofBaseApp *retval__ = ofGetAppPtr();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "ofBaseApp", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetAppPtr: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetAppPtr: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetAppPtr(ofPtr< ofBaseApp > appPtr)
 * api/openFrameworks/app/ofAppRunner.h:18
 */
static int ofSetAppPtr(lua_State *L) {
  try {
    ofPtr < ofBaseApp > *appPtr = *((ofPtr < ofBaseApp > **)dub_checksdata(L, 1, "ofPtr < ofBaseApp >"));
    ofSetAppPtr(*appPtr);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetAppPtr: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetAppPtr: Unknown exception");
  }
  return lua_error(L);
}

/** void ofExit(int status=0)
 * api/openFrameworks/app/ofAppRunner.h:20
 */
static int ofExit(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      int status = dub_checkint(L, 1);
      ofExit(status);
      return 0;
    } else {
      ofExit();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofExit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofExit: Unknown exception");
  }
  return lua_error(L);
}

/** float ofGetFrameRate()
 * api/openFrameworks/app/ofAppRunner.h:23
 */
static int ofGetFrameRate(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetFrameRate());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetFrameRate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetFrameRate: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetFrameNum()
 * api/openFrameworks/app/ofAppRunner.h:24
 */
static int ofGetFrameNum(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetFrameNum());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetFrameNum: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetFrameNum: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetFrameRate(int targetRate)
 * api/openFrameworks/app/ofAppRunner.h:25
 */
static int ofSetFrameRate(lua_State *L) {
  try {
    int targetRate = dub_checkint(L, 1);
    ofSetFrameRate(targetRate);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetFrameRate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetFrameRate: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSleepMillis(int millis)
 * api/openFrameworks/app/ofAppRunner.h:26
 */
static int ofSleepMillis(lua_State *L) {
  try {
    int millis = dub_checkint(L, 1);
    ofSleepMillis(millis);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSleepMillis: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSleepMillis: Unknown exception");
  }
  return lua_error(L);
}

/** double ofGetLastFrameTime()
 * api/openFrameworks/app/ofAppRunner.h:27
 */
static int ofGetLastFrameTime(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetLastFrameTime());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetLastFrameTime: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetLastFrameTime: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetOrientation(ofOrientation orientation)
 * api/openFrameworks/app/ofAppRunner.h:29
 */
static int ofSetOrientation(lua_State *L) {
  try {
    ofOrientation orientation = (ofOrientation)dub_checkint(L, 1);
    ofSetOrientation(orientation);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetOrientation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetOrientation: Unknown exception");
  }
  return lua_error(L);
}

/** ofOrientation ofGetOrientation()
 * api/openFrameworks/app/ofAppRunner.h:30
 */
static int ofGetOrientation(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetOrientation());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetOrientation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetOrientation: Unknown exception");
  }
  return lua_error(L);
}

/** void ofHideCursor()
 * api/openFrameworks/app/ofAppRunner.h:33
 */
static int ofHideCursor(lua_State *L) {
  try {
    ofHideCursor();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofHideCursor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofHideCursor: Unknown exception");
  }
  return lua_error(L);
}

/** void ofShowCursor()
 * api/openFrameworks/app/ofAppRunner.h:34
 */
static int ofShowCursor(lua_State *L) {
  try {
    ofShowCursor();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofShowCursor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofShowCursor: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetWindowPositionX()
 * api/openFrameworks/app/ofAppRunner.h:36
 */
static int ofGetWindowPositionX(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetWindowPositionX());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetWindowPositionX: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetWindowPositionX: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetWindowPositionY()
 * api/openFrameworks/app/ofAppRunner.h:37
 */
static int ofGetWindowPositionY(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetWindowPositionY());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetWindowPositionY: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetWindowPositionY: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetScreenWidth()
 * api/openFrameworks/app/ofAppRunner.h:38
 */
static int ofGetScreenWidth(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetScreenWidth());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetScreenWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetScreenWidth: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetScreenHeight()
 * api/openFrameworks/app/ofAppRunner.h:39
 */
static int ofGetScreenHeight(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetScreenHeight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetScreenHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetScreenHeight: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetWindowMode()
 * api/openFrameworks/app/ofAppRunner.h:40
 */
static int ofGetWindowMode(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetWindowMode());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetWindowMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetWindowMode: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetWidth()
 * api/openFrameworks/app/ofAppRunner.h:41
 */
static int ofGetWidth(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetWidth());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetWidth: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetHeight()
 * api/openFrameworks/app/ofAppRunner.h:42
 */
static int ofGetHeight(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetHeight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetHeight: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetWindowWidth()
 * api/openFrameworks/app/ofAppRunner.h:43
 */
static int ofGetWindowWidth(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetWindowWidth());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetWindowWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetWindowWidth: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetWindowHeight()
 * api/openFrameworks/app/ofAppRunner.h:44
 */
static int ofGetWindowHeight(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetWindowHeight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetWindowHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetWindowHeight: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofDoesHWOrientation()
 * api/openFrameworks/app/ofAppRunner.h:45
 */
static int ofDoesHWOrientation(lua_State *L) {
  try {
    lua_pushboolean(L, ofDoesHWOrientation());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDoesHWOrientation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDoesHWOrientation: Unknown exception");
  }
  return lua_error(L);
}

/** ofPoint ofGetWindowSize()
 * api/openFrameworks/app/ofAppRunner.h:46
 */
static int ofGetWindowSize(lua_State *L) {
  try {
    dub_pushudata(L, new ofVec3f(ofGetWindowSize()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetWindowSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetWindowSize: Unknown exception");
  }
  return lua_error(L);
}

/** ofRectangle ofGetWindowRect()
 * api/openFrameworks/app/ofAppRunner.h:47
 */
static int ofGetWindowRect(lua_State *L) {
  try {
    dub_pushudata(L, new ofRectangle(ofGetWindowRect()), "ofRectangle", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetWindowRect: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetWindowRect: Unknown exception");
  }
  return lua_error(L);
}

/** ofAppBaseWindow* ofGetWindowPtr()
 * api/openFrameworks/app/ofAppRunner.h:48
 */
static int ofGetWindowPtr(lua_State *L) {
  try {
    ofAppBaseWindow *retval__ = ofGetWindowPtr();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "ofAppBaseWindow", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetWindowPtr: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetWindowPtr: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetWindowPosition(int x, int y)
 * api/openFrameworks/app/ofAppRunner.h:50
 */
static int ofSetWindowPosition(lua_State *L) {
  try {
    int x = dub_checkint(L, 1);
    int y = dub_checkint(L, 2);
    ofSetWindowPosition(x, y);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetWindowPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetWindowPosition: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetWindowShape(int width, int height)
 * api/openFrameworks/app/ofAppRunner.h:51
 */
static int ofSetWindowShape(lua_State *L) {
  try {
    int width = dub_checkint(L, 1);
    int height = dub_checkint(L, 2);
    ofSetWindowShape(width, height);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetWindowShape: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetWindowShape: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetWindowTitle(string title)
 * api/openFrameworks/app/ofAppRunner.h:52
 */
static int ofSetWindowTitle(lua_State *L) {
  try {
    size_t title_sz_;
    const char *title = dub_checklstring(L, 1, &title_sz_);
    ofSetWindowTitle(std::string(title, title_sz_));
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetWindowTitle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetWindowTitle: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEnableSetupScreen()
 * api/openFrameworks/app/ofAppRunner.h:53
 */
static int ofEnableSetupScreen(lua_State *L) {
  try {
    ofEnableSetupScreen();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEnableSetupScreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEnableSetupScreen: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDisableSetupScreen()
 * api/openFrameworks/app/ofAppRunner.h:54
 */
static int ofDisableSetupScreen(lua_State *L) {
  try {
    ofDisableSetupScreen();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDisableSetupScreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDisableSetupScreen: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetFullscreen(bool fullscreen)
 * api/openFrameworks/app/ofAppRunner.h:55
 */
static int ofSetFullscreen(lua_State *L) {
  try {
    bool fullscreen = dub_checkboolean(L, 1);
    ofSetFullscreen(fullscreen);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetFullscreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetFullscreen: Unknown exception");
  }
  return lua_error(L);
}

/** void ofToggleFullscreen()
 * api/openFrameworks/app/ofAppRunner.h:56
 */
static int ofToggleFullscreen(lua_State *L) {
  try {
    ofToggleFullscreen();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofToggleFullscreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofToggleFullscreen: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetVerticalSync(bool bSync)
 * api/openFrameworks/app/ofAppRunner.h:58
 */
static int ofSetVerticalSync(lua_State *L) {
  try {
    bool bSync = dub_checkboolean(L, 1);
    ofSetVerticalSync(bSync);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetVerticalSync: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetVerticalSync: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDrawBitmapCharacterStart(int stringLength)
 * api/openFrameworks/graphics/ofBitmapFont.h:15
 */
static int ofDrawBitmapCharacterStart(lua_State *L) {
  try {
    int stringLength = dub_checkint(L, 1);
    ofDrawBitmapCharacterStart(stringLength);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDrawBitmapCharacterStart: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDrawBitmapCharacterStart: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDrawBitmapCharacter(int character, int x, int y)
 * api/openFrameworks/graphics/ofBitmapFont.h:16
 */
static int ofDrawBitmapCharacter(lua_State *L) {
  try {
    int character = dub_checkint(L, 1);
    int x = dub_checkint(L, 2);
    int y = dub_checkint(L, 3);
    ofDrawBitmapCharacter(character, x, y);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDrawBitmapCharacter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDrawBitmapCharacter: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDrawBitmapCharacterEnd()
 * api/openFrameworks/graphics/ofBitmapFont.h:17
 */
static int ofDrawBitmapCharacterEnd(lua_State *L) {
  try {
    ofDrawBitmapCharacterEnd();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDrawBitmapCharacterEnd: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDrawBitmapCharacterEnd: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNotifyEvent(ofEvent< void > &event)
 * api/openFrameworks/events/ofEventUtils.h:137
 */
static int ofNotifyEvent(lua_State *L) {
  try {
    ofEvent < void > *event = *((ofEvent < void > **)dub_checksdata(L, 1, "ofEvent < void >"));
    ofNotifyEvent(*event);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNotifyEvent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNotifyEvent: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofGetMousePressed(int button=-1)
 * api/openFrameworks/events/ofEvents.h:8
 */
static int ofGetMousePressed(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      int button = dub_checkint(L, 1);
      lua_pushboolean(L, ofGetMousePressed(button));
      return 1;
    } else {
      lua_pushboolean(L, ofGetMousePressed());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetMousePressed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetMousePressed: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofGetKeyPressed(int key=-1)
 * api/openFrameworks/events/ofEvents.h:9
 */
static int ofGetKeyPressed(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      int key = dub_checkint(L, 1);
      lua_pushboolean(L, ofGetKeyPressed(key));
      return 1;
    } else {
      lua_pushboolean(L, ofGetKeyPressed());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetKeyPressed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetKeyPressed: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetMouseX()
 * api/openFrameworks/events/ofEvents.h:11
 */
static int ofGetMouseX(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetMouseX());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetMouseX: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetMouseX: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetMouseY()
 * api/openFrameworks/events/ofEvents.h:12
 */
static int ofGetMouseY(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetMouseY());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetMouseY: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetMouseY: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetPreviousMouseX()
 * api/openFrameworks/events/ofEvents.h:14
 */
static int ofGetPreviousMouseX(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetPreviousMouseX());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetPreviousMouseX: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetPreviousMouseX: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetPreviousMouseY()
 * api/openFrameworks/events/ofEvents.h:15
 */
static int ofGetPreviousMouseY(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetPreviousMouseY());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetPreviousMouseY: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetPreviousMouseY: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetEscapeQuitsApp(bool bQuitOnEsc)
 * api/openFrameworks/events/ofEvents.h:17
 */
static int ofSetEscapeQuitsApp(lua_State *L) {
  try {
    bool bQuitOnEsc = dub_checkboolean(L, 1);
    ofSetEscapeQuitsApp(bQuitOnEsc);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetEscapeQuitsApp: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetEscapeQuitsApp: Unknown exception");
  }
  return lua_error(L);
}

/** void exitApp()
 * api/openFrameworks/events/ofEvents.h:19
 */
static int exitApp(lua_State *L) {
  try {
    exitApp();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "exitApp: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "exitApp: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSendMessage(ofMessage msg)
 * api/openFrameworks/events/ofEvents.h:177
 */
static int ofSendMessage(lua_State *L) {
  try {
    int type__ = lua_type(L, 1);
    void **ptr1__;
    if ( (ptr1__ = dub_issdata(L, 1, "string", type__)) ) {
      size_t messageString_sz_;
      const char *messageString = dub_checklstring(L, 1, &messageString_sz_);
      ofSendMessage(std::string(messageString, messageString_sz_));
      return 0;
    } else {
      ofMessage *msg = *((ofMessage **)dub_checksdata(L, 1, "ofMessage"));
      ofSendMessage(*msg);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSendMessage: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSendMessage: Unknown exception");
  }
  return lua_error(L);
}

/** ofCoreEvents& ofEvents()
 * api/openFrameworks/events/ofEvents.h:180
 */
static int ofEvents(lua_State *L) {
  try {
    dub_pushudata(L, &ofEvents(), "ofCoreEvents", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEvents: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEvents: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNotifySetup()
 * api/openFrameworks/events/ofEvents.h:250
 */
static int ofNotifySetup(lua_State *L) {
  try {
    ofNotifySetup();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNotifySetup: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNotifySetup: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNotifyUpdate()
 * api/openFrameworks/events/ofEvents.h:251
 */
static int ofNotifyUpdate(lua_State *L) {
  try {
    ofNotifyUpdate();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNotifyUpdate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNotifyUpdate: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNotifyDraw()
 * api/openFrameworks/events/ofEvents.h:252
 */
static int ofNotifyDraw(lua_State *L) {
  try {
    ofNotifyDraw();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNotifyDraw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNotifyDraw: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNotifyKeyPressed(int key)
 * api/openFrameworks/events/ofEvents.h:254
 */
static int ofNotifyKeyPressed(lua_State *L) {
  try {
    int key = dub_checkint(L, 1);
    ofNotifyKeyPressed(key);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNotifyKeyPressed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNotifyKeyPressed: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNotifyKeyReleased(int key)
 * api/openFrameworks/events/ofEvents.h:255
 */
static int ofNotifyKeyReleased(lua_State *L) {
  try {
    int key = dub_checkint(L, 1);
    ofNotifyKeyReleased(key);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNotifyKeyReleased: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNotifyKeyReleased: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNotifyKeyEvent(const ofKeyEventArgs &keyEvent)
 * api/openFrameworks/events/ofEvents.h:256
 */
static int ofNotifyKeyEvent(lua_State *L) {
  try {
    ofKeyEventArgs *keyEvent = *((ofKeyEventArgs **)dub_checksdata(L, 1, "ofKeyEventArgs"));
    ofNotifyKeyEvent(*keyEvent);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNotifyKeyEvent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNotifyKeyEvent: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNotifyMousePressed(int x, int y, int button)
 * api/openFrameworks/events/ofEvents.h:258
 */
static int ofNotifyMousePressed(lua_State *L) {
  try {
    int x = dub_checkint(L, 1);
    int y = dub_checkint(L, 2);
    int button = dub_checkint(L, 3);
    ofNotifyMousePressed(x, y, button);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNotifyMousePressed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNotifyMousePressed: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNotifyMouseReleased(int x, int y, int button)
 * api/openFrameworks/events/ofEvents.h:259
 */
static int ofNotifyMouseReleased(lua_State *L) {
  try {
    int x = dub_checkint(L, 1);
    int y = dub_checkint(L, 2);
    int button = dub_checkint(L, 3);
    ofNotifyMouseReleased(x, y, button);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNotifyMouseReleased: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNotifyMouseReleased: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNotifyMouseDragged(int x, int y, int button)
 * api/openFrameworks/events/ofEvents.h:260
 */
static int ofNotifyMouseDragged(lua_State *L) {
  try {
    int x = dub_checkint(L, 1);
    int y = dub_checkint(L, 2);
    int button = dub_checkint(L, 3);
    ofNotifyMouseDragged(x, y, button);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNotifyMouseDragged: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNotifyMouseDragged: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNotifyMouseMoved(int x, int y)
 * api/openFrameworks/events/ofEvents.h:261
 */
static int ofNotifyMouseMoved(lua_State *L) {
  try {
    int x = dub_checkint(L, 1);
    int y = dub_checkint(L, 2);
    ofNotifyMouseMoved(x, y);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNotifyMouseMoved: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNotifyMouseMoved: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNotifyMouseEvent(const ofMouseEventArgs &mouseEvent)
 * api/openFrameworks/events/ofEvents.h:262
 */
static int ofNotifyMouseEvent(lua_State *L) {
  try {
    ofMouseEventArgs *mouseEvent = *((ofMouseEventArgs **)dub_checksdata(L, 1, "ofMouseEventArgs"));
    ofNotifyMouseEvent(*mouseEvent);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNotifyMouseEvent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNotifyMouseEvent: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNotifyExit()
 * api/openFrameworks/events/ofEvents.h:264
 */
static int ofNotifyExit(lua_State *L) {
  try {
    ofNotifyExit();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNotifyExit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNotifyExit: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNotifyWindowResized(int width, int height)
 * api/openFrameworks/events/ofEvents.h:265
 */
static int ofNotifyWindowResized(lua_State *L) {
  try {
    int width = dub_checkint(L, 1);
    int height = dub_checkint(L, 2);
    ofNotifyWindowResized(width, height);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNotifyWindowResized: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNotifyWindowResized: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNotifyWindowEntry(int state)
 * api/openFrameworks/events/ofEvents.h:266
 */
static int ofNotifyWindowEntry(lua_State *L) {
  try {
    int state = dub_checkint(L, 1);
    ofNotifyWindowEntry(state);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNotifyWindowEntry: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNotifyWindowEntry: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNotifyDragEvent(ofDragInfo info)
 * api/openFrameworks/events/ofEvents.h:268
 */
static int ofNotifyDragEvent(lua_State *L) {
  try {
    ofDragInfo *info = *((ofDragInfo **)dub_checksdata(L, 1, "ofDragInfo"));
    ofNotifyDragEvent(*info);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNotifyDragEvent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNotifyDragEvent: Unknown exception");
  }
  return lua_error(L);
}

/** ofBuffer ofBufferFromFile(const string &path, bool binary=false)
 * api/openFrameworks/utils/ofFileUtils.h:55
 */
static int ofBufferFromFile(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      size_t path_sz_;
      const char *path = dub_checklstring(L, 1, &path_sz_);
      bool binary = dub_checkboolean(L, 2);
      dub_pushudata(L, new ofBuffer(ofBufferFromFile(std::string(path, path_sz_), binary)), "ofBuffer", true);
      return 1;
    } else {
      size_t path_sz_;
      const char *path = dub_checklstring(L, 1, &path_sz_);
      dub_pushudata(L, new ofBuffer(ofBufferFromFile(std::string(path, path_sz_))), "ofBuffer", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBufferFromFile: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBufferFromFile: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofBufferToFile(const string &path, ofBuffer &buffer, bool binary=false)
 * api/openFrameworks/utils/ofFileUtils.h:58
 */
static int ofBufferToFile(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      size_t path_sz_;
      const char *path = dub_checklstring(L, 1, &path_sz_);
      ofBuffer *buffer = *((ofBuffer **)dub_checksdata(L, 2, "ofBuffer"));
      bool binary = dub_checkboolean(L, 3);
      lua_pushboolean(L, ofBufferToFile(std::string(path, path_sz_), *buffer, binary));
      return 1;
    } else {
      size_t path_sz_;
      const char *path = dub_checklstring(L, 1, &path_sz_);
      ofBuffer *buffer = *((ofBuffer **)dub_checksdata(L, 2, "ofBuffer"));
      lua_pushboolean(L, ofBufferToFile(std::string(path, path_sz_), *buffer));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBufferToFile: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBufferToFile: Unknown exception");
  }
  return lua_error(L);
}

/** GLuint ofGetGLPolyMode(ofPolyRenderMode m)
 * api/openFrameworks/gl/ofGLUtils.h:44
 */
static int ofGetGLPolyMode(lua_State *L) {
  try {
    ofPolyRenderMode m = (ofPolyRenderMode)dub_checkint(L, 1);
    lua_pushnumber(L, ofGetGLPolyMode(m));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetGLPolyMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetGLPolyMode: Unknown exception");
  }
  return lua_error(L);
}

/** ofPolyRenderMode ofGetOFPolyMode(GLuint m)
 * api/openFrameworks/gl/ofGLUtils.h:46
 */
static int ofGetOFPolyMode(lua_State *L) {
  try {
    GLuint m = dub_checkint(L, 1);
    lua_pushnumber(L, ofGetOFPolyMode(m));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetOFPolyMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetOFPolyMode: Unknown exception");
  }
  return lua_error(L);
}

/** GLuint ofGetGLPrimitiveMode(ofPrimitiveMode mode)
 * api/openFrameworks/gl/ofGLUtils.h:49
 */
static int ofGetGLPrimitiveMode(lua_State *L) {
  try {
    ofPrimitiveMode mode = (ofPrimitiveMode)dub_checkint(L, 1);
    lua_pushnumber(L, ofGetGLPrimitiveMode(mode));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetGLPrimitiveMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetGLPrimitiveMode: Unknown exception");
  }
  return lua_error(L);
}

/** ofPrimitiveMode ofGetOFPrimitiveMode(GLuint mode)
 * api/openFrameworks/gl/ofGLUtils.h:51
 */
static int ofGetOFPrimitiveMode(lua_State *L) {
  try {
    GLuint mode = dub_checkint(L, 1);
    lua_pushnumber(L, ofGetOFPrimitiveMode(mode));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetOFPrimitiveMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetOFPrimitiveMode: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetGLInternalFormatFromPixelFormat(ofPixelFormat pixelFormat)
 * api/openFrameworks/gl/ofGLUtils.h:53
 */
static int ofGetGLInternalFormatFromPixelFormat(lua_State *L) {
  try {
    ofPixelFormat pixelFormat = (ofPixelFormat)dub_checkint(L, 1);
    lua_pushnumber(L, ofGetGLInternalFormatFromPixelFormat(pixelFormat));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetGLInternalFormatFromPixelFormat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetGLInternalFormatFromPixelFormat: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetGLTypeFromPixelFormat(ofPixelFormat pixelFormat)
 * api/openFrameworks/gl/ofGLUtils.h:54
 */
static int ofGetGLTypeFromPixelFormat(lua_State *L) {
  try {
    ofPixelFormat pixelFormat = (ofPixelFormat)dub_checkint(L, 1);
    lua_pushnumber(L, ofGetGLTypeFromPixelFormat(pixelFormat));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetGLTypeFromPixelFormat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetGLTypeFromPixelFormat: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofCheckGLExtension(string searchName)
 * api/openFrameworks/gl/ofGLUtils.h:57
 */
static int ofCheckGLExtension(lua_State *L) {
  try {
    size_t searchName_sz_;
    const char *searchName = dub_checklstring(L, 1, &searchName_sz_);
    lua_pushboolean(L, ofCheckGLExtension(std::string(searchName, searchName_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofCheckGLExtension: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofCheckGLExtension: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofGLIsFixedPipeline()
 * api/openFrameworks/gl/ofGLUtils.h:59
 */
static int ofGLIsFixedPipeline(lua_State *L) {
  try {
    lua_pushboolean(L, ofGLIsFixedPipeline());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGLIsFixedPipeline: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGLIsFixedPipeline: Unknown exception");
  }
  return lua_error(L);
}

/** ofPtr<ofGLES2Renderer> ofGetGLES2Renderer()
 * api/openFrameworks/gl/ofGLUtils.h:61
 */
static int ofGetGLES2Renderer(lua_State *L) {
  try {
    dub_pushudata(L, new ofPtr < ofGLES2Renderer >(ofGetGLES2Renderer()), "ofPtr < ofGLES2Renderer >", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetGLES2Renderer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetGLES2Renderer: Unknown exception");
  }
  return lua_error(L);
}

/** ofPtr<ofBaseGLRenderer> ofGetGLRenderer()
 * api/openFrameworks/gl/ofGLUtils.h:62
 */
static int ofGetGLRenderer(lua_State *L) {
  try {
    dub_pushudata(L, new ofPtr < ofBaseGLRenderer >(ofGetGLRenderer()), "ofPtr < ofBaseGLRenderer >", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetGLRenderer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetGLRenderer: Unknown exception");
  }
  return lua_error(L);
}

/** GLint ofGetAttrLocationPosition()
 * api/openFrameworks/gl/ofGLUtils.h:64
 */
static int ofGetAttrLocationPosition(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetAttrLocationPosition());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetAttrLocationPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetAttrLocationPosition: Unknown exception");
  }
  return lua_error(L);
}

/** GLint ofGetAttrLocationColor()
 * api/openFrameworks/gl/ofGLUtils.h:65
 */
static int ofGetAttrLocationColor(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetAttrLocationColor());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetAttrLocationColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetAttrLocationColor: Unknown exception");
  }
  return lua_error(L);
}

/** GLint ofGetAttrLocationNormal()
 * api/openFrameworks/gl/ofGLUtils.h:66
 */
static int ofGetAttrLocationNormal(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetAttrLocationNormal());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetAttrLocationNormal: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetAttrLocationNormal: Unknown exception");
  }
  return lua_error(L);
}

/** GLint ofGetAttrLocationTexCoord()
 * api/openFrameworks/gl/ofGLUtils.h:67
 */
static int ofGetAttrLocationTexCoord(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetAttrLocationTexCoord());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetAttrLocationTexCoord: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetAttrLocationTexCoord: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEnableVertices()
 * api/openFrameworks/gl/ofGLUtils.h:69
 */
static int ofEnableVertices(lua_State *L) {
  try {
    ofEnableVertices();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEnableVertices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEnableVertices: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEnableTexCoords()
 * api/openFrameworks/gl/ofGLUtils.h:70
 */
static int ofEnableTexCoords(lua_State *L) {
  try {
    ofEnableTexCoords();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEnableTexCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEnableTexCoords: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEnableColorCoords()
 * api/openFrameworks/gl/ofGLUtils.h:71
 */
static int ofEnableColorCoords(lua_State *L) {
  try {
    ofEnableColorCoords();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEnableColorCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEnableColorCoords: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEnableNormals()
 * api/openFrameworks/gl/ofGLUtils.h:72
 */
static int ofEnableNormals(lua_State *L) {
  try {
    ofEnableNormals();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEnableNormals: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEnableNormals: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDisableVertices()
 * api/openFrameworks/gl/ofGLUtils.h:73
 */
static int ofDisableVertices(lua_State *L) {
  try {
    ofDisableVertices();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDisableVertices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDisableVertices: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDisableTexCoords()
 * api/openFrameworks/gl/ofGLUtils.h:74
 */
static int ofDisableTexCoords(lua_State *L) {
  try {
    ofDisableTexCoords();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDisableTexCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDisableTexCoords: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDisableColorCoords()
 * api/openFrameworks/gl/ofGLUtils.h:75
 */
static int ofDisableColorCoords(lua_State *L) {
  try {
    ofDisableColorCoords();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDisableColorCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDisableColorCoords: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDisableNormals()
 * api/openFrameworks/gl/ofGLUtils.h:76
 */
static int ofDisableNormals(lua_State *L) {
  try {
    ofDisableNormals();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDisableNormals: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDisableNormals: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetCurrentRenderer(ofPtr< ofBaseRenderer > renderer)
 * api/openFrameworks/graphics/ofGraphics.h:15
 */
static int ofSetCurrentRenderer(lua_State *L) {
  try {
    ofPtr < ofBaseRenderer > *renderer = *((ofPtr < ofBaseRenderer > **)dub_checksdata(L, 1, "ofPtr < ofBaseRenderer >"));
    ofSetCurrentRenderer(*renderer);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetCurrentRenderer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetCurrentRenderer: Unknown exception");
  }
  return lua_error(L);
}

/** ofPtr<ofBaseRenderer>& ofGetCurrentRenderer()
 * api/openFrameworks/graphics/ofGraphics.h:16
 */
static int ofGetCurrentRenderer(lua_State *L) {
  try {
    dub_pushudata(L, &ofGetCurrentRenderer(), "ofPtr < ofBaseRenderer >", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetCurrentRenderer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetCurrentRenderer: Unknown exception");
  }
  return lua_error(L);
}

/** void ofBeginSaveScreenAsPDF(string filename, bool bMultipage=false, bool b3D=false, ofRectangle viewport=ofRectangle(0, 0, 0, 0))
 * api/openFrameworks/graphics/ofGraphics.h:19
 */
static int ofBeginSaveScreenAsPDF(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      size_t filename_sz_;
      const char *filename = dub_checklstring(L, 1, &filename_sz_);
      bool bMultipage = dub_checkboolean(L, 2);
      bool b3D = dub_checkboolean(L, 3);
      ofRectangle *viewport = *((ofRectangle **)dub_checksdata(L, 4, "ofRectangle"));
      ofBeginSaveScreenAsPDF(std::string(filename, filename_sz_), bMultipage, b3D, *viewport);
      return 0;
    } else if (top__ >= 3) {
      size_t filename_sz_;
      const char *filename = dub_checklstring(L, 1, &filename_sz_);
      bool bMultipage = dub_checkboolean(L, 2);
      bool b3D = dub_checkboolean(L, 3);
      ofBeginSaveScreenAsPDF(std::string(filename, filename_sz_), bMultipage, b3D);
      return 0;
    } else if (top__ >= 2) {
      size_t filename_sz_;
      const char *filename = dub_checklstring(L, 1, &filename_sz_);
      bool bMultipage = dub_checkboolean(L, 2);
      ofBeginSaveScreenAsPDF(std::string(filename, filename_sz_), bMultipage);
      return 0;
    } else {
      size_t filename_sz_;
      const char *filename = dub_checklstring(L, 1, &filename_sz_);
      ofBeginSaveScreenAsPDF(std::string(filename, filename_sz_));
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBeginSaveScreenAsPDF: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBeginSaveScreenAsPDF: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEndSaveScreenAsPDF()
 * api/openFrameworks/graphics/ofGraphics.h:20
 */
static int ofEndSaveScreenAsPDF(lua_State *L) {
  try {
    ofEndSaveScreenAsPDF();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEndSaveScreenAsPDF: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEndSaveScreenAsPDF: Unknown exception");
  }
  return lua_error(L);
}

/** void ofPushView()
 * api/openFrameworks/graphics/ofGraphics.h:25
 */
static int ofPushView(lua_State *L) {
  try {
    ofPushView();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofPushView: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofPushView: Unknown exception");
  }
  return lua_error(L);
}

/** void ofPopView()
 * api/openFrameworks/graphics/ofGraphics.h:26
 */
static int ofPopView(lua_State *L) {
  try {
    ofPopView();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofPopView: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofPopView: Unknown exception");
  }
  return lua_error(L);
}

/** void ofViewport(ofRectangle viewport)
 * api/openFrameworks/graphics/ofGraphics.h:31
 */
static int ofViewport(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float width = dub_checknumber(L, 3);
      float height = dub_checknumber(L, 4);
      bool invertY = dub_checkboolean(L, 5);
      ofViewport(x, y, width, height, invertY);
      return 0;
    } else if (top__ >= 4) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float width = dub_checknumber(L, 3);
      float height = dub_checknumber(L, 4);
      ofViewport(x, y, width, height);
      return 0;
    } else if (top__ >= 3) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float width = dub_checknumber(L, 3);
      ofViewport(x, y, width);
      return 0;
    } else if (top__ >= 2) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      ofViewport(x, y);
      return 0;
    } else if (top__ >= 1) {
      int type__ = lua_type(L, 1);
      if (type__ == LUA_TNUMBER) {
        float x = dub_checknumber(L, 1);
        ofViewport(x);
        return 0;
      } else {
        ofRectangle *viewport = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
        ofViewport(*viewport);
        return 0;
      }
    } else {
      ofViewport();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofViewport: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofViewport: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetupScreenPerspective(float width=0, float height=0, ofOrientation orientation=OF_ORIENTATION_UNKNOWN, bool vFlip=true, float fov=60, float nearDist=0, float farDist=0)
 * api/openFrameworks/graphics/ofGraphics.h:33
 */
static int ofSetupScreenPerspective(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 7) {
      float width = dub_checknumber(L, 1);
      float height = dub_checknumber(L, 2);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 3);
      bool vFlip = dub_checkboolean(L, 4);
      float fov = dub_checknumber(L, 5);
      float nearDist = dub_checknumber(L, 6);
      float farDist = dub_checknumber(L, 7);
      ofSetupScreenPerspective(width, height, orientation, vFlip, fov, nearDist, farDist);
      return 0;
    } else if (top__ >= 6) {
      float width = dub_checknumber(L, 1);
      float height = dub_checknumber(L, 2);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 3);
      bool vFlip = dub_checkboolean(L, 4);
      float fov = dub_checknumber(L, 5);
      float nearDist = dub_checknumber(L, 6);
      ofSetupScreenPerspective(width, height, orientation, vFlip, fov, nearDist);
      return 0;
    } else if (top__ >= 5) {
      float width = dub_checknumber(L, 1);
      float height = dub_checknumber(L, 2);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 3);
      bool vFlip = dub_checkboolean(L, 4);
      float fov = dub_checknumber(L, 5);
      ofSetupScreenPerspective(width, height, orientation, vFlip, fov);
      return 0;
    } else if (top__ >= 4) {
      float width = dub_checknumber(L, 1);
      float height = dub_checknumber(L, 2);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 3);
      bool vFlip = dub_checkboolean(L, 4);
      ofSetupScreenPerspective(width, height, orientation, vFlip);
      return 0;
    } else if (top__ >= 3) {
      float width = dub_checknumber(L, 1);
      float height = dub_checknumber(L, 2);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 3);
      ofSetupScreenPerspective(width, height, orientation);
      return 0;
    } else if (top__ >= 2) {
      float width = dub_checknumber(L, 1);
      float height = dub_checknumber(L, 2);
      ofSetupScreenPerspective(width, height);
      return 0;
    } else if (top__ >= 1) {
      float width = dub_checknumber(L, 1);
      ofSetupScreenPerspective(width);
      return 0;
    } else {
      ofSetupScreenPerspective();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetupScreenPerspective: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetupScreenPerspective: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetupScreenOrtho(float width=0, float height=0, ofOrientation orientation=OF_ORIENTATION_UNKNOWN, bool vFlip=true, float nearDist=-1, float farDist=-1)
 * api/openFrameworks/graphics/ofGraphics.h:34
 */
static int ofSetupScreenOrtho(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      float width = dub_checknumber(L, 1);
      float height = dub_checknumber(L, 2);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 3);
      bool vFlip = dub_checkboolean(L, 4);
      float nearDist = dub_checknumber(L, 5);
      float farDist = dub_checknumber(L, 6);
      ofSetupScreenOrtho(width, height, orientation, vFlip, nearDist, farDist);
      return 0;
    } else if (top__ >= 5) {
      float width = dub_checknumber(L, 1);
      float height = dub_checknumber(L, 2);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 3);
      bool vFlip = dub_checkboolean(L, 4);
      float nearDist = dub_checknumber(L, 5);
      ofSetupScreenOrtho(width, height, orientation, vFlip, nearDist);
      return 0;
    } else if (top__ >= 4) {
      float width = dub_checknumber(L, 1);
      float height = dub_checknumber(L, 2);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 3);
      bool vFlip = dub_checkboolean(L, 4);
      ofSetupScreenOrtho(width, height, orientation, vFlip);
      return 0;
    } else if (top__ >= 3) {
      float width = dub_checknumber(L, 1);
      float height = dub_checknumber(L, 2);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 3);
      ofSetupScreenOrtho(width, height, orientation);
      return 0;
    } else if (top__ >= 2) {
      float width = dub_checknumber(L, 1);
      float height = dub_checknumber(L, 2);
      ofSetupScreenOrtho(width, height);
      return 0;
    } else if (top__ >= 1) {
      float width = dub_checknumber(L, 1);
      ofSetupScreenOrtho(width);
      return 0;
    } else {
      ofSetupScreenOrtho();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetupScreenOrtho: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetupScreenOrtho: Unknown exception");
  }
  return lua_error(L);
}

/** ofRectangle ofGetCurrentViewport()
 * api/openFrameworks/graphics/ofGraphics.h:35
 */
static int ofGetCurrentViewport(lua_State *L) {
  try {
    dub_pushudata(L, new ofRectangle(ofGetCurrentViewport()), "ofRectangle", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetCurrentViewport: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetCurrentViewport: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetViewportWidth()
 * api/openFrameworks/graphics/ofGraphics.h:36
 */
static int ofGetViewportWidth(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetViewportWidth());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetViewportWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetViewportWidth: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetViewportHeight()
 * api/openFrameworks/graphics/ofGraphics.h:37
 */
static int ofGetViewportHeight(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetViewportHeight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetViewportHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetViewportHeight: Unknown exception");
  }
  return lua_error(L);
}

/** int ofOrientationToDegrees(ofOrientation orientation)
 * api/openFrameworks/graphics/ofGraphics.h:38
 */
static int ofOrientationToDegrees(lua_State *L) {
  try {
    ofOrientation orientation = (ofOrientation)dub_checkint(L, 1);
    lua_pushnumber(L, ofOrientationToDegrees(orientation));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofOrientationToDegrees: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofOrientationToDegrees: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetCoordHandedness(ofHandednessType handedness)
 * api/openFrameworks/graphics/ofGraphics.h:40
 */
static int ofSetCoordHandedness(lua_State *L) {
  try {
    ofHandednessType handedness = (ofHandednessType)dub_checkint(L, 1);
    ofSetCoordHandedness(handedness);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetCoordHandedness: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetCoordHandedness: Unknown exception");
  }
  return lua_error(L);
}

/** ofHandednessType ofGetCoordHandedness()
 * api/openFrameworks/graphics/ofGraphics.h:41
 */
static int ofGetCoordHandedness(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetCoordHandedness());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetCoordHandedness: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetCoordHandedness: Unknown exception");
  }
  return lua_error(L);
}

/** void ofPushMatrix()
 * api/openFrameworks/graphics/ofGraphics.h:44
 */
static int ofPushMatrix(lua_State *L) {
  try {
    ofPushMatrix();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofPushMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofPushMatrix: Unknown exception");
  }
  return lua_error(L);
}

/** void ofPopMatrix()
 * api/openFrameworks/graphics/ofGraphics.h:45
 */
static int ofPopMatrix(lua_State *L) {
  try {
    ofPopMatrix();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofPopMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofPopMatrix: Unknown exception");
  }
  return lua_error(L);
}

/** void ofTranslate(float x, float y, float z=0)
 * api/openFrameworks/graphics/ofGraphics.h:46
 */
static int ofTranslate(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float z = dub_checknumber(L, 3);
      ofTranslate(x, y, z);
      return 0;
    } else if (top__ >= 2) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      ofTranslate(x, y);
      return 0;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      ofTranslate(*p);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofTranslate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofTranslate: Unknown exception");
  }
  return lua_error(L);
}

/** void ofScale(float xAmnt, float yAmnt, float zAmnt=1)
 * api/openFrameworks/graphics/ofGraphics.h:48
 */
static int ofScale(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float xAmnt = dub_checknumber(L, 1);
      float yAmnt = dub_checknumber(L, 2);
      float zAmnt = dub_checknumber(L, 3);
      ofScale(xAmnt, yAmnt, zAmnt);
      return 0;
    } else {
      float xAmnt = dub_checknumber(L, 1);
      float yAmnt = dub_checknumber(L, 2);
      ofScale(xAmnt, yAmnt);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofScale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofScale: Unknown exception");
  }
  return lua_error(L);
}

/** void ofRotate(float degrees, float vecX, float vecY, float vecZ)
 * api/openFrameworks/graphics/ofGraphics.h:49
 */
static int ofRotate(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float degrees = dub_checknumber(L, 1);
      float vecX = dub_checknumber(L, 2);
      float vecY = dub_checknumber(L, 3);
      float vecZ = dub_checknumber(L, 4);
      ofRotate(degrees, vecX, vecY, vecZ);
      return 0;
    } else {
      float degrees = dub_checknumber(L, 1);
      ofRotate(degrees);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRotate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRotate: Unknown exception");
  }
  return lua_error(L);
}

/** void ofRotateX(float degrees)
 * api/openFrameworks/graphics/ofGraphics.h:50
 */
static int ofRotateX(lua_State *L) {
  try {
    float degrees = dub_checknumber(L, 1);
    ofRotateX(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRotateX: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRotateX: Unknown exception");
  }
  return lua_error(L);
}

/** void ofRotateY(float degrees)
 * api/openFrameworks/graphics/ofGraphics.h:51
 */
static int ofRotateY(lua_State *L) {
  try {
    float degrees = dub_checknumber(L, 1);
    ofRotateY(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRotateY: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRotateY: Unknown exception");
  }
  return lua_error(L);
}

/** void ofRotateZ(float degrees)
 * api/openFrameworks/graphics/ofGraphics.h:52
 */
static int ofRotateZ(lua_State *L) {
  try {
    float degrees = dub_checknumber(L, 1);
    ofRotateZ(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRotateZ: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRotateZ: Unknown exception");
  }
  return lua_error(L);
}

/** void ofLoadIdentityMatrix(void)
 * api/openFrameworks/graphics/ofGraphics.h:54
 */
static int ofLoadIdentityMatrix(lua_State *L) {
  try {
    ofLoadIdentityMatrix();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofLoadIdentityMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofLoadIdentityMatrix: Unknown exception");
  }
  return lua_error(L);
}

/** void ofLoadMatrix(const ofMatrix4x4 &m)
 * api/openFrameworks/graphics/ofGraphics.h:55
 */
static int ofLoadMatrix(lua_State *L) {
  try {
    int type__ = lua_type(L, 1);
    void **ptr1__;
    if ( (ptr1__ = dub_issdata(L, 1, "float *", type__)) ) {
      float * m = (float *) lua_touserdata (L, 1);
      
      ofLoadMatrix((float *) m);
      return 0;
    } else {
      ofMatrix4x4 *m = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
      ofLoadMatrix(*m);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofLoadMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofLoadMatrix: Unknown exception");
  }
  return lua_error(L);
}

/** void ofMultMatrix(const ofMatrix4x4 &m)
 * api/openFrameworks/graphics/ofGraphics.h:57
 */
static int ofMultMatrix(lua_State *L) {
  try {
    int type__ = lua_type(L, 1);
    void **ptr1__;
    if ( (ptr1__ = dub_issdata(L, 1, "float *", type__)) ) {
      float * m = (float *) lua_touserdata (L, 1);
      
      ofMultMatrix((float *) m);
      return 0;
    } else {
      ofMatrix4x4 *m = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
      ofMultMatrix(*m);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofMultMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofMultMatrix: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetMatrixMode(ofMatrixMode matrixMode)
 * api/openFrameworks/graphics/ofGraphics.h:59
 */
static int ofSetMatrixMode(lua_State *L) {
  try {
    ofMatrixMode matrixMode = (ofMatrixMode)dub_checkint(L, 1);
    ofSetMatrixMode(matrixMode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetMatrixMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetMatrixMode: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetupGraphicDefaults()
 * api/openFrameworks/graphics/ofGraphics.h:62
 */
static int ofSetupGraphicDefaults(lua_State *L) {
  try {
    ofSetupGraphicDefaults();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetupGraphicDefaults: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetupGraphicDefaults: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetupScreen()
 * api/openFrameworks/graphics/ofGraphics.h:63
 */
static int ofSetupScreen(lua_State *L) {
  try {
    ofSetupScreen();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetupScreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetupScreen: Unknown exception");
  }
  return lua_error(L);
}

/** ofRectMode ofGetRectMode()
 * api/openFrameworks/graphics/ofGraphics.h:75
 */
static int ofGetRectMode(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetRectMode());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetRectMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetRectMode: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetCircleResolution(int res)
 * api/openFrameworks/graphics/ofGraphics.h:77
 */
static int ofSetCircleResolution(lua_State *L) {
  try {
    int res = dub_checkint(L, 1);
    ofSetCircleResolution(res);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetCircleResolution: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetCircleResolution: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetCurveResolution(int res)
 * api/openFrameworks/graphics/ofGraphics.h:78
 */
static int ofSetCurveResolution(lua_State *L) {
  try {
    int res = dub_checkint(L, 1);
    ofSetCurveResolution(res);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetCurveResolution: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetCurveResolution: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetSphereResolution(int res)
 * api/openFrameworks/graphics/ofGraphics.h:79
 */
static int ofSetSphereResolution(lua_State *L) {
  try {
    int res = dub_checkint(L, 1);
    ofSetSphereResolution(res);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetSphereResolution: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetSphereResolution: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNoFill()
 * api/openFrameworks/graphics/ofGraphics.h:83
 */
static int ofNoFill(lua_State *L) {
  try {
    ofNoFill();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNoFill: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNoFill: Unknown exception");
  }
  return lua_error(L);
}

/** void ofFill()
 * api/openFrameworks/graphics/ofGraphics.h:84
 */
static int ofFill(lua_State *L) {
  try {
    ofFill();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofFill: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofFill: Unknown exception");
  }
  return lua_error(L);
}

/** ofFillFlag ofGetFill()
 * api/openFrameworks/graphics/ofGraphics.h:85
 */
static int ofGetFill(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetFill());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetFill: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetFill: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetLineWidth(float lineWidth)
 * api/openFrameworks/graphics/ofGraphics.h:87
 */
static int ofSetLineWidth(lua_State *L) {
  try {
    float lineWidth = dub_checknumber(L, 1);
    ofSetLineWidth(lineWidth);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetLineWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetLineWidth: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetColor(int r, int g, int b)
 * api/openFrameworks/graphics/ofGraphics.h:90
 */
static int ofSetColor(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      int r = dub_checkint(L, 1);
      int g = dub_checkint(L, 2);
      int b = dub_checkint(L, 3);
      int a = dub_checkint(L, 4);
      ofSetColor(r, g, b, a);
      return 0;
    } else if (top__ >= 3) {
      int r = dub_checkint(L, 1);
      int g = dub_checkint(L, 2);
      int b = dub_checkint(L, 3);
      ofSetColor(r, g, b);
      return 0;
    } else if (top__ >= 2) {
      ofColor *color = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
      int _a = dub_checkint(L, 2);
      ofSetColor(*color, _a);
      return 0;
    } else {
      int type__ = lua_type(L, 1);
      if (type__ == LUA_TNUMBER) {
        int gray = dub_checkint(L, 1);
        ofSetColor(gray);
        return 0;
      } else {
        ofColor *color = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
        ofSetColor(*color);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetColor: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetHexColor(int hexColor)
 * api/openFrameworks/graphics/ofGraphics.h:95
 */
static int ofSetHexColor(lua_State *L) {
  try {
    int hexColor = dub_checkint(L, 1);
    ofSetHexColor(hexColor);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetHexColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetHexColor: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEnableBlendMode(ofBlendMode blendMode)
 * api/openFrameworks/graphics/ofGraphics.h:98
 */
static int ofEnableBlendMode(lua_State *L) {
  try {
    ofBlendMode blendMode = (ofBlendMode)dub_checkint(L, 1);
    ofEnableBlendMode(blendMode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEnableBlendMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEnableBlendMode: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDisableBlendMode()
 * api/openFrameworks/graphics/ofGraphics.h:99
 */
static int ofDisableBlendMode(lua_State *L) {
  try {
    ofDisableBlendMode();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDisableBlendMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDisableBlendMode: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEnablePointSprites()
 * api/openFrameworks/graphics/ofGraphics.h:102
 */
static int ofEnablePointSprites(lua_State *L) {
  try {
    ofEnablePointSprites();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEnablePointSprites: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEnablePointSprites: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDisablePointSprites()
 * api/openFrameworks/graphics/ofGraphics.h:103
 */
static int ofDisablePointSprites(lua_State *L) {
  try {
    ofDisablePointSprites();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDisablePointSprites: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDisablePointSprites: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEnableAlphaBlending()
 * api/openFrameworks/graphics/ofGraphics.h:106
 */
static int ofEnableAlphaBlending(lua_State *L) {
  try {
    ofEnableAlphaBlending();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEnableAlphaBlending: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEnableAlphaBlending: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDisableAlphaBlending()
 * api/openFrameworks/graphics/ofGraphics.h:107
 */
static int ofDisableAlphaBlending(lua_State *L) {
  try {
    ofDisableAlphaBlending();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDisableAlphaBlending: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDisableAlphaBlending: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEnableSmoothing()
 * api/openFrameworks/graphics/ofGraphics.h:110
 */
static int ofEnableSmoothing(lua_State *L) {
  try {
    ofEnableSmoothing();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEnableSmoothing: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEnableSmoothing: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDisableSmoothing()
 * api/openFrameworks/graphics/ofGraphics.h:111
 */
static int ofDisableSmoothing(lua_State *L) {
  try {
    ofDisableSmoothing();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDisableSmoothing: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDisableSmoothing: Unknown exception");
  }
  return lua_error(L);
}

/** ofStyle ofGetStyle()
 * api/openFrameworks/graphics/ofGraphics.h:114
 */
static int ofGetStyle(lua_State *L) {
  try {
    dub_pushudata(L, new ofStyle(ofGetStyle()), "ofStyle", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetStyle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetStyle: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetStyle(ofStyle style)
 * api/openFrameworks/graphics/ofGraphics.h:115
 */
static int ofSetStyle(lua_State *L) {
  try {
    ofStyle *style = *((ofStyle **)dub_checksdata(L, 1, "ofStyle"));
    ofSetStyle(*style);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetStyle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetStyle: Unknown exception");
  }
  return lua_error(L);
}

/** void ofPushStyle()
 * api/openFrameworks/graphics/ofGraphics.h:116
 */
static int ofPushStyle(lua_State *L) {
  try {
    ofPushStyle();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofPushStyle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofPushStyle: Unknown exception");
  }
  return lua_error(L);
}

/** void ofPopStyle()
 * api/openFrameworks/graphics/ofGraphics.h:117
 */
static int ofPopStyle(lua_State *L) {
  try {
    ofPopStyle();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofPopStyle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofPopStyle: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetPolyMode(ofPolyWindingMode mode)
 * api/openFrameworks/graphics/ofGraphics.h:119
 */
static int ofSetPolyMode(lua_State *L) {
  try {
    ofPolyWindingMode mode = (ofPolyWindingMode)dub_checkint(L, 1);
    ofSetPolyMode(mode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetPolyMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetPolyMode: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetRectMode(ofRectMode mode)
 * api/openFrameworks/graphics/ofGraphics.h:120
 */
static int ofSetRectMode(lua_State *L) {
  try {
    ofRectMode mode = (ofRectMode)dub_checkint(L, 1);
    ofSetRectMode(mode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetRectMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetRectMode: Unknown exception");
  }
  return lua_error(L);
}

/** float* ofBgColorPtr()
 * api/openFrameworks/graphics/ofGraphics.h:130
 */
static int ofBgColorPtr(lua_State *L) {
  try {
    lua_pushlightuserdata(L, (void *)ofBgColorPtr());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBgColorPtr: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBgColorPtr: Unknown exception");
  }
  return lua_error(L);
}

/** void ofBackground(int r, int g, int b, int a=255)
 * api/openFrameworks/graphics/ofGraphics.h:131
 */
static int ofBackground(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      int r = dub_checkint(L, 1);
      int g = dub_checkint(L, 2);
      int b = dub_checkint(L, 3);
      int a = dub_checkint(L, 4);
      ofBackground(r, g, b, a);
      return 0;
    } else if (top__ >= 3) {
      int r = dub_checkint(L, 1);
      int g = dub_checkint(L, 2);
      int b = dub_checkint(L, 3);
      ofBackground(r, g, b);
      return 0;
    } else if (top__ >= 2) {
      int brightness = dub_checkint(L, 1);
      int alpha = dub_checkint(L, 2);
      ofBackground(brightness, alpha);
      return 0;
    } else {
      int type__ = lua_type(L, 1);
      if (type__ == LUA_TNUMBER) {
        int brightness = dub_checkint(L, 1);
        ofBackground(brightness);
        return 0;
      } else {
        ofColor *c = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
        ofBackground(*c);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBackground: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBackground: Unknown exception");
  }
  return lua_error(L);
}

/** void ofBackgroundHex(int hexColor, int alpha=255)
 * api/openFrameworks/graphics/ofGraphics.h:134
 */
static int ofBackgroundHex(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int hexColor = dub_checkint(L, 1);
      int alpha = dub_checkint(L, 2);
      ofBackgroundHex(hexColor, alpha);
      return 0;
    } else {
      int hexColor = dub_checkint(L, 1);
      ofBackgroundHex(hexColor);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBackgroundHex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBackgroundHex: Unknown exception");
  }
  return lua_error(L);
}

/** void ofBackgroundGradient(const ofColor &start, const ofColor &end, ofGradientMode mode=OF_GRADIENT_CIRCULAR)
 * api/openFrameworks/graphics/ofGraphics.h:135
 */
static int ofBackgroundGradient(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofColor *start = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
      ofColor *end = *((ofColor **)dub_checksdata(L, 2, "ofColor"));
      ofGradientMode mode = (ofGradientMode)dub_checkint(L, 3);
      ofBackgroundGradient(*start, *end, mode);
      return 0;
    } else {
      ofColor *start = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
      ofColor *end = *((ofColor **)dub_checksdata(L, 2, "ofColor"));
      ofBackgroundGradient(*start, *end);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBackgroundGradient: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBackgroundGradient: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetBackgroundColor(int r, int g, int b, int a=255)
 * api/openFrameworks/graphics/ofGraphics.h:137
 */
static int ofSetBackgroundColor(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      int r = dub_checkint(L, 1);
      int g = dub_checkint(L, 2);
      int b = dub_checkint(L, 3);
      int a = dub_checkint(L, 4);
      ofSetBackgroundColor(r, g, b, a);
      return 0;
    } else if (top__ >= 3) {
      int r = dub_checkint(L, 1);
      int g = dub_checkint(L, 2);
      int b = dub_checkint(L, 3);
      ofSetBackgroundColor(r, g, b);
      return 0;
    } else if (top__ >= 2) {
      int brightness = dub_checkint(L, 1);
      int alpha = dub_checkint(L, 2);
      ofSetBackgroundColor(brightness, alpha);
      return 0;
    } else {
      int type__ = lua_type(L, 1);
      if (type__ == LUA_TNUMBER) {
        int brightness = dub_checkint(L, 1);
        ofSetBackgroundColor(brightness);
        return 0;
      } else {
        ofColor *c = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
        ofSetBackgroundColor(*c);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetBackgroundColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetBackgroundColor: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetBackgroundColorHex(int hexColor, int alpha=255)
 * api/openFrameworks/graphics/ofGraphics.h:140
 */
static int ofSetBackgroundColorHex(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int hexColor = dub_checkint(L, 1);
      int alpha = dub_checkint(L, 2);
      ofSetBackgroundColorHex(hexColor, alpha);
      return 0;
    } else {
      int hexColor = dub_checkint(L, 1);
      ofSetBackgroundColorHex(hexColor);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetBackgroundColorHex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetBackgroundColorHex: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetBackgroundAuto(bool bManual)
 * api/openFrameworks/graphics/ofGraphics.h:143
 */
static int ofSetBackgroundAuto(lua_State *L) {
  try {
    bool bManual = dub_checkboolean(L, 1);
    ofSetBackgroundAuto(bManual);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetBackgroundAuto: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetBackgroundAuto: Unknown exception");
  }
  return lua_error(L);
}

/** void ofClear(float r, float g, float b, float a=0)
 * api/openFrameworks/graphics/ofGraphics.h:145
 */
static int ofClear(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float r = dub_checknumber(L, 1);
      float g = dub_checknumber(L, 2);
      float b = dub_checknumber(L, 3);
      float a = dub_checknumber(L, 4);
      ofClear(r, g, b, a);
      return 0;
    } else if (top__ >= 3) {
      float r = dub_checknumber(L, 1);
      float g = dub_checknumber(L, 2);
      float b = dub_checknumber(L, 3);
      ofClear(r, g, b);
      return 0;
    } else if (top__ >= 2) {
      float brightness = dub_checknumber(L, 1);
      float a = dub_checknumber(L, 2);
      ofClear(brightness, a);
      return 0;
    } else {
      int type__ = lua_type(L, 1);
      if (type__ == LUA_TNUMBER) {
        float brightness = dub_checknumber(L, 1);
        ofClear(brightness);
        return 0;
      } else {
        ofColor *c = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
        ofClear(*c);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofClear: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofClear: Unknown exception");
  }
  return lua_error(L);
}

/** void ofClearAlpha()
 * api/openFrameworks/graphics/ofGraphics.h:148
 */
static int ofClearAlpha(lua_State *L) {
  try {
    ofClearAlpha();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofClearAlpha: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofClearAlpha: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofbClearBg()
 * api/openFrameworks/graphics/ofGraphics.h:151
 */
static int ofbClearBg(lua_State *L) {
  try {
    lua_pushboolean(L, ofbClearBg());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofbClearBg: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofbClearBg: Unknown exception");
  }
  return lua_error(L);
}

/** void ofTriangle(float x1, float y1, float x2, float y2, float x3, float y3)
 * api/openFrameworks/graphics/ofGraphics.h:164
 */
static int ofTriangle(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 9) {
      float x1 = dub_checknumber(L, 1);
      float y1 = dub_checknumber(L, 2);
      float z1 = dub_checknumber(L, 3);
      float x2 = dub_checknumber(L, 4);
      float y2 = dub_checknumber(L, 5);
      float z2 = dub_checknumber(L, 6);
      float x3 = dub_checknumber(L, 7);
      float y3 = dub_checknumber(L, 8);
      float z3 = dub_checknumber(L, 9);
      ofTriangle(x1, y1, z1, x2, y2, z2, x3, y3, z3);
      return 0;
    } else if (top__ >= 6) {
      float x1 = dub_checknumber(L, 1);
      float y1 = dub_checknumber(L, 2);
      float x2 = dub_checknumber(L, 3);
      float y2 = dub_checknumber(L, 4);
      float x3 = dub_checknumber(L, 5);
      float y3 = dub_checknumber(L, 6);
      ofTriangle(x1, y1, x2, y2, x3, y3);
      return 0;
    } else {
      ofVec3f *p1 = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      ofVec3f *p2 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofVec3f *p3 = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      ofTriangle(*p1, *p2, *p3);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofTriangle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofTriangle: Unknown exception");
  }
  return lua_error(L);
}

/** void ofCircle(float x, float y, float radius)
 * api/openFrameworks/graphics/ofGraphics.h:168
 */
static int ofCircle(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float z = dub_checknumber(L, 3);
      float radius = dub_checknumber(L, 4);
      ofCircle(x, y, z, radius);
      return 0;
    } else if (top__ >= 3) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float radius = dub_checknumber(L, 3);
      ofCircle(x, y, radius);
      return 0;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      float radius = dub_checknumber(L, 2);
      ofCircle(*p, radius);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofCircle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofCircle: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEllipse(float x, float y, float width, float height)
 * api/openFrameworks/graphics/ofGraphics.h:172
 */
static int ofEllipse(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float z = dub_checknumber(L, 3);
      float width = dub_checknumber(L, 4);
      float height = dub_checknumber(L, 5);
      ofEllipse(x, y, z, width, height);
      return 0;
    } else if (top__ >= 4) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float width = dub_checknumber(L, 3);
      float height = dub_checknumber(L, 4);
      ofEllipse(x, y, width, height);
      return 0;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofEllipse(*p, width, height);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEllipse: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEllipse: Unknown exception");
  }
  return lua_error(L);
}

/** void ofLine(float x1, float y1, float x2, float y2)
 * api/openFrameworks/graphics/ofGraphics.h:176
 */
static int ofLine(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      float x1 = dub_checknumber(L, 1);
      float y1 = dub_checknumber(L, 2);
      float z1 = dub_checknumber(L, 3);
      float x2 = dub_checknumber(L, 4);
      float y2 = dub_checknumber(L, 5);
      float z2 = dub_checknumber(L, 6);
      ofLine(x1, y1, z1, x2, y2, z2);
      return 0;
    } else if (top__ >= 4) {
      float x1 = dub_checknumber(L, 1);
      float y1 = dub_checknumber(L, 2);
      float x2 = dub_checknumber(L, 3);
      float y2 = dub_checknumber(L, 4);
      ofLine(x1, y1, x2, y2);
      return 0;
    } else {
      ofVec3f *p1 = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      ofVec3f *p2 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofLine(*p1, *p2);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofLine: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofLine: Unknown exception");
  }
  return lua_error(L);
}

/** void ofRect(float x1, float y1, float w, float h)
 * api/openFrameworks/graphics/ofGraphics.h:180
 */
static int ofRect(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float z = dub_checknumber(L, 3);
      float w = dub_checknumber(L, 4);
      float h = dub_checknumber(L, 5);
      ofRect(x, y, z, w, h);
      return 0;
    } else if (top__ >= 4) {
      float x1 = dub_checknumber(L, 1);
      float y1 = dub_checknumber(L, 2);
      float w = dub_checknumber(L, 3);
      float h = dub_checknumber(L, 4);
      ofRect(x1, y1, w, h);
      return 0;
    } else if (top__ >= 3) {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      float w = dub_checknumber(L, 2);
      float h = dub_checknumber(L, 3);
      ofRect(*p, w, h);
      return 0;
    } else {
      ofRectangle *r = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
      ofRect(*r);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRect: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRect: Unknown exception");
  }
  return lua_error(L);
}

/** void ofRectRounded(const ofRectangle &b, float r)
 * api/openFrameworks/graphics/ofGraphics.h:185
 */
static int ofRectRounded(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float z = dub_checknumber(L, 3);
      float w = dub_checknumber(L, 4);
      float h = dub_checknumber(L, 5);
      float r = dub_checknumber(L, 6);
      ofRectRounded(x, y, z, w, h, r);
      return 0;
    } else if (top__ >= 5) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float w = dub_checknumber(L, 3);
      float h = dub_checknumber(L, 4);
      float r = dub_checknumber(L, 5);
      ofRectRounded(x, y, w, h, r);
      return 0;
    } else if (top__ >= 4) {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      float w = dub_checknumber(L, 2);
      float h = dub_checknumber(L, 3);
      float r = dub_checknumber(L, 4);
      ofRectRounded(*p, w, h, r);
      return 0;
    } else {
      ofRectangle *b = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
      float r = dub_checknumber(L, 2);
      ofRectRounded(*b, r);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRectRounded: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRectRounded: Unknown exception");
  }
  return lua_error(L);
}

/** void ofCurve(float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3)
 * api/openFrameworks/graphics/ofGraphics.h:190
 */
static int ofCurve(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 12) {
      float x0 = dub_checknumber(L, 1);
      float y0 = dub_checknumber(L, 2);
      float z0 = dub_checknumber(L, 3);
      float x1 = dub_checknumber(L, 4);
      float y1 = dub_checknumber(L, 5);
      float z1 = dub_checknumber(L, 6);
      float x2 = dub_checknumber(L, 7);
      float y2 = dub_checknumber(L, 8);
      float z2 = dub_checknumber(L, 9);
      float x3 = dub_checknumber(L, 10);
      float y3 = dub_checknumber(L, 11);
      float z3 = dub_checknumber(L, 12);
      ofCurve(x0, y0, z0, x1, y1, z1, x2, y2, z2, x3, y3, z3);
      return 0;
    } else {
      float x0 = dub_checknumber(L, 1);
      float y0 = dub_checknumber(L, 2);
      float x1 = dub_checknumber(L, 3);
      float y1 = dub_checknumber(L, 4);
      float x2 = dub_checknumber(L, 5);
      float y2 = dub_checknumber(L, 6);
      float x3 = dub_checknumber(L, 7);
      float y3 = dub_checknumber(L, 8);
      ofCurve(x0, y0, x1, y1, x2, y2, x3, y3);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofCurve: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofCurve: Unknown exception");
  }
  return lua_error(L);
}

/** void ofBezier(float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3)
 * api/openFrameworks/graphics/ofGraphics.h:192
 */
static int ofBezier(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 12) {
      float x0 = dub_checknumber(L, 1);
      float y0 = dub_checknumber(L, 2);
      float z0 = dub_checknumber(L, 3);
      float x1 = dub_checknumber(L, 4);
      float y1 = dub_checknumber(L, 5);
      float z1 = dub_checknumber(L, 6);
      float x2 = dub_checknumber(L, 7);
      float y2 = dub_checknumber(L, 8);
      float z2 = dub_checknumber(L, 9);
      float x3 = dub_checknumber(L, 10);
      float y3 = dub_checknumber(L, 11);
      float z3 = dub_checknumber(L, 12);
      ofBezier(x0, y0, z0, x1, y1, z1, x2, y2, z2, x3, y3, z3);
      return 0;
    } else {
      float x0 = dub_checknumber(L, 1);
      float y0 = dub_checknumber(L, 2);
      float x1 = dub_checknumber(L, 3);
      float y1 = dub_checknumber(L, 4);
      float x2 = dub_checknumber(L, 5);
      float y2 = dub_checknumber(L, 6);
      float x3 = dub_checknumber(L, 7);
      float y3 = dub_checknumber(L, 8);
      ofBezier(x0, y0, x1, y1, x2, y2, x3, y3);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBezier: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBezier: Unknown exception");
  }
  return lua_error(L);
}

/** void ofBeginShape()
 * api/openFrameworks/graphics/ofGraphics.h:197
 */
static int ofBeginShape(lua_State *L) {
  try {
    ofBeginShape();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBeginShape: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBeginShape: Unknown exception");
  }
  return lua_error(L);
}

/** void ofVertex(float x, float y)
 * api/openFrameworks/graphics/ofGraphics.h:198
 */
static int ofVertex(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float z = dub_checknumber(L, 3);
      ofVertex(x, y, z);
      return 0;
    } else if (top__ >= 2) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      ofVertex(x, y);
      return 0;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      ofVertex(*p);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofVertex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofVertex: Unknown exception");
  }
  return lua_error(L);
}

/** void ofVertices(const vector< ofPoint > &polyPoints)
 * api/openFrameworks/graphics/ofGraphics.h:201
 */
static int ofVertices(lua_State *L) {
  try {
    vector< ofPoint > *polyPoints = *((vector< ofPoint > **)dub_checksdata(L, 1, "vector< ofPoint >"));
    ofVertices(*polyPoints);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofVertices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofVertices: Unknown exception");
  }
  return lua_error(L);
}

/** void ofCurveVertex(float x, float y)
 * api/openFrameworks/graphics/ofGraphics.h:205
 */
static int ofCurveVertex(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float z = dub_checknumber(L, 3);
      ofCurveVertex(x, y, z);
      return 0;
    } else if (top__ >= 2) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      ofCurveVertex(x, y);
      return 0;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      ofCurveVertex(*p);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofCurveVertex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofCurveVertex: Unknown exception");
  }
  return lua_error(L);
}

/** void ofCurveVertices(const vector< ofPoint > &curvePoints)
 * api/openFrameworks/graphics/ofGraphics.h:208
 */
static int ofCurveVertices(lua_State *L) {
  try {
    vector< ofPoint > *curvePoints = *((vector< ofPoint > **)dub_checksdata(L, 1, "vector< ofPoint >"));
    ofCurveVertices(*curvePoints);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofCurveVertices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofCurveVertices: Unknown exception");
  }
  return lua_error(L);
}

/** void ofBezierVertex(float x1, float y1, float x2, float y2, float x3, float y3)
 * api/openFrameworks/graphics/ofGraphics.h:211
 */
static int ofBezierVertex(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 9) {
      float x1 = dub_checknumber(L, 1);
      float y1 = dub_checknumber(L, 2);
      float z1 = dub_checknumber(L, 3);
      float x2 = dub_checknumber(L, 4);
      float y2 = dub_checknumber(L, 5);
      float z2 = dub_checknumber(L, 6);
      float x3 = dub_checknumber(L, 7);
      float y3 = dub_checknumber(L, 8);
      float z3 = dub_checknumber(L, 9);
      ofBezierVertex(x1, y1, z1, x2, y2, z2, x3, y3, z3);
      return 0;
    } else if (top__ >= 6) {
      float x1 = dub_checknumber(L, 1);
      float y1 = dub_checknumber(L, 2);
      float x2 = dub_checknumber(L, 3);
      float y2 = dub_checknumber(L, 4);
      float x3 = dub_checknumber(L, 5);
      float y3 = dub_checknumber(L, 6);
      ofBezierVertex(x1, y1, x2, y2, x3, y3);
      return 0;
    } else {
      ofVec3f *p1 = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      ofVec3f *p2 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofVec3f *p3 = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      ofBezierVertex(*p1, *p2, *p3);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBezierVertex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBezierVertex: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEndShape(bool bClose=false)
 * api/openFrameworks/graphics/ofGraphics.h:215
 */
static int ofEndShape(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      bool bClose = dub_checkboolean(L, 1);
      ofEndShape(bClose);
      return 0;
    } else {
      ofEndShape();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEndShape: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEndShape: Unknown exception");
  }
  return lua_error(L);
}

/** void ofNextContour(bool bClose=false)
 * api/openFrameworks/graphics/ofGraphics.h:216
 */
static int ofNextContour(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      bool bClose = dub_checkboolean(L, 1);
      ofNextContour(bClose);
      return 0;
    } else {
      ofNextContour();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNextContour: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNextContour: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSphere(float x, float y, float z, float radius)
 * api/openFrameworks/graphics/ofGraphics.h:220
 */
static int ofSphere(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float z = dub_checknumber(L, 3);
      float radius = dub_checknumber(L, 4);
      ofSphere(x, y, z, radius);
      return 0;
    } else if (top__ >= 3) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float radius = dub_checknumber(L, 3);
      ofSphere(x, y, radius);
      return 0;
    } else if (top__ >= 2) {
      ofVec3f *position = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      float radius = dub_checknumber(L, 2);
      ofSphere(*position, radius);
      return 0;
    } else {
      float radius = dub_checknumber(L, 1);
      ofSphere(radius);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSphere: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSphere: Unknown exception");
  }
  return lua_error(L);
}

/** void ofBox(float x, float y, float z, float size)
 * api/openFrameworks/graphics/ofGraphics.h:225
 */
static int ofBox(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float z = dub_checknumber(L, 3);
      float size = dub_checknumber(L, 4);
      ofBox(x, y, z, size);
      return 0;
    } else if (top__ >= 3) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float size = dub_checknumber(L, 3);
      ofBox(x, y, size);
      return 0;
    } else if (top__ >= 2) {
      ofVec3f *position = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      float size = dub_checknumber(L, 2);
      ofBox(*position, size);
      return 0;
    } else {
      float size = dub_checknumber(L, 1);
      ofBox(size);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBox: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBox: Unknown exception");
  }
  return lua_error(L);
}

/** void ofCone(float x, float y, float z, float radius, float height)
 * api/openFrameworks/graphics/ofGraphics.h:230
 */
static int ofCone(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float z = dub_checknumber(L, 3);
      float radius = dub_checknumber(L, 4);
      float height = dub_checknumber(L, 5);
      ofCone(x, y, z, radius, height);
      return 0;
    } else if (top__ >= 4) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float radius = dub_checknumber(L, 3);
      float height = dub_checknumber(L, 4);
      ofCone(x, y, radius, height);
      return 0;
    } else if (top__ >= 3) {
      ofVec3f *position = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      float radius = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofCone(*position, radius, height);
      return 0;
    } else {
      float radius = dub_checknumber(L, 1);
      float height = dub_checknumber(L, 2);
      ofCone(radius, height);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofCone: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofCone: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetDrawBitmapMode(ofDrawBitmapMode mode)
 * api/openFrameworks/graphics/ofGraphics.h:236
 */
static int ofSetDrawBitmapMode(lua_State *L) {
  try {
    ofDrawBitmapMode mode = (ofDrawBitmapMode)dub_checkint(L, 1);
    ofSetDrawBitmapMode(mode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetDrawBitmapMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetDrawBitmapMode: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDrawBitmapString(string textString, const ofPoint &p)
 * api/openFrameworks/graphics/ofGraphics.h:237
 */
static int ofDrawBitmapString(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      size_t textString_sz_;
      const char *textString = dub_checklstring(L, 1, &textString_sz_);
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      ofDrawBitmapString(std::string(textString, textString_sz_), x, y, z);
      return 0;
    } else if (top__ >= 3) {
      size_t textString_sz_;
      const char *textString = dub_checklstring(L, 1, &textString_sz_);
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      ofDrawBitmapString(std::string(textString, textString_sz_), x, y);
      return 0;
    } else {
      size_t textString_sz_;
      const char *textString = dub_checklstring(L, 1, &textString_sz_);
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofDrawBitmapString(std::string(textString, textString_sz_), *p);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDrawBitmapString: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDrawBitmapString: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDrawBitmapStringHighlight(string text, const ofPoint &position, const ofColor &background=ofColor::black, const ofColor &foreground=ofColor::white)
 * api/openFrameworks/graphics/ofGraphics.h:240
 */
static int ofDrawBitmapStringHighlight(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      size_t text_sz_;
      const char *text = dub_checklstring(L, 1, &text_sz_);
      int x = dub_checkint(L, 2);
      int y = dub_checkint(L, 3);
      ofColor *background = *((ofColor **)dub_checksdata(L, 4, "ofColor"));
      ofColor *foreground = *((ofColor **)dub_checksdata(L, 5, "ofColor"));
      ofDrawBitmapStringHighlight(std::string(text, text_sz_), x, y, *background, *foreground);
      return 0;
    } else if (top__ >= 4) {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        size_t text_sz_;
        const char *text = dub_checklstring(L, 1, &text_sz_);
        int x = dub_checkint(L, 2);
        int y = dub_checkint(L, 3);
        ofColor *background = *((ofColor **)dub_checksdata(L, 4, "ofColor"));
        ofDrawBitmapStringHighlight(std::string(text, text_sz_), x, y, *background);
        return 0;
      } else {
        size_t text_sz_;
        const char *text = dub_checklstring(L, 1, &text_sz_);
        ofVec3f *position = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
        ofColor *background = *((ofColor **)dub_checksdata(L, 3, "ofColor"));
        ofColor *foreground = *((ofColor **)dub_checksdata(L, 4, "ofColor"));
        ofDrawBitmapStringHighlight(std::string(text, text_sz_), *position, *background, *foreground);
        return 0;
      }
    } else if (top__ >= 3) {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        size_t text_sz_;
        const char *text = dub_checklstring(L, 1, &text_sz_);
        int x = dub_checkint(L, 2);
        int y = dub_checkint(L, 3);
        ofDrawBitmapStringHighlight(std::string(text, text_sz_), x, y);
        return 0;
      } else {
        size_t text_sz_;
        const char *text = dub_checklstring(L, 1, &text_sz_);
        ofVec3f *position = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
        ofColor *background = *((ofColor **)dub_checksdata(L, 3, "ofColor"));
        ofDrawBitmapStringHighlight(std::string(text, text_sz_), *position, *background);
        return 0;
      }
    } else {
      size_t text_sz_;
      const char *text = dub_checklstring(L, 1, &text_sz_);
      ofVec3f *position = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofDrawBitmapStringHighlight(std::string(text, text_sz_), *position);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDrawBitmapStringHighlight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDrawBitmapStringHighlight: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofLoadImage(ofPixels &pix, string path)
 * api/openFrameworks/graphics/ofImage.h:59
 */
static int ofLoadImage(lua_State *L) {
  try {
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofBuffer", type__)) ) {
      int type__ = lua_type(L, 1);
      void **ptr1__;
      if ( (ptr1__ = dub_issdata(L, 1, "ofTexture", type__)) ) {
        ofTexture *tex = *((ofTexture **)ptr1__);
        ofBuffer *buffer = *((ofBuffer **)dub_checksdata(L, 2, "ofBuffer"));
        lua_pushboolean(L, ofLoadImage(*tex, *buffer));
        return 1;
      } else {
        ofPixels *pix = *((ofPixels **)dub_checksdata(L, 1, "ofPixels"));
        ofBuffer *buffer = *((ofBuffer **)dub_checksdata(L, 2, "ofBuffer"));
        lua_pushboolean(L, ofLoadImage(*pix, *buffer));
        return 1;
      }
    } else {
      int type__ = lua_type(L, 1);
      void **ptr1__;
      if ( (ptr1__ = dub_issdata(L, 1, "ofTexture", type__)) ) {
        ofTexture *tex = *((ofTexture **)ptr1__);
        size_t path_sz_;
        const char *path = dub_checklstring(L, 2, &path_sz_);
        lua_pushboolean(L, ofLoadImage(*tex, std::string(path, path_sz_)));
        return 1;
      } else {
        ofPixels *pix = *((ofPixels **)dub_checksdata(L, 1, "ofPixels"));
        size_t path_sz_;
        const char *path = dub_checklstring(L, 2, &path_sz_);
        lua_pushboolean(L, ofLoadImage(*pix, std::string(path, path_sz_)));
        return 1;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofLoadImage: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofLoadImage: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSaveImage(ofPixels &pix, string path, ofImageQualityType qualityLevel=OF_IMAGE_QUALITY_BEST)
 * api/openFrameworks/graphics/ofImage.h:65
 */
static int ofSaveImage(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      ofPixels *pix = *((ofPixels **)dub_checksdata(L, 1, "ofPixels"));
      ofBuffer *buffer = *((ofBuffer **)dub_checksdata(L, 2, "ofBuffer"));
      ofImageFormat format = (ofImageFormat)dub_checkint(L, 3);
      ofImageQualityType qualityLevel = (ofImageQualityType)dub_checkint(L, 4);
      ofSaveImage(*pix, *buffer, format, qualityLevel);
      return 0;
    } else if (top__ >= 3) {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofBuffer", type__)) ) {
        ofPixels *pix = *((ofPixels **)dub_checksdata(L, 1, "ofPixels"));
        ofBuffer *buffer = *((ofBuffer **)ptr2__);
        ofImageFormat format = (ofImageFormat)dub_checkint(L, 3);
        ofSaveImage(*pix, *buffer, format);
        return 0;
      } else {
        ofPixels *pix = *((ofPixels **)dub_checksdata(L, 1, "ofPixels"));
        size_t path_sz_;
        const char *path = dub_checklstring(L, 2, &path_sz_);
        ofImageQualityType qualityLevel = (ofImageQualityType)dub_checkint(L, 3);
        ofSaveImage(*pix, std::string(path, path_sz_), qualityLevel);
        return 0;
      }
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofBuffer", type__)) ) {
        ofPixels *pix = *((ofPixels **)dub_checksdata(L, 1, "ofPixels"));
        ofBuffer *buffer = *((ofBuffer **)ptr2__);
        ofSaveImage(*pix, *buffer);
        return 0;
      } else {
        ofPixels *pix = *((ofPixels **)dub_checksdata(L, 1, "ofPixels"));
        size_t path_sz_;
        const char *path = dub_checklstring(L, 2, &path_sz_);
        ofSaveImage(*pix, std::string(path, path_sz_));
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSaveImage: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSaveImage: Unknown exception");
  }
  return lua_error(L);
}

/** void ofCloseFreeImage()
 * api/openFrameworks/graphics/ofImage.h:69
 */
static int ofCloseFreeImage(lua_State *L) {
  try {
    ofCloseFreeImage();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofCloseFreeImage: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofCloseFreeImage: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEnableLighting()
 * api/openFrameworks/gl/ofLight.h:26
 */
static int ofEnableLighting(lua_State *L) {
  try {
    ofEnableLighting();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEnableLighting: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEnableLighting: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDisableLighting()
 * api/openFrameworks/gl/ofLight.h:27
 */
static int ofDisableLighting(lua_State *L) {
  try {
    ofDisableLighting();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDisableLighting: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDisableLighting: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEnableSeparateSpecularLight()
 * api/openFrameworks/gl/ofLight.h:28
 */
static int ofEnableSeparateSpecularLight(lua_State *L) {
  try {
    ofEnableSeparateSpecularLight();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEnableSeparateSpecularLight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEnableSeparateSpecularLight: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDisableSeparateSpecularLight()
 * api/openFrameworks/gl/ofLight.h:29
 */
static int ofDisableSeparateSpecularLight(lua_State *L) {
  try {
    ofDisableSeparateSpecularLight();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDisableSeparateSpecularLight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDisableSeparateSpecularLight: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofGetLightingEnabled()
 * api/openFrameworks/gl/ofLight.h:30
 */
static int ofGetLightingEnabled(lua_State *L) {
  try {
    lua_pushboolean(L, ofGetLightingEnabled());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetLightingEnabled: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetLightingEnabled: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetSmoothLighting(bool b)
 * api/openFrameworks/gl/ofLight.h:31
 */
static int ofSetSmoothLighting(lua_State *L) {
  try {
    bool b = dub_checkboolean(L, 1);
    ofSetSmoothLighting(b);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetSmoothLighting: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetSmoothLighting: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetGlobalAmbientColor(const ofColor &c)
 * api/openFrameworks/gl/ofLight.h:32
 */
static int ofSetGlobalAmbientColor(lua_State *L) {
  try {
    ofColor *c = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    ofSetGlobalAmbientColor(*c);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetGlobalAmbientColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetGlobalAmbientColor: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetLogLevel(ofLogLevel logLevel)
 * api/openFrameworks/utils/ofLog.h:21
 */
static int ofSetLogLevel(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      size_t module_sz_;
      const char *module = dub_checklstring(L, 1, &module_sz_);
      ofLogLevel logLevel = (ofLogLevel)dub_checkint(L, 2);
      ofSetLogLevel(std::string(module, module_sz_), logLevel);
      return 0;
    } else {
      ofLogLevel logLevel = (ofLogLevel)dub_checkint(L, 1);
      ofSetLogLevel(logLevel);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetLogLevel: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetLogLevel: Unknown exception");
  }
  return lua_error(L);
}

/** ofLogLevel ofGetLogLevel()
 * api/openFrameworks/utils/ofLog.h:23
 */
static int ofGetLogLevel(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetLogLevel());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetLogLevel: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetLogLevel: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetLoggerChannel(ofPtr< ofBaseLoggerChannel > loggerChannel)
 * api/openFrameworks/utils/ofLog.h:25
 */
static int ofSetLoggerChannel(lua_State *L) {
  try {
    ofPtr < ofBaseLoggerChannel > *loggerChannel = *((ofPtr < ofBaseLoggerChannel > **)dub_checksdata(L, 1, "ofPtr < ofBaseLoggerChannel >"));
    ofSetLoggerChannel(*loggerChannel);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetLoggerChannel: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetLoggerChannel: Unknown exception");
  }
  return lua_error(L);
}

/** string ofGetLogLevelName(ofLogLevel level)
 * api/openFrameworks/utils/ofLog.h:26
 */
static int ofGetLogLevelName(lua_State *L) {
  try {
    ofLogLevel level = (ofLogLevel)dub_checkint(L, 1);
    lua_pushlstring(L, ofGetLogLevelName(level).data(), ofGetLogLevelName(level).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetLogLevelName: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetLogLevelName: Unknown exception");
  }
  return lua_error(L);
}

/** void ofLogToFile(const string &path, bool append=false)
 * api/openFrameworks/utils/ofLog.h:28
 */
static int ofLogToFile(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      size_t path_sz_;
      const char *path = dub_checklstring(L, 1, &path_sz_);
      bool append = dub_checkboolean(L, 2);
      ofLogToFile(std::string(path, path_sz_), append);
      return 0;
    } else {
      size_t path_sz_;
      const char *path = dub_checklstring(L, 1, &path_sz_);
      ofLogToFile(std::string(path, path_sz_));
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofLogToFile: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofLogToFile: Unknown exception");
  }
  return lua_error(L);
}

/** void ofLogToConsole()
 * api/openFrameworks/utils/ofLog.h:29
 */
static int ofLogToConsole(lua_State *L) {
  try {
    ofLogToConsole();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofLogToConsole: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofLogToConsole: Unknown exception");
  }
  return lua_error(L);
}

/** int ofNextPow2(int a)
 * api/openFrameworks/math/ofMath.h:18
 */
static int ofNextPow2(lua_State *L) {
  try {
    int a = dub_checkint(L, 1);
    lua_pushnumber(L, ofNextPow2(a));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNextPow2: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNextPow2: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSeedRandom()
 * api/openFrameworks/math/ofMath.h:19
 */
static int ofSeedRandom(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      int val = dub_checkint(L, 1);
      ofSeedRandom(val);
      return 0;
    } else {
      ofSeedRandom();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSeedRandom: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSeedRandom: Unknown exception");
  }
  return lua_error(L);
}

/** float ofRandom(float max)
 * api/openFrameworks/math/ofMath.h:21
 */
static int ofRandom(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      float val0 = dub_checknumber(L, 1);
      float val1 = dub_checknumber(L, 2);
      lua_pushnumber(L, ofRandom(val0, val1));
      return 1;
    } else {
      float max = dub_checknumber(L, 1);
      lua_pushnumber(L, ofRandom(max));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRandom: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRandom: Unknown exception");
  }
  return lua_error(L);
}

/** float ofRandomf()
 * api/openFrameworks/math/ofMath.h:23
 */
static int ofRandomf(lua_State *L) {
  try {
    lua_pushnumber(L, ofRandomf());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRandomf: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRandomf: Unknown exception");
  }
  return lua_error(L);
}

/** float ofRandomuf()
 * api/openFrameworks/math/ofMath.h:24
 */
static int ofRandomuf(lua_State *L) {
  try {
    lua_pushnumber(L, ofRandomuf());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRandomuf: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRandomuf: Unknown exception");
  }
  return lua_error(L);
}

/** float ofNormalize(float value, float min, float max)
 * api/openFrameworks/math/ofMath.h:26
 */
static int ofNormalize(lua_State *L) {
  try {
    float value = dub_checknumber(L, 1);
    float min = dub_checknumber(L, 2);
    float max = dub_checknumber(L, 3);
    lua_pushnumber(L, ofNormalize(value, min, max));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNormalize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNormalize: Unknown exception");
  }
  return lua_error(L);
}

/** float ofMap(float value, float inputMin, float inputMax, float outputMin, float outputMax, bool clamp=false)
 * api/openFrameworks/math/ofMath.h:27
 */
static int ofMap(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      float value = dub_checknumber(L, 1);
      float inputMin = dub_checknumber(L, 2);
      float inputMax = dub_checknumber(L, 3);
      float outputMin = dub_checknumber(L, 4);
      float outputMax = dub_checknumber(L, 5);
      bool clamp = dub_checkboolean(L, 6);
      lua_pushnumber(L, ofMap(value, inputMin, inputMax, outputMin, outputMax, clamp));
      return 1;
    } else {
      float value = dub_checknumber(L, 1);
      float inputMin = dub_checknumber(L, 2);
      float inputMax = dub_checknumber(L, 3);
      float outputMin = dub_checknumber(L, 4);
      float outputMax = dub_checknumber(L, 5);
      lua_pushnumber(L, ofMap(value, inputMin, inputMax, outputMin, outputMax));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofMap: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofMap: Unknown exception");
  }
  return lua_error(L);
}

/** float ofClamp(float value, float min, float max)
 * api/openFrameworks/math/ofMath.h:28
 */
static int ofClamp(lua_State *L) {
  try {
    float value = dub_checknumber(L, 1);
    float min = dub_checknumber(L, 2);
    float max = dub_checknumber(L, 3);
    lua_pushnumber(L, ofClamp(value, min, max));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofClamp: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofClamp: Unknown exception");
  }
  return lua_error(L);
}

/** float ofLerp(float start, float stop, float amt)
 * api/openFrameworks/math/ofMath.h:29
 */
static int ofLerp(lua_State *L) {
  try {
    float start = dub_checknumber(L, 1);
    float stop = dub_checknumber(L, 2);
    float amt = dub_checknumber(L, 3);
    lua_pushnumber(L, ofLerp(start, stop, amt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofLerp: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofLerp: Unknown exception");
  }
  return lua_error(L);
}

/** float ofDist(float x1, float y1, float x2, float y2)
 * api/openFrameworks/math/ofMath.h:30
 */
static int ofDist(lua_State *L) {
  try {
    float x1 = dub_checknumber(L, 1);
    float y1 = dub_checknumber(L, 2);
    float x2 = dub_checknumber(L, 3);
    float y2 = dub_checknumber(L, 4);
    lua_pushnumber(L, ofDist(x1, y1, x2, y2));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDist: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDist: Unknown exception");
  }
  return lua_error(L);
}

/** float ofDistSquared(float x1, float y1, float x2, float y2)
 * api/openFrameworks/math/ofMath.h:31
 */
static int ofDistSquared(lua_State *L) {
  try {
    float x1 = dub_checknumber(L, 1);
    float y1 = dub_checknumber(L, 2);
    float x2 = dub_checknumber(L, 3);
    float y2 = dub_checknumber(L, 4);
    lua_pushnumber(L, ofDistSquared(x1, y1, x2, y2));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDistSquared: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDistSquared: Unknown exception");
  }
  return lua_error(L);
}

/** int ofSign(float n)
 * api/openFrameworks/math/ofMath.h:32
 */
static int ofSign(lua_State *L) {
  try {
    float n = dub_checknumber(L, 1);
    lua_pushnumber(L, ofSign(n));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSign: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSign: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofInRange(float t, float min, float max)
 * api/openFrameworks/math/ofMath.h:33
 */
static int ofInRange(lua_State *L) {
  try {
    float t = dub_checknumber(L, 1);
    float min = dub_checknumber(L, 2);
    float max = dub_checknumber(L, 3);
    lua_pushboolean(L, ofInRange(t, min, max));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofInRange: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofInRange: Unknown exception");
  }
  return lua_error(L);
}

/** float ofRadToDeg(float radians)
 * api/openFrameworks/math/ofMath.h:35
 */
static int ofRadToDeg(lua_State *L) {
  try {
    float radians = dub_checknumber(L, 1);
    lua_pushnumber(L, ofRadToDeg(radians));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRadToDeg: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRadToDeg: Unknown exception");
  }
  return lua_error(L);
}

/** float ofDegToRad(float degrees)
 * api/openFrameworks/math/ofMath.h:36
 */
static int ofDegToRad(lua_State *L) {
  try {
    float degrees = dub_checknumber(L, 1);
    lua_pushnumber(L, ofDegToRad(degrees));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDegToRad: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDegToRad: Unknown exception");
  }
  return lua_error(L);
}

/** float ofLerpDegrees(float currentAngle, float targetAngle, float pct)
 * api/openFrameworks/math/ofMath.h:37
 */
static int ofLerpDegrees(lua_State *L) {
  try {
    float currentAngle = dub_checknumber(L, 1);
    float targetAngle = dub_checknumber(L, 2);
    float pct = dub_checknumber(L, 3);
    lua_pushnumber(L, ofLerpDegrees(currentAngle, targetAngle, pct));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofLerpDegrees: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofLerpDegrees: Unknown exception");
  }
  return lua_error(L);
}

/** float ofLerpRadians(float currentAngle, float targetAngle, float pct)
 * api/openFrameworks/math/ofMath.h:38
 */
static int ofLerpRadians(lua_State *L) {
  try {
    float currentAngle = dub_checknumber(L, 1);
    float targetAngle = dub_checknumber(L, 2);
    float pct = dub_checknumber(L, 3);
    lua_pushnumber(L, ofLerpRadians(currentAngle, targetAngle, pct));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofLerpRadians: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofLerpRadians: Unknown exception");
  }
  return lua_error(L);
}

/** float ofAngleDifferenceDegrees(float currentAngle, float targetAngle)
 * api/openFrameworks/math/ofMath.h:39
 */
static int ofAngleDifferenceDegrees(lua_State *L) {
  try {
    float currentAngle = dub_checknumber(L, 1);
    float targetAngle = dub_checknumber(L, 2);
    lua_pushnumber(L, ofAngleDifferenceDegrees(currentAngle, targetAngle));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofAngleDifferenceDegrees: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofAngleDifferenceDegrees: Unknown exception");
  }
  return lua_error(L);
}

/** float ofAngleDifferenceRadians(float currentAngle, float targetAngle)
 * api/openFrameworks/math/ofMath.h:40
 */
static int ofAngleDifferenceRadians(lua_State *L) {
  try {
    float currentAngle = dub_checknumber(L, 1);
    float targetAngle = dub_checknumber(L, 2);
    lua_pushnumber(L, ofAngleDifferenceRadians(currentAngle, targetAngle));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofAngleDifferenceRadians: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofAngleDifferenceRadians: Unknown exception");
  }
  return lua_error(L);
}

/** float ofWrapRadians(float angle, float from=-PI, float to=+PI)
 * api/openFrameworks/math/ofMath.h:42
 */
static int ofWrapRadians(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float angle = dub_checknumber(L, 1);
      float from = dub_checknumber(L, 2);
      float to = dub_checknumber(L, 3);
      lua_pushnumber(L, ofWrapRadians(angle, from, to));
      return 1;
    } else if (top__ >= 2) {
      float angle = dub_checknumber(L, 1);
      float from = dub_checknumber(L, 2);
      lua_pushnumber(L, ofWrapRadians(angle, from));
      return 1;
    } else {
      float angle = dub_checknumber(L, 1);
      lua_pushnumber(L, ofWrapRadians(angle));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofWrapRadians: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofWrapRadians: Unknown exception");
  }
  return lua_error(L);
}

/** float ofWrapDegrees(float angle, float from=-180, float to=+180)
 * api/openFrameworks/math/ofMath.h:43
 */
static int ofWrapDegrees(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float angle = dub_checknumber(L, 1);
      float from = dub_checknumber(L, 2);
      float to = dub_checknumber(L, 3);
      lua_pushnumber(L, ofWrapDegrees(angle, from, to));
      return 1;
    } else if (top__ >= 2) {
      float angle = dub_checknumber(L, 1);
      float from = dub_checknumber(L, 2);
      lua_pushnumber(L, ofWrapDegrees(angle, from));
      return 1;
    } else {
      float angle = dub_checknumber(L, 1);
      lua_pushnumber(L, ofWrapDegrees(angle));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofWrapDegrees: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofWrapDegrees: Unknown exception");
  }
  return lua_error(L);
}

/** float ofRandomWidth()
 * api/openFrameworks/math/ofMath.h:45
 */
static int ofRandomWidth(lua_State *L) {
  try {
    lua_pushnumber(L, ofRandomWidth());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRandomWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRandomWidth: Unknown exception");
  }
  return lua_error(L);
}

/** float ofRandomHeight()
 * api/openFrameworks/math/ofMath.h:46
 */
static int ofRandomHeight(lua_State *L) {
  try {
    lua_pushnumber(L, ofRandomHeight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRandomHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRandomHeight: Unknown exception");
  }
  return lua_error(L);
}

/** float ofNoise(float x)
 * api/openFrameworks/math/ofMath.h:49
 */
static int ofNoise(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float z = dub_checknumber(L, 3);
      float w = dub_checknumber(L, 4);
      lua_pushnumber(L, ofNoise(x, y, z, w));
      return 1;
    } else if (top__ >= 3) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float z = dub_checknumber(L, 3);
      lua_pushnumber(L, ofNoise(x, y, z));
      return 1;
    } else if (top__ >= 2) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      lua_pushnumber(L, ofNoise(x, y));
      return 1;
    } else {
      float x = dub_checknumber(L, 1);
      lua_pushnumber(L, ofNoise(x));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofNoise: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofNoise: Unknown exception");
  }
  return lua_error(L);
}

/** float ofSignedNoise(float x)
 * api/openFrameworks/math/ofMath.h:55
 */
static int ofSignedNoise(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float z = dub_checknumber(L, 3);
      float w = dub_checknumber(L, 4);
      lua_pushnumber(L, ofSignedNoise(x, y, z, w));
      return 1;
    } else if (top__ >= 3) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float z = dub_checknumber(L, 3);
      lua_pushnumber(L, ofSignedNoise(x, y, z));
      return 1;
    } else if (top__ >= 2) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      lua_pushnumber(L, ofSignedNoise(x, y));
      return 1;
    } else {
      float x = dub_checknumber(L, 1);
      lua_pushnumber(L, ofSignedNoise(x));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSignedNoise: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSignedNoise: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofInsidePoly(float x, float y, const vector< ofPoint > &poly)
 * api/openFrameworks/math/ofMath.h:60
 */
static int ofInsidePoly(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      vector< ofPoint > *poly = *((vector< ofPoint > **)dub_checksdata(L, 3, "vector< ofPoint >"));
      lua_pushboolean(L, ofInsidePoly(x, y, *poly));
      return 1;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      vector< ofPoint > *poly = *((vector< ofPoint > **)dub_checksdata(L, 2, "vector< ofPoint >"));
      lua_pushboolean(L, ofInsidePoly(*p, *poly));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofInsidePoly: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofInsidePoly: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofLineSegmentIntersection(ofPoint line1Start, ofPoint line1End, ofPoint line2Start, ofPoint line2End, ofPoint &intersection)
 * api/openFrameworks/math/ofMath.h:63
 */
static int ofLineSegmentIntersection(lua_State *L) {
  try {
    ofVec3f *line1Start = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
    ofVec3f *line1End = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
    ofVec3f *line2Start = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
    ofVec3f *line2End = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
    ofVec3f *intersection = *((ofVec3f **)dub_checksdata(L, 5, "ofVec3f"));
    lua_pushboolean(L, ofLineSegmentIntersection(*line1Start, *line1End, *line2Start, *line2End, *intersection));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofLineSegmentIntersection: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofLineSegmentIntersection: Unknown exception");
  }
  return lua_error(L);
}

/** ofPoint ofBezierPoint(ofPoint a, ofPoint b, ofPoint c, ofPoint d, float t)
 * api/openFrameworks/math/ofMath.h:65
 */
static int ofBezierPoint(lua_State *L) {
  try {
    ofVec3f *a = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
    ofVec3f *b = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
    ofVec3f *c = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
    ofVec3f *d = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
    float t = dub_checknumber(L, 5);
    dub_pushudata(L, new ofVec3f(ofBezierPoint(*a, *b, *c, *d, t)), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBezierPoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBezierPoint: Unknown exception");
  }
  return lua_error(L);
}

/** ofPoint ofCurvePoint(ofPoint a, ofPoint b, ofPoint c, ofPoint d, float t)
 * api/openFrameworks/math/ofMath.h:66
 */
static int ofCurvePoint(lua_State *L) {
  try {
    ofVec3f *a = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
    ofVec3f *b = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
    ofVec3f *c = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
    ofVec3f *d = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
    float t = dub_checknumber(L, 5);
    dub_pushudata(L, new ofVec3f(ofCurvePoint(*a, *b, *c, *d, t)), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofCurvePoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofCurvePoint: Unknown exception");
  }
  return lua_error(L);
}

/** ofPoint ofBezierTangent(ofPoint a, ofPoint b, ofPoint c, ofPoint d, float t)
 * api/openFrameworks/math/ofMath.h:67
 */
static int ofBezierTangent(lua_State *L) {
  try {
    ofVec3f *a = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
    ofVec3f *b = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
    ofVec3f *c = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
    ofVec3f *d = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
    float t = dub_checknumber(L, 5);
    dub_pushudata(L, new ofVec3f(ofBezierTangent(*a, *b, *c, *d, t)), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBezierTangent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBezierTangent: Unknown exception");
  }
  return lua_error(L);
}

/** ofPoint ofCurveTangent(ofPoint a, ofPoint b, ofPoint c, ofPoint d, float t)
 * api/openFrameworks/math/ofMath.h:68
 */
static int ofCurveTangent(lua_State *L) {
  try {
    ofVec3f *a = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
    ofVec3f *b = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
    ofVec3f *c = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
    ofVec3f *d = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
    float t = dub_checknumber(L, 5);
    dub_pushudata(L, new ofVec3f(ofCurveTangent(*a, *b, *c, *d, t)), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofCurveTangent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofCurveTangent: Unknown exception");
  }
  return lua_error(L);
}

/** static float grad1(int hash, float x)
 * api/openFrameworks/utils/ofNoise.h:123
 */
static int grad1(lua_State *L) {
  try {
    int hash = dub_checkint(L, 1);
    float x = dub_checknumber(L, 2);
    lua_pushnumber(L, grad1(hash, x));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "grad1: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "grad1: Unknown exception");
  }
  return lua_error(L);
}

/** static float grad2(int hash, float x, float y)
 * api/openFrameworks/utils/ofNoise.h:130
 */
static int grad2(lua_State *L) {
  try {
    int hash = dub_checkint(L, 1);
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    lua_pushnumber(L, grad2(hash, x, y));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "grad2: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "grad2: Unknown exception");
  }
  return lua_error(L);
}

/** static float grad3(int hash, float x, float y, float z)
 * api/openFrameworks/utils/ofNoise.h:137
 */
static int grad3(lua_State *L) {
  try {
    int hash = dub_checkint(L, 1);
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    float z = dub_checknumber(L, 4);
    lua_pushnumber(L, grad3(hash, x, y, z));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "grad3: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "grad3: Unknown exception");
  }
  return lua_error(L);
}

/** static float grad4(int hash, float x, float y, float z, float t)
 * api/openFrameworks/utils/ofNoise.h:144
 */
static int grad4(lua_State *L) {
  try {
    int hash = dub_checkint(L, 1);
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    float z = dub_checknumber(L, 4);
    float t = dub_checknumber(L, 5);
    lua_pushnumber(L, grad4(hash, x, y, z, t));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "grad4: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "grad4: Unknown exception");
  }
  return lua_error(L);
}

/** static float _slang_library_noise1(float x)
 * api/openFrameworks/utils/ofNoise.h:167
 */
static int _slang_library_noise1(lua_State *L) {
  try {
    float x = dub_checknumber(L, 1);
    lua_pushnumber(L, _slang_library_noise1(x));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "_slang_library: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "_slang_library: Unknown exception");
  }
  return lua_error(L);
}

/** static float _slang_library_noise2(float x, float y)
 * api/openFrameworks/utils/ofNoise.h:191
 */
static int _slang_library_noise2(lua_State *L) {
  try {
    float x = dub_checknumber(L, 1);
    float y = dub_checknumber(L, 2);
    lua_pushnumber(L, _slang_library_noise2(x, y));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "_slang_library: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "_slang_library: Unknown exception");
  }
  return lua_error(L);
}

/** static float _slang_library_noise3(float x, float y, float z)
 * api/openFrameworks/utils/ofNoise.h:262
 */
static int _slang_library_noise3(lua_State *L) {
  try {
    float x = dub_checknumber(L, 1);
    float y = dub_checknumber(L, 2);
    float z = dub_checknumber(L, 3);
    lua_pushnumber(L, _slang_library_noise3(x, y, z));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "_slang_library: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "_slang_library: Unknown exception");
  }
  return lua_error(L);
}

/** static float _slang_library_noise4(float x, float y, float z, float w)
 * api/openFrameworks/utils/ofNoise.h:364
 */
static int _slang_library_noise4(lua_State *L) {
  try {
    float x = dub_checknumber(L, 1);
    float y = dub_checknumber(L, 2);
    float z = dub_checknumber(L, 3);
    float w = dub_checknumber(L, 4);
    lua_pushnumber(L, _slang_library_noise4(x, y, z, w));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "_slang_library: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "_slang_library: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSoundStopAll()
 * api/openFrameworks/sound/ofSoundPlayer.h:11
 */
static int ofSoundStopAll(lua_State *L) {
  try {
    ofSoundStopAll();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSoundStopAll: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSoundStopAll: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSoundSetVolume(float vol)
 * api/openFrameworks/sound/ofSoundPlayer.h:12
 */
static int ofSoundSetVolume(lua_State *L) {
  try {
    float vol = dub_checknumber(L, 1);
    ofSoundSetVolume(vol);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSoundSetVolume: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSoundSetVolume: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSoundUpdate()
 * api/openFrameworks/sound/ofSoundPlayer.h:13
 */
static int ofSoundUpdate(lua_State *L) {
  try {
    ofSoundUpdate();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSoundUpdate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSoundUpdate: Unknown exception");
  }
  return lua_error(L);
}

/** float* ofSoundGetSpectrum(int nBands)
 * api/openFrameworks/sound/ofSoundPlayer.h:14
 */
static int ofSoundGetSpectrum(lua_State *L) {
  try {
    int nBands = dub_checkint(L, 1);
    lua_pushlightuserdata(L, (void *)ofSoundGetSpectrum(nBands));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSoundGetSpectrum: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSoundGetSpectrum: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSoundShutdown()
 * api/openFrameworks/sound/ofSoundPlayer.h:15
 */
static int ofSoundShutdown(lua_State *L) {
  try {
    ofSoundShutdown();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSoundShutdown: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSoundShutdown: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSoundStreamSetup(int nOutputChannels, int nInputChannels, ofBaseApp *appPtr=NULL)
 * api/openFrameworks/sound/ofSoundStream.h:23
 */
static int ofSoundStreamSetup(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      int nOutputChannels = dub_checkint(L, 1);
      int nInputChannels = dub_checkint(L, 2);
      ofBaseApp *appPtr = *((ofBaseApp **)dub_checksdata(L, 3, "ofBaseApp"));
      int sampleRate = dub_checkint(L, 4);
      int bufferSize = dub_checkint(L, 5);
      int nBuffers = dub_checkint(L, 6);
      ofSoundStreamSetup(nOutputChannels, nInputChannels, appPtr, sampleRate, bufferSize, nBuffers);
      return 0;
    } else if (top__ >= 5) {
      int nOutputChannels = dub_checkint(L, 1);
      int nInputChannels = dub_checkint(L, 2);
      int sampleRate = dub_checkint(L, 3);
      int bufferSize = dub_checkint(L, 4);
      int nBuffers = dub_checkint(L, 5);
      ofSoundStreamSetup(nOutputChannels, nInputChannels, sampleRate, bufferSize, nBuffers);
      return 0;
    } else if (top__ >= 3) {
      int nOutputChannels = dub_checkint(L, 1);
      int nInputChannels = dub_checkint(L, 2);
      ofBaseApp *appPtr = *((ofBaseApp **)dub_checksdata(L, 3, "ofBaseApp"));
      ofSoundStreamSetup(nOutputChannels, nInputChannels, appPtr);
      return 0;
    } else {
      int nOutputChannels = dub_checkint(L, 1);
      int nInputChannels = dub_checkint(L, 2);
      ofSoundStreamSetup(nOutputChannels, nInputChannels);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSoundStreamSetup: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSoundStreamSetup: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSoundStreamStop()
 * api/openFrameworks/sound/ofSoundStream.h:26
 */
static int ofSoundStreamStop(lua_State *L) {
  try {
    ofSoundStreamStop();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSoundStreamStop: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSoundStreamStop: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSoundStreamStart()
 * api/openFrameworks/sound/ofSoundStream.h:27
 */
static int ofSoundStreamStart(lua_State *L) {
  try {
    ofSoundStreamStart();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSoundStreamStart: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSoundStreamStart: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSoundStreamClose()
 * api/openFrameworks/sound/ofSoundStream.h:28
 */
static int ofSoundStreamClose(lua_State *L) {
  try {
    ofSoundStreamClose();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSoundStreamClose: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSoundStreamClose: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSoundStreamListDevices()
 * api/openFrameworks/sound/ofSoundStream.h:29
 */
static int ofSoundStreamListDevices(lua_State *L) {
  try {
    ofSoundStreamListDevices();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSoundStreamListDevices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSoundStreamListDevices: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSystemAlertDialog(string errorMessage)
 * api/openFrameworks/utils/ofSystemUtils.h:17
 */
static int ofSystemAlertDialog(lua_State *L) {
  try {
    size_t errorMessage_sz_;
    const char *errorMessage = dub_checklstring(L, 1, &errorMessage_sz_);
    ofSystemAlertDialog(std::string(errorMessage, errorMessage_sz_));
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSystemAlertDialog: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSystemAlertDialog: Unknown exception");
  }
  return lua_error(L);
}

/** ofFileDialogResult ofSystemLoadDialog(string windowTitle="", bool bFolderSelection=false, string defaultPath="")
 * api/openFrameworks/utils/ofSystemUtils.h:18
 */
static int ofSystemLoadDialog(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      size_t windowTitle_sz_;
      const char *windowTitle = dub_checklstring(L, 1, &windowTitle_sz_);
      bool bFolderSelection = dub_checkboolean(L, 2);
      size_t defaultPath_sz_;
      const char *defaultPath = dub_checklstring(L, 3, &defaultPath_sz_);
      dub_pushudata(L, new ofFileDialogResult(ofSystemLoadDialog(std::string(windowTitle, windowTitle_sz_), bFolderSelection, std::string(defaultPath, defaultPath_sz_))), "ofFileDialogResult", true);
      return 1;
    } else if (top__ >= 2) {
      size_t windowTitle_sz_;
      const char *windowTitle = dub_checklstring(L, 1, &windowTitle_sz_);
      bool bFolderSelection = dub_checkboolean(L, 2);
      dub_pushudata(L, new ofFileDialogResult(ofSystemLoadDialog(std::string(windowTitle, windowTitle_sz_), bFolderSelection)), "ofFileDialogResult", true);
      return 1;
    } else if (top__ >= 1) {
      size_t windowTitle_sz_;
      const char *windowTitle = dub_checklstring(L, 1, &windowTitle_sz_);
      dub_pushudata(L, new ofFileDialogResult(ofSystemLoadDialog(std::string(windowTitle, windowTitle_sz_))), "ofFileDialogResult", true);
      return 1;
    } else {
      dub_pushudata(L, new ofFileDialogResult(ofSystemLoadDialog()), "ofFileDialogResult", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSystemLoadDialog: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSystemLoadDialog: Unknown exception");
  }
  return lua_error(L);
}

/** ofFileDialogResult ofSystemSaveDialog(string defaultName, string messageName)
 * api/openFrameworks/utils/ofSystemUtils.h:19
 */
static int ofSystemSaveDialog(lua_State *L) {
  try {
    size_t defaultName_sz_;
    const char *defaultName = dub_checklstring(L, 1, &defaultName_sz_);
    size_t messageName_sz_;
    const char *messageName = dub_checklstring(L, 2, &messageName_sz_);
    dub_pushudata(L, new ofFileDialogResult(ofSystemSaveDialog(std::string(defaultName, defaultName_sz_), std::string(messageName, messageName_sz_))), "ofFileDialogResult", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSystemSaveDialog: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSystemSaveDialog: Unknown exception");
  }
  return lua_error(L);
}

/** string ofSystemTextBoxDialog(string question, string text="")
 * api/openFrameworks/utils/ofSystemUtils.h:20
 */
static int ofSystemTextBoxDialog(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      size_t question_sz_;
      const char *question = dub_checklstring(L, 1, &question_sz_);
      size_t text_sz_;
      const char *text = dub_checklstring(L, 2, &text_sz_);
      lua_pushlstring(L, ofSystemTextBoxDialog(std::string(question, question_sz_), std::string(text, text_sz_)).data(), ofSystemTextBoxDialog(std::string(question, question_sz_), std::string(text, text_sz_)).length());
      return 1;
    } else {
      size_t question_sz_;
      const char *question = dub_checklstring(L, 1, &question_sz_);
      lua_pushlstring(L, ofSystemTextBoxDialog(std::string(question, question_sz_)).data(), ofSystemTextBoxDialog(std::string(question, question_sz_)).length());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSystemTextBoxDialog: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSystemTextBoxDialog: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetGlInternalFormat(const ofPixels &pix)
 * api/openFrameworks/gl/ofTexture.h:8
 */
static int ofGetGlInternalFormat(lua_State *L) {
  try {
    int type__ = lua_type(L, 1);
    void **ptr1__;
    if ( (ptr1__ = dub_issdata(L, 1, "ofShortPixels", type__)) ) {
      ofShortPixels *pix = *((ofShortPixels **)ptr1__);
      lua_pushnumber(L, ofGetGlInternalFormat(*pix));
      return 1;
    } else if ( (ptr1__ = dub_issdata(L, 1, "ofPixels", type__)) ) {
      ofPixels *pix = *((ofPixels **)ptr1__);
      lua_pushnumber(L, ofGetGlInternalFormat(*pix));
      return 1;
    } else {
      ofFloatPixels *pix = *((ofFloatPixels **)dub_checksdata(L, 1, "ofFloatPixels"));
      lua_pushnumber(L, ofGetGlInternalFormat(*pix));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetGlInternalFormat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetGlInternalFormat: Unknown exception");
  }
  return lua_error(L);
}

/** void ofGetGlFormatAndType(int glInternalFormat, int &glFormat, int &glType)
 * api/openFrameworks/gl/ofTexture.h:11
 */
static int ofGetGlFormatAndType(lua_State *L) {
  try {
    int glInternalFormat = dub_checkint(L, 1);
    int glFormat = dub_checkint(L, 2);
    int glType = dub_checkint(L, 3);
    ofGetGlFormatAndType(glInternalFormat, glFormat, glType);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetGlFormatAndType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetGlFormatAndType: Unknown exception");
  }
  return lua_error(L);
}

/** ofImageType ofGetImageTypeFromGLType(int glType)
 * api/openFrameworks/gl/ofTexture.h:12
 */
static int ofGetImageTypeFromGLType(lua_State *L) {
  try {
    int glType = dub_checkint(L, 1);
    lua_pushnumber(L, ofGetImageTypeFromGLType(glType));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetImageTypeFromGLType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetImageTypeFromGLType: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofGetUsingArbTex()
 * api/openFrameworks/gl/ofTexture.h:15
 */
static int ofGetUsingArbTex(lua_State *L) {
  try {
    lua_pushboolean(L, ofGetUsingArbTex());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetUsingArbTex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetUsingArbTex: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEnableArbTex()
 * api/openFrameworks/gl/ofTexture.h:16
 */
static int ofEnableArbTex(lua_State *L) {
  try {
    ofEnableArbTex();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEnableArbTex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEnableArbTex: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDisableArbTex()
 * api/openFrameworks/gl/ofTexture.h:17
 */
static int ofDisableArbTex(lua_State *L) {
  try {
    ofDisableArbTex();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDisableArbTex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDisableArbTex: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofGetUsingNormalizedTexCoords()
 * api/openFrameworks/gl/ofTexture.h:20
 */
static int ofGetUsingNormalizedTexCoords(lua_State *L) {
  try {
    lua_pushboolean(L, ofGetUsingNormalizedTexCoords());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetUsingNormalizedTexCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetUsingNormalizedTexCoords: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEnableNormalizedTexCoords()
 * api/openFrameworks/gl/ofTexture.h:21
 */
static int ofEnableNormalizedTexCoords(lua_State *L) {
  try {
    ofEnableNormalizedTexCoords();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEnableNormalizedTexCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEnableNormalizedTexCoords: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDisableNormalizedTexCoords()
 * api/openFrameworks/gl/ofTexture.h:22
 */
static int ofDisableNormalizedTexCoords(lua_State *L) {
  try {
    ofDisableNormalizedTexCoords();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDisableNormalizedTexCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDisableNormalizedTexCoords: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetTextureWrap(GLfloat wrapS=GL_CLAMP_TO_EDGE, GLfloat wrapT=GL_CLAMP_TO_EDGE)
 * api/openFrameworks/gl/ofTexture.h:26
 */
static int ofSetTextureWrap(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      GLfloat wrapS = dub_checknumber(L, 1);
      GLfloat wrapT = dub_checknumber(L, 2);
      ofSetTextureWrap(wrapS, wrapT);
      return 0;
    } else if (top__ >= 1) {
      GLfloat wrapS = dub_checknumber(L, 1);
      ofSetTextureWrap(wrapS);
      return 0;
    } else {
      ofSetTextureWrap();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetTextureWrap: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetTextureWrap: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofGetUsingCustomTextureWrap()
 * api/openFrameworks/gl/ofTexture.h:27
 */
static int ofGetUsingCustomTextureWrap(lua_State *L) {
  try {
    lua_pushboolean(L, ofGetUsingCustomTextureWrap());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetUsingCustomTextureWrap: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetUsingCustomTextureWrap: Unknown exception");
  }
  return lua_error(L);
}

/** void ofRestoreTextureWrap()
 * api/openFrameworks/gl/ofTexture.h:28
 */
static int ofRestoreTextureWrap(lua_State *L) {
  try {
    ofRestoreTextureWrap();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRestoreTextureWrap: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRestoreTextureWrap: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetMinMagFilters(GLfloat minFilter=GL_LINEAR, GLfloat maxFilter=GL_LINEAR)
 * api/openFrameworks/gl/ofTexture.h:30
 */
static int ofSetMinMagFilters(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      GLfloat minFilter = dub_checknumber(L, 1);
      GLfloat maxFilter = dub_checknumber(L, 2);
      ofSetMinMagFilters(minFilter, maxFilter);
      return 0;
    } else if (top__ >= 1) {
      GLfloat minFilter = dub_checknumber(L, 1);
      ofSetMinMagFilters(minFilter);
      return 0;
    } else {
      ofSetMinMagFilters();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetMinMagFilters: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetMinMagFilters: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofGetUsingCustomMinMagFilters()
 * api/openFrameworks/gl/ofTexture.h:31
 */
static int ofGetUsingCustomMinMagFilters(lua_State *L) {
  try {
    lua_pushboolean(L, ofGetUsingCustomMinMagFilters());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetUsingCustomMinMagFilters: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetUsingCustomMinMagFilters: Unknown exception");
  }
  return lua_error(L);
}

/** void ofRestoreMinMagFilters()
 * api/openFrameworks/gl/ofTexture.h:32
 */
static int ofRestoreMinMagFilters(lua_State *L) {
  try {
    ofRestoreMinMagFilters();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRestoreMinMagFilters: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRestoreMinMagFilters: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEnableTextureEdgeHack()
 * api/openFrameworks/gl/ofTexture.h:91
 */
static int ofEnableTextureEdgeHack(lua_State *L) {
  try {
    ofEnableTextureEdgeHack();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEnableTextureEdgeHack: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEnableTextureEdgeHack: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDisableTextureEdgeHack()
 * api/openFrameworks/gl/ofTexture.h:92
 */
static int ofDisableTextureEdgeHack(lua_State *L) {
  try {
    ofDisableTextureEdgeHack();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDisableTextureEdgeHack: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDisableTextureEdgeHack: Unknown exception");
  }
  return lua_error(L);
}

/** ofHttpResponse ofLoadURL(string url)
 * api/openFrameworks/utils/ofURLFileLoader.h:58
 */
static int ofLoadURL(lua_State *L) {
  try {
    size_t url_sz_;
    const char *url = dub_checklstring(L, 1, &url_sz_);
    dub_pushudata(L, new ofHttpResponse(ofLoadURL(std::string(url, url_sz_))), "ofHttpResponse", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofLoadURL: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofLoadURL: Unknown exception");
  }
  return lua_error(L);
}

/** int ofLoadURLAsync(string url, string name="")
 * api/openFrameworks/utils/ofURLFileLoader.h:59
 */
static int ofLoadURLAsync(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      size_t url_sz_;
      const char *url = dub_checklstring(L, 1, &url_sz_);
      size_t name_sz_;
      const char *name = dub_checklstring(L, 2, &name_sz_);
      lua_pushnumber(L, ofLoadURLAsync(std::string(url, url_sz_), std::string(name, name_sz_)));
      return 1;
    } else {
      size_t url_sz_;
      const char *url = dub_checklstring(L, 1, &url_sz_);
      lua_pushnumber(L, ofLoadURLAsync(std::string(url, url_sz_)));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofLoadURLAsync: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofLoadURLAsync: Unknown exception");
  }
  return lua_error(L);
}

/** ofHttpResponse ofSaveURLTo(string url, string path)
 * api/openFrameworks/utils/ofURLFileLoader.h:60
 */
static int ofSaveURLTo(lua_State *L) {
  try {
    size_t url_sz_;
    const char *url = dub_checklstring(L, 1, &url_sz_);
    size_t path_sz_;
    const char *path = dub_checklstring(L, 2, &path_sz_);
    dub_pushudata(L, new ofHttpResponse(ofSaveURLTo(std::string(url, url_sz_), std::string(path, path_sz_))), "ofHttpResponse", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSaveURLTo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSaveURLTo: Unknown exception");
  }
  return lua_error(L);
}

/** int ofSaveURLAsync(string url, string path)
 * api/openFrameworks/utils/ofURLFileLoader.h:61
 */
static int ofSaveURLAsync(lua_State *L) {
  try {
    size_t url_sz_;
    const char *url = dub_checklstring(L, 1, &url_sz_);
    size_t path_sz_;
    const char *path = dub_checklstring(L, 2, &path_sz_);
    lua_pushnumber(L, ofSaveURLAsync(std::string(url, url_sz_), std::string(path, path_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSaveURLAsync: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSaveURLAsync: Unknown exception");
  }
  return lua_error(L);
}

/** void ofRemoveURLRequest(int id)
 * api/openFrameworks/utils/ofURLFileLoader.h:62
 */
static int ofRemoveURLRequest(lua_State *L) {
  try {
    int id = dub_checkint(L, 1);
    ofRemoveURLRequest(id);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRemoveURLRequest: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRemoveURLRequest: Unknown exception");
  }
  return lua_error(L);
}

/** void ofRemoveAllURLRequests()
 * api/openFrameworks/utils/ofURLFileLoader.h:63
 */
static int ofRemoveAllURLRequests(lua_State *L) {
  try {
    ofRemoveAllURLRequests();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofRemoveAllURLRequests: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofRemoveAllURLRequests: Unknown exception");
  }
  return lua_error(L);
}

/** void ofResetElapsedTimeCounter()
 * api/openFrameworks/utils/ofUtils.h:15
 */
static int ofResetElapsedTimeCounter(lua_State *L) {
  try {
    ofResetElapsedTimeCounter();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofResetElapsedTimeCounter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofResetElapsedTimeCounter: Unknown exception");
  }
  return lua_error(L);
}

/** float ofGetElapsedTimef()
 * api/openFrameworks/utils/ofUtils.h:16
 */
static int ofGetElapsedTimef(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetElapsedTimef());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetElapsedTimef: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetElapsedTimef: Unknown exception");
  }
  return lua_error(L);
}

/** unsigned long long ofGetElapsedTimeMillis()
 * api/openFrameworks/utils/ofUtils.h:17
 */
static int ofGetElapsedTimeMillis(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetElapsedTimeMillis());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetElapsedTimeMillis: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetElapsedTimeMillis: Unknown exception");
  }
  return lua_error(L);
}

/** unsigned long long ofGetElapsedTimeMicros()
 * api/openFrameworks/utils/ofUtils.h:18
 */
static int ofGetElapsedTimeMicros(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetElapsedTimeMicros());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetElapsedTimeMicros: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetElapsedTimeMicros: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetSeconds()
 * api/openFrameworks/utils/ofUtils.h:21
 */
static int ofGetSeconds(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetSeconds());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetSeconds: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetSeconds: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetMinutes()
 * api/openFrameworks/utils/ofUtils.h:22
 */
static int ofGetMinutes(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetMinutes());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetMinutes: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetMinutes: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetHours()
 * api/openFrameworks/utils/ofUtils.h:23
 */
static int ofGetHours(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetHours());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetHours: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetHours: Unknown exception");
  }
  return lua_error(L);
}

/** unsigned int ofGetUnixTime()
 * api/openFrameworks/utils/ofUtils.h:26
 */
static int ofGetUnixTime(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetUnixTime());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetUnixTime: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetUnixTime: Unknown exception");
  }
  return lua_error(L);
}

/** unsigned long long ofGetSystemTime()
 * api/openFrameworks/utils/ofUtils.h:28
 */
static int ofGetSystemTime(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetSystemTime());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetSystemTime: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetSystemTime: Unknown exception");
  }
  return lua_error(L);
}

/** unsigned long long ofGetSystemTimeMicros()
 * api/openFrameworks/utils/ofUtils.h:29
 */
static int ofGetSystemTimeMicros(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetSystemTimeMicros());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetSystemTimeMicros: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetSystemTimeMicros: Unknown exception");
  }
  return lua_error(L);
}

/** string ofGetTimestampString()
 * api/openFrameworks/utils/ofUtils.h:32
 */
static int ofGetTimestampString(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      size_t timestampFormat_sz_;
      const char *timestampFormat = dub_checklstring(L, 1, &timestampFormat_sz_);
      lua_pushlstring(L, ofGetTimestampString(std::string(timestampFormat, timestampFormat_sz_)).data(), ofGetTimestampString(std::string(timestampFormat, timestampFormat_sz_)).length());
      return 1;
    } else {
      lua_pushlstring(L, ofGetTimestampString().data(), ofGetTimestampString().length());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetTimestampString: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetTimestampString: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetYear()
 * api/openFrameworks/utils/ofUtils.h:36
 */
static int ofGetYear(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetYear());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetYear: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetYear: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetMonth()
 * api/openFrameworks/utils/ofUtils.h:37
 */
static int ofGetMonth(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetMonth());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetMonth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetMonth: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetDay()
 * api/openFrameworks/utils/ofUtils.h:38
 */
static int ofGetDay(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetDay());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetDay: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetDay: Unknown exception");
  }
  return lua_error(L);
}

/** int ofGetWeekday()
 * api/openFrameworks/utils/ofUtils.h:39
 */
static int ofGetWeekday(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetWeekday());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetWeekday: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetWeekday: Unknown exception");
  }
  return lua_error(L);
}

/** void ofLaunchBrowser(string url)
 * api/openFrameworks/utils/ofUtils.h:41
 */
static int ofLaunchBrowser(lua_State *L) {
  try {
    size_t url_sz_;
    const char *url = dub_checklstring(L, 1, &url_sz_);
    ofLaunchBrowser(std::string(url, url_sz_));
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofLaunchBrowser: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofLaunchBrowser: Unknown exception");
  }
  return lua_error(L);
}

/** void ofEnableDataPath()
 * api/openFrameworks/utils/ofUtils.h:43
 */
static int ofEnableDataPath(lua_State *L) {
  try {
    ofEnableDataPath();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofEnableDataPath: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofEnableDataPath: Unknown exception");
  }
  return lua_error(L);
}

/** void ofDisableDataPath()
 * api/openFrameworks/utils/ofUtils.h:44
 */
static int ofDisableDataPath(lua_State *L) {
  try {
    ofDisableDataPath();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofDisableDataPath: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofDisableDataPath: Unknown exception");
  }
  return lua_error(L);
}

/** string ofToDataPath(string path, bool absolute=false)
 * api/openFrameworks/utils/ofUtils.h:45
 */
static int ofToDataPath(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      size_t path_sz_;
      const char *path = dub_checklstring(L, 1, &path_sz_);
      bool absolute = dub_checkboolean(L, 2);
      lua_pushlstring(L, ofToDataPath(std::string(path, path_sz_), absolute).data(), ofToDataPath(std::string(path, path_sz_), absolute).length());
      return 1;
    } else {
      size_t path_sz_;
      const char *path = dub_checklstring(L, 1, &path_sz_);
      lua_pushlstring(L, ofToDataPath(std::string(path, path_sz_)).data(), ofToDataPath(std::string(path, path_sz_)).length());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofToDataPath: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofToDataPath: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSetDataPathRoot(string root)
 * api/openFrameworks/utils/ofUtils.h:78
 */
static int ofSetDataPathRoot(lua_State *L) {
  try {
    size_t root_sz_;
    const char *root = dub_checklstring(L, 1, &root_sz_);
    ofSetDataPathRoot(std::string(root, root_sz_));
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSetDataPathRoot: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSetDataPathRoot: Unknown exception");
  }
  return lua_error(L);
}

/** string ofToHex(const char *value)
 * api/openFrameworks/utils/ofUtils.h:142
 */
static int ofToHex(lua_State *L) {
  try {
    const char *value = dub_checkstring(L, 1);
    lua_pushlstring(L, ofToHex(value).data(), ofToHex(value).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofToHex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofToHex: Unknown exception");
  }
  return lua_error(L);
}

/** int ofHexToInt(const string &intHexString)
 * api/openFrameworks/utils/ofUtils.h:144
 */
static int ofHexToInt(lua_State *L) {
  try {
    size_t intHexString_sz_;
    const char *intHexString = dub_checklstring(L, 1, &intHexString_sz_);
    lua_pushnumber(L, ofHexToInt(std::string(intHexString, intHexString_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofHexToInt: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofHexToInt: Unknown exception");
  }
  return lua_error(L);
}

/** char ofHexToChar(const string &charHexString)
 * api/openFrameworks/utils/ofUtils.h:145
 */
static int ofHexToChar(lua_State *L) {
  try {
    size_t charHexString_sz_;
    const char *charHexString = dub_checklstring(L, 1, &charHexString_sz_);
    lua_pushnumber(L, ofHexToChar(std::string(charHexString, charHexString_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofHexToChar: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofHexToChar: Unknown exception");
  }
  return lua_error(L);
}

/** float ofHexToFloat(const string &floatHexString)
 * api/openFrameworks/utils/ofUtils.h:146
 */
static int ofHexToFloat(lua_State *L) {
  try {
    size_t floatHexString_sz_;
    const char *floatHexString = dub_checklstring(L, 1, &floatHexString_sz_);
    lua_pushnumber(L, ofHexToFloat(std::string(floatHexString, floatHexString_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofHexToFloat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofHexToFloat: Unknown exception");
  }
  return lua_error(L);
}

/** string ofHexToString(const string &stringHexString)
 * api/openFrameworks/utils/ofUtils.h:147
 */
static int ofHexToString(lua_State *L) {
  try {
    size_t stringHexString_sz_;
    const char *stringHexString = dub_checklstring(L, 1, &stringHexString_sz_);
    lua_pushlstring(L, ofHexToString(std::string(stringHexString, stringHexString_sz_)).data(), ofHexToString(std::string(stringHexString, stringHexString_sz_)).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofHexToString: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofHexToString: Unknown exception");
  }
  return lua_error(L);
}

/** int ofToInt(const string &intString)
 * api/openFrameworks/utils/ofUtils.h:149
 */
static int ofToInt(lua_State *L) {
  try {
    size_t intString_sz_;
    const char *intString = dub_checklstring(L, 1, &intString_sz_);
    lua_pushnumber(L, ofToInt(std::string(intString, intString_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofToInt: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofToInt: Unknown exception");
  }
  return lua_error(L);
}

/** char ofToChar(const string &charString)
 * api/openFrameworks/utils/ofUtils.h:150
 */
static int ofToChar(lua_State *L) {
  try {
    size_t charString_sz_;
    const char *charString = dub_checklstring(L, 1, &charString_sz_);
    lua_pushnumber(L, ofToChar(std::string(charString, charString_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofToChar: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofToChar: Unknown exception");
  }
  return lua_error(L);
}

/** float ofToFloat(const string &floatString)
 * api/openFrameworks/utils/ofUtils.h:151
 */
static int ofToFloat(lua_State *L) {
  try {
    size_t floatString_sz_;
    const char *floatString = dub_checklstring(L, 1, &floatString_sz_);
    lua_pushnumber(L, ofToFloat(std::string(floatString, floatString_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofToFloat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofToFloat: Unknown exception");
  }
  return lua_error(L);
}

/** double ofToDouble(const string &doubleString)
 * api/openFrameworks/utils/ofUtils.h:152
 */
static int ofToDouble(lua_State *L) {
  try {
    size_t doubleString_sz_;
    const char *doubleString = dub_checklstring(L, 1, &doubleString_sz_);
    lua_pushnumber(L, ofToDouble(std::string(doubleString, doubleString_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofToDouble: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofToDouble: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofToBool(const string &boolString)
 * api/openFrameworks/utils/ofUtils.h:153
 */
static int ofToBool(lua_State *L) {
  try {
    size_t boolString_sz_;
    const char *boolString = dub_checklstring(L, 1, &boolString_sz_);
    lua_pushboolean(L, ofToBool(std::string(boolString, boolString_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofToBool: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofToBool: Unknown exception");
  }
  return lua_error(L);
}

/** string ofToBinary(const char *value)
 * api/openFrameworks/utils/ofUtils.h:170
 */
static int ofToBinary(lua_State *L) {
  try {
    const char *value = dub_checkstring(L, 1);
    lua_pushlstring(L, ofToBinary(value).data(), ofToBinary(value).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofToBinary: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofToBinary: Unknown exception");
  }
  return lua_error(L);
}

/** int ofBinaryToInt(const string &value)
 * api/openFrameworks/utils/ofUtils.h:172
 */
static int ofBinaryToInt(lua_State *L) {
  try {
    size_t value_sz_;
    const char *value = dub_checklstring(L, 1, &value_sz_);
    lua_pushnumber(L, ofBinaryToInt(std::string(value, value_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBinaryToInt: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBinaryToInt: Unknown exception");
  }
  return lua_error(L);
}

/** char ofBinaryToChar(const string &value)
 * api/openFrameworks/utils/ofUtils.h:173
 */
static int ofBinaryToChar(lua_State *L) {
  try {
    size_t value_sz_;
    const char *value = dub_checklstring(L, 1, &value_sz_);
    lua_pushnumber(L, ofBinaryToChar(std::string(value, value_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBinaryToChar: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBinaryToChar: Unknown exception");
  }
  return lua_error(L);
}

/** float ofBinaryToFloat(const string &value)
 * api/openFrameworks/utils/ofUtils.h:174
 */
static int ofBinaryToFloat(lua_State *L) {
  try {
    size_t value_sz_;
    const char *value = dub_checklstring(L, 1, &value_sz_);
    lua_pushnumber(L, ofBinaryToFloat(std::string(value, value_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBinaryToFloat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBinaryToFloat: Unknown exception");
  }
  return lua_error(L);
}

/** string ofBinaryToString(const string &value)
 * api/openFrameworks/utils/ofUtils.h:175
 */
static int ofBinaryToString(lua_State *L) {
  try {
    size_t value_sz_;
    const char *value = dub_checklstring(L, 1, &value_sz_);
    lua_pushlstring(L, ofBinaryToString(std::string(value, value_sz_)).data(), ofBinaryToString(std::string(value, value_sz_)).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofBinaryToString: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofBinaryToString: Unknown exception");
  }
  return lua_error(L);
}

/** string ofGetVersionInfo()
 * api/openFrameworks/utils/ofUtils.h:177
 */
static int ofGetVersionInfo(lua_State *L) {
  try {
    lua_pushlstring(L, ofGetVersionInfo().data(), ofGetVersionInfo().length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetVersionInfo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetVersionInfo: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSaveScreen(string filename)
 * api/openFrameworks/utils/ofUtils.h:179
 */
static int ofSaveScreen(lua_State *L) {
  try {
    size_t filename_sz_;
    const char *filename = dub_checklstring(L, 1, &filename_sz_);
    ofSaveScreen(std::string(filename, filename_sz_));
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSaveScreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSaveScreen: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSaveFrame(bool bUseViewport=false)
 * api/openFrameworks/utils/ofUtils.h:180
 */
static int ofSaveFrame(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      bool bUseViewport = dub_checkboolean(L, 1);
      ofSaveFrame(bUseViewport);
      return 0;
    } else {
      ofSaveFrame();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSaveFrame: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSaveFrame: Unknown exception");
  }
  return lua_error(L);
}

/** void ofSaveViewport(string filename)
 * api/openFrameworks/utils/ofUtils.h:181
 */
static int ofSaveViewport(lua_State *L) {
  try {
    size_t filename_sz_;
    const char *filename = dub_checklstring(L, 1, &filename_sz_);
    ofSaveViewport(std::string(filename, filename_sz_));
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSaveViewport: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSaveViewport: Unknown exception");
  }
  return lua_error(L);
}

/** vector<string> ofSplitString(const string &source, const string &delimiter, bool ignoreEmpty=false, bool trim=false)
 * api/openFrameworks/utils/ofUtils.h:184
 */
static int ofSplitString(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      size_t source_sz_;
      const char *source = dub_checklstring(L, 1, &source_sz_);
      size_t delimiter_sz_;
      const char *delimiter = dub_checklstring(L, 2, &delimiter_sz_);
      bool ignoreEmpty = dub_checkboolean(L, 3);
      bool trim = dub_checkboolean(L, 4);
      dub_pushudata(L, new vector< string >(ofSplitString(std::string(source, source_sz_), std::string(delimiter, delimiter_sz_), ignoreEmpty, trim)), "vector< string >", true);
      return 1;
    } else if (top__ >= 3) {
      size_t source_sz_;
      const char *source = dub_checklstring(L, 1, &source_sz_);
      size_t delimiter_sz_;
      const char *delimiter = dub_checklstring(L, 2, &delimiter_sz_);
      bool ignoreEmpty = dub_checkboolean(L, 3);
      dub_pushudata(L, new vector< string >(ofSplitString(std::string(source, source_sz_), std::string(delimiter, delimiter_sz_), ignoreEmpty)), "vector< string >", true);
      return 1;
    } else {
      size_t source_sz_;
      const char *source = dub_checklstring(L, 1, &source_sz_);
      size_t delimiter_sz_;
      const char *delimiter = dub_checklstring(L, 2, &delimiter_sz_);
      dub_pushudata(L, new vector< string >(ofSplitString(std::string(source, source_sz_), std::string(delimiter, delimiter_sz_))), "vector< string >", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSplitString: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSplitString: Unknown exception");
  }
  return lua_error(L);
}

/** string ofJoinString(vector< string > stringElements, const string &delimiter)
 * api/openFrameworks/utils/ofUtils.h:185
 */
static int ofJoinString(lua_State *L) {
  try {
    vector< string > *stringElements = *((vector< string > **)dub_checksdata(L, 1, "vector< string >"));
    size_t delimiter_sz_;
    const char *delimiter = dub_checklstring(L, 2, &delimiter_sz_);
    lua_pushlstring(L, ofJoinString(*stringElements, std::string(delimiter, delimiter_sz_)).data(), ofJoinString(*stringElements, std::string(delimiter, delimiter_sz_)).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofJoinString: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofJoinString: Unknown exception");
  }
  return lua_error(L);
}

/** bool ofIsStringInString(string haystack, string needle)
 * api/openFrameworks/utils/ofUtils.h:187
 */
static int ofIsStringInString(lua_State *L) {
  try {
    size_t haystack_sz_;
    const char *haystack = dub_checklstring(L, 1, &haystack_sz_);
    size_t needle_sz_;
    const char *needle = dub_checklstring(L, 2, &needle_sz_);
    lua_pushboolean(L, ofIsStringInString(std::string(haystack, haystack_sz_), std::string(needle, needle_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofIsStringInString: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofIsStringInString: Unknown exception");
  }
  return lua_error(L);
}

/** string ofToLower(const string &src)
 * api/openFrameworks/utils/ofUtils.h:189
 */
static int ofToLower(lua_State *L) {
  try {
    size_t src_sz_;
    const char *src = dub_checklstring(L, 1, &src_sz_);
    lua_pushlstring(L, ofToLower(std::string(src, src_sz_)).data(), ofToLower(std::string(src, src_sz_)).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofToLower: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofToLower: Unknown exception");
  }
  return lua_error(L);
}

/** string ofToUpper(const string &src)
 * api/openFrameworks/utils/ofUtils.h:190
 */
static int ofToUpper(lua_State *L) {
  try {
    size_t src_sz_;
    const char *src = dub_checklstring(L, 1, &src_sz_);
    lua_pushlstring(L, ofToUpper(std::string(src, src_sz_)).data(), ofToUpper(std::string(src, src_sz_)).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofToUpper: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofToUpper: Unknown exception");
  }
  return lua_error(L);
}

/** string ofVAArgsToString(const char *format, va_list args)
 * api/openFrameworks/utils/ofUtils.h:193
 */
static int ofVAArgsToString(lua_State *L) {
  try {
    const char *format = dub_checkstring(L, 1);
    va_list *args = *((va_list **)dub_checksdata(L, 2, "va"));
    lua_pushlstring(L, ofVAArgsToString(format, *args).data(), ofVAArgsToString(format, *args).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofVAArgsToString: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofVAArgsToString: Unknown exception");
  }
  return lua_error(L);
}

/** string ofSystem(string command)
 * api/openFrameworks/utils/ofUtils.h:195
 */
static int ofSystem(lua_State *L) {
  try {
    size_t command_sz_;
    const char *command = dub_checklstring(L, 1, &command_sz_);
    lua_pushlstring(L, ofSystem(std::string(command, command_sz_)).data(), ofSystem(std::string(command, command_sz_)).length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofSystem: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofSystem: Unknown exception");
  }
  return lua_error(L);
}

/** ofTargetPlatform ofGetTargetPlatform()
 * api/openFrameworks/utils/ofUtils.h:197
 */
static int ofGetTargetPlatform(lua_State *L) {
  try {
    lua_pushnumber(L, ofGetTargetPlatform());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "ofGetTargetPlatform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "ofGetTargetPlatform: Unknown exception");
  }
  return lua_error(L);
}

/** ofVec2f operator+(float f, const ofVec2f &vec)
 * api/openFrameworks/math/ofVec2f.h:223
 */
static int operator_add(lua_State *L) {
  try {
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
      float f = dub_checknumber(L, 1);
      ofVec3f *vec = *((ofVec3f **)ptr2__);
      dub_pushudata(L, new ofVec3f(operator+(f, *vec)), "ofVec3f", true);
      return 1;
    } else if ( (ptr2__ = dub_issdata(L, 2, "ofVec2f", type__)) ) {
      float f = dub_checknumber(L, 1);
      ofVec2f *vec = *((ofVec2f **)ptr2__);
      dub_pushudata(L, new ofVec2f(operator+(f, *vec)), "ofVec2f", true);
      return 1;
    } else {
      float f = dub_checknumber(L, 1);
      ofVec4f *vec = *((ofVec4f **)dub_checksdata(L, 2, "ofVec4f"));
      dub_pushudata(L, new ofVec4f(operator+(f, *vec)), "ofVec4f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "operator+: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "operator+: Unknown exception");
  }
  return lua_error(L);
}

/** ofVec2f operator-(float f, const ofVec2f &vec)
 * api/openFrameworks/math/ofVec2f.h:224
 */
static int operator_sub(lua_State *L) {
  try {
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
      float f = dub_checknumber(L, 1);
      ofVec3f *vec = *((ofVec3f **)ptr2__);
      dub_pushudata(L, new ofVec3f(operator-(f, *vec)), "ofVec3f", true);
      return 1;
    } else if ( (ptr2__ = dub_issdata(L, 2, "ofVec2f", type__)) ) {
      float f = dub_checknumber(L, 1);
      ofVec2f *vec = *((ofVec2f **)ptr2__);
      dub_pushudata(L, new ofVec2f(operator-(f, *vec)), "ofVec2f", true);
      return 1;
    } else {
      float f = dub_checknumber(L, 1);
      ofVec4f *vec = *((ofVec4f **)dub_checksdata(L, 2, "ofVec4f"));
      dub_pushudata(L, new ofVec4f(operator-(f, *vec)), "ofVec4f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "operator-: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "operator-: Unknown exception");
  }
  return lua_error(L);
}

/** ofVec2f operator*(float f, const ofVec2f &vec)
 * api/openFrameworks/math/ofVec2f.h:225
 */
static int operator_mul(lua_State *L) {
  try {
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
      float f = dub_checknumber(L, 1);
      ofVec3f *vec = *((ofVec3f **)ptr2__);
      dub_pushudata(L, new ofVec3f(operator*(f, *vec)), "ofVec3f", true);
      return 1;
    } else if ( (ptr2__ = dub_issdata(L, 2, "ofVec2f", type__)) ) {
      float f = dub_checknumber(L, 1);
      ofVec2f *vec = *((ofVec2f **)ptr2__);
      dub_pushudata(L, new ofVec2f(operator*(f, *vec)), "ofVec2f", true);
      return 1;
    } else {
      float f = dub_checknumber(L, 1);
      ofVec4f *vec = *((ofVec4f **)dub_checksdata(L, 2, "ofVec4f"));
      dub_pushudata(L, new ofVec4f(operator*(f, *vec)), "ofVec4f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "operator*: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "operator*: Unknown exception");
  }
  return lua_error(L);
}

/** ofVec2f operator/(float f, const ofVec2f &vec)
 * api/openFrameworks/math/ofVec2f.h:226
 */
static int operator_div(lua_State *L) {
  try {
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
      float f = dub_checknumber(L, 1);
      ofVec3f *vec = *((ofVec3f **)ptr2__);
      dub_pushudata(L, new ofVec3f(operator/(f, *vec)), "ofVec3f", true);
      return 1;
    } else if ( (ptr2__ = dub_issdata(L, 2, "ofVec2f", type__)) ) {
      float f = dub_checknumber(L, 1);
      ofVec2f *vec = *((ofVec2f **)ptr2__);
      dub_pushudata(L, new ofVec2f(operator/(f, *vec)), "ofVec2f", true);
      return 1;
    } else {
      float f = dub_checknumber(L, 1);
      ofVec4f *vec = *((ofVec4f **)dub_checksdata(L, 2, "ofVec4f"));
      dub_pushudata(L, new ofVec4f(operator/(f, *vec)), "ofVec4f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "operator/: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "operator/: Unknown exception");
  }
  return lua_error(L);
}

// --=============================================== FUNCTIONS
static const struct luaL_Reg of_functions[] = {
  { "ofDrawAxis"   , ofDrawAxis           },
  { "ofDrawGrid"   , ofDrawGrid           },
  { "ofDrawGridPlane", ofDrawGridPlane      },
  { "ofDrawArrow"  , ofDrawArrow          },
  { "ofDrawRotationAxes", ofDrawRotationAxes   },
  { "ofSetupOpenGL", ofSetupOpenGL        },
  { "ofRunApp"     , ofRunApp             },
  { "ofGetAppPtr"  , ofGetAppPtr          },
  { "ofSetAppPtr"  , ofSetAppPtr          },
  { "ofExit"       , ofExit               },
  { "ofGetFrameRate", ofGetFrameRate       },
  { "ofGetFrameNum", ofGetFrameNum        },
  { "ofSetFrameRate", ofSetFrameRate       },
  { "ofSleepMillis", ofSleepMillis        },
  { "ofGetLastFrameTime", ofGetLastFrameTime   },
  { "ofSetOrientation", ofSetOrientation     },
  { "ofGetOrientation", ofGetOrientation     },
  { "ofHideCursor" , ofHideCursor         },
  { "ofShowCursor" , ofShowCursor         },
  { "ofGetWindowPositionX", ofGetWindowPositionX },
  { "ofGetWindowPositionY", ofGetWindowPositionY },
  { "ofGetScreenWidth", ofGetScreenWidth     },
  { "ofGetScreenHeight", ofGetScreenHeight    },
  { "ofGetWindowMode", ofGetWindowMode      },
  { "ofGetWidth"   , ofGetWidth           },
  { "ofGetHeight"  , ofGetHeight          },
  { "ofGetWindowWidth", ofGetWindowWidth     },
  { "ofGetWindowHeight", ofGetWindowHeight    },
  { "ofDoesHWOrientation", ofDoesHWOrientation  },
  { "ofGetWindowSize", ofGetWindowSize      },
  { "ofGetWindowRect", ofGetWindowRect      },
  { "ofGetWindowPtr", ofGetWindowPtr       },
  { "ofSetWindowPosition", ofSetWindowPosition  },
  { "ofSetWindowShape", ofSetWindowShape     },
  { "ofSetWindowTitle", ofSetWindowTitle     },
  { "ofEnableSetupScreen", ofEnableSetupScreen  },
  { "ofDisableSetupScreen", ofDisableSetupScreen },
  { "ofSetFullscreen", ofSetFullscreen      },
  { "ofToggleFullscreen", ofToggleFullscreen   },
  { "ofSetVerticalSync", ofSetVerticalSync    },
  { "ofDrawBitmapCharacterStart", ofDrawBitmapCharacterStart },
  { "ofDrawBitmapCharacter", ofDrawBitmapCharacter },
  { "ofDrawBitmapCharacterEnd", ofDrawBitmapCharacterEnd },
  { "ofNotifyEvent", ofNotifyEvent        },
  { "ofGetMousePressed", ofGetMousePressed    },
  { "ofGetKeyPressed", ofGetKeyPressed      },
  { "ofGetMouseX"  , ofGetMouseX          },
  { "ofGetMouseY"  , ofGetMouseY          },
  { "ofGetPreviousMouseX", ofGetPreviousMouseX  },
  { "ofGetPreviousMouseY", ofGetPreviousMouseY  },
  { "ofSetEscapeQuitsApp", ofSetEscapeQuitsApp  },
  { "exitApp"      , exitApp              },
  { "ofSendMessage", ofSendMessage        },
  { "ofEvents"     , ofEvents             },
  { "ofNotifySetup", ofNotifySetup        },
  { "ofNotifyUpdate", ofNotifyUpdate       },
  { "ofNotifyDraw" , ofNotifyDraw         },
  { "ofNotifyKeyPressed", ofNotifyKeyPressed   },
  { "ofNotifyKeyReleased", ofNotifyKeyReleased  },
  { "ofNotifyKeyEvent", ofNotifyKeyEvent     },
  { "ofNotifyMousePressed", ofNotifyMousePressed },
  { "ofNotifyMouseReleased", ofNotifyMouseReleased },
  { "ofNotifyMouseDragged", ofNotifyMouseDragged },
  { "ofNotifyMouseMoved", ofNotifyMouseMoved   },
  { "ofNotifyMouseEvent", ofNotifyMouseEvent   },
  { "ofNotifyExit" , ofNotifyExit         },
  { "ofNotifyWindowResized", ofNotifyWindowResized },
  { "ofNotifyWindowEntry", ofNotifyWindowEntry  },
  { "ofNotifyDragEvent", ofNotifyDragEvent    },
  { "ofBufferFromFile", ofBufferFromFile     },
  { "ofBufferToFile", ofBufferToFile       },
  { "ofGetGLPolyMode", ofGetGLPolyMode      },
  { "ofGetOFPolyMode", ofGetOFPolyMode      },
  { "ofGetGLPrimitiveMode", ofGetGLPrimitiveMode },
  { "ofGetOFPrimitiveMode", ofGetOFPrimitiveMode },
  { "ofGetGLInternalFormatFromPixelFormat", ofGetGLInternalFormatFromPixelFormat },
  { "ofGetGLTypeFromPixelFormat", ofGetGLTypeFromPixelFormat },
  { "ofCheckGLExtension", ofCheckGLExtension   },
  { "ofGLIsFixedPipeline", ofGLIsFixedPipeline  },
  { "ofGetGLES2Renderer", ofGetGLES2Renderer   },
  { "ofGetGLRenderer", ofGetGLRenderer      },
  { "ofGetAttrLocationPosition", ofGetAttrLocationPosition },
  { "ofGetAttrLocationColor", ofGetAttrLocationColor },
  { "ofGetAttrLocationNormal", ofGetAttrLocationNormal },
  { "ofGetAttrLocationTexCoord", ofGetAttrLocationTexCoord },
  { "ofEnableVertices", ofEnableVertices     },
  { "ofEnableTexCoords", ofEnableTexCoords    },
  { "ofEnableColorCoords", ofEnableColorCoords  },
  { "ofEnableNormals", ofEnableNormals      },
  { "ofDisableVertices", ofDisableVertices    },
  { "ofDisableTexCoords", ofDisableTexCoords   },
  { "ofDisableColorCoords", ofDisableColorCoords },
  { "ofDisableNormals", ofDisableNormals     },
  { "ofSetCurrentRenderer", ofSetCurrentRenderer },
  { "ofGetCurrentRenderer", ofGetCurrentRenderer },
  { "ofBeginSaveScreenAsPDF", ofBeginSaveScreenAsPDF },
  { "ofEndSaveScreenAsPDF", ofEndSaveScreenAsPDF },
  { "ofPushView"   , ofPushView           },
  { "ofPopView"    , ofPopView            },
  { "ofViewport"   , ofViewport           },
  { "ofSetupScreenPerspective", ofSetupScreenPerspective },
  { "ofSetupScreenOrtho", ofSetupScreenOrtho   },
  { "ofGetCurrentViewport", ofGetCurrentViewport },
  { "ofGetViewportWidth", ofGetViewportWidth   },
  { "ofGetViewportHeight", ofGetViewportHeight  },
  { "ofOrientationToDegrees", ofOrientationToDegrees },
  { "ofSetCoordHandedness", ofSetCoordHandedness },
  { "ofGetCoordHandedness", ofGetCoordHandedness },
  { "ofPushMatrix" , ofPushMatrix         },
  { "ofPopMatrix"  , ofPopMatrix          },
  { "ofTranslate"  , ofTranslate          },
  { "ofScale"      , ofScale              },
  { "ofRotate"     , ofRotate             },
  { "ofRotateX"    , ofRotateX            },
  { "ofRotateY"    , ofRotateY            },
  { "ofRotateZ"    , ofRotateZ            },
  { "ofLoadIdentityMatrix", ofLoadIdentityMatrix },
  { "ofLoadMatrix" , ofLoadMatrix         },
  { "ofMultMatrix" , ofMultMatrix         },
  { "ofSetMatrixMode", ofSetMatrixMode      },
  { "ofSetupGraphicDefaults", ofSetupGraphicDefaults },
  { "ofSetupScreen", ofSetupScreen        },
  { "ofGetRectMode", ofGetRectMode        },
  { "ofSetCircleResolution", ofSetCircleResolution },
  { "ofSetCurveResolution", ofSetCurveResolution },
  { "ofSetSphereResolution", ofSetSphereResolution },
  { "ofNoFill"     , ofNoFill             },
  { "ofFill"       , ofFill               },
  { "ofGetFill"    , ofGetFill            },
  { "ofSetLineWidth", ofSetLineWidth       },
  { "ofSetColor"   , ofSetColor           },
  { "ofSetHexColor", ofSetHexColor        },
  { "ofEnableBlendMode", ofEnableBlendMode    },
  { "ofDisableBlendMode", ofDisableBlendMode   },
  { "ofEnablePointSprites", ofEnablePointSprites },
  { "ofDisablePointSprites", ofDisablePointSprites },
  { "ofEnableAlphaBlending", ofEnableAlphaBlending },
  { "ofDisableAlphaBlending", ofDisableAlphaBlending },
  { "ofEnableSmoothing", ofEnableSmoothing    },
  { "ofDisableSmoothing", ofDisableSmoothing   },
  { "ofGetStyle"   , ofGetStyle           },
  { "ofSetStyle"   , ofSetStyle           },
  { "ofPushStyle"  , ofPushStyle          },
  { "ofPopStyle"   , ofPopStyle           },
  { "ofSetPolyMode", ofSetPolyMode        },
  { "ofSetRectMode", ofSetRectMode        },
  { "ofBgColorPtr" , ofBgColorPtr         },
  { "ofBackground" , ofBackground         },
  { "ofBackgroundHex", ofBackgroundHex      },
  { "ofBackgroundGradient", ofBackgroundGradient },
  { "ofSetBackgroundColor", ofSetBackgroundColor },
  { "ofSetBackgroundColorHex", ofSetBackgroundColorHex },
  { "ofSetBackgroundAuto", ofSetBackgroundAuto  },
  { "ofClear"      , ofClear              },
  { "ofClearAlpha" , ofClearAlpha         },
  { "ofbClearBg"   , ofbClearBg           },
  { "ofTriangle"   , ofTriangle           },
  { "ofCircle"     , ofCircle             },
  { "ofEllipse"    , ofEllipse            },
  { "ofLine"       , ofLine               },
  { "ofRect"       , ofRect               },
  { "ofRectRounded", ofRectRounded        },
  { "ofCurve"      , ofCurve              },
  { "ofBezier"     , ofBezier             },
  { "ofBeginShape" , ofBeginShape         },
  { "ofVertex"     , ofVertex             },
  { "ofVertices"   , ofVertices           },
  { "ofCurveVertex", ofCurveVertex        },
  { "ofCurveVertices", ofCurveVertices      },
  { "ofBezierVertex", ofBezierVertex       },
  { "ofEndShape"   , ofEndShape           },
  { "ofNextContour", ofNextContour        },
  { "ofSphere"     , ofSphere             },
  { "ofBox"        , ofBox                },
  { "ofCone"       , ofCone               },
  { "ofSetDrawBitmapMode", ofSetDrawBitmapMode  },
  { "ofDrawBitmapString", ofDrawBitmapString   },
  { "ofDrawBitmapStringHighlight", ofDrawBitmapStringHighlight },
  { "ofLoadImage"  , ofLoadImage          },
  { "ofSaveImage"  , ofSaveImage          },
  { "ofCloseFreeImage", ofCloseFreeImage     },
  { "ofEnableLighting", ofEnableLighting     },
  { "ofDisableLighting", ofDisableLighting    },
  { "ofEnableSeparateSpecularLight", ofEnableSeparateSpecularLight },
  { "ofDisableSeparateSpecularLight", ofDisableSeparateSpecularLight },
  { "ofGetLightingEnabled", ofGetLightingEnabled },
  { "ofSetSmoothLighting", ofSetSmoothLighting  },
  { "ofSetGlobalAmbientColor", ofSetGlobalAmbientColor },
  { "ofSetLogLevel", ofSetLogLevel        },
  { "ofGetLogLevel", ofGetLogLevel        },
  { "ofSetLoggerChannel", ofSetLoggerChannel   },
  { "ofGetLogLevelName", ofGetLogLevelName    },
  { "ofLogToFile"  , ofLogToFile          },
  { "ofLogToConsole", ofLogToConsole       },
  { "ofNextPow2"   , ofNextPow2           },
  { "ofSeedRandom" , ofSeedRandom         },
  { "ofRandom"     , ofRandom             },
  { "ofRandomf"    , ofRandomf            },
  { "ofRandomuf"   , ofRandomuf           },
  { "ofNormalize"  , ofNormalize          },
  { "ofMap"        , ofMap                },
  { "ofClamp"      , ofClamp              },
  { "ofLerp"       , ofLerp               },
  { "ofDist"       , ofDist               },
  { "ofDistSquared", ofDistSquared        },
  { "ofSign"       , ofSign               },
  { "ofInRange"    , ofInRange            },
  { "ofRadToDeg"   , ofRadToDeg           },
  { "ofDegToRad"   , ofDegToRad           },
  { "ofLerpDegrees", ofLerpDegrees        },
  { "ofLerpRadians", ofLerpRadians        },
  { "ofAngleDifferenceDegrees", ofAngleDifferenceDegrees },
  { "ofAngleDifferenceRadians", ofAngleDifferenceRadians },
  { "ofWrapRadians", ofWrapRadians        },
  { "ofWrapDegrees", ofWrapDegrees        },
  { "ofRandomWidth", ofRandomWidth        },
  { "ofRandomHeight", ofRandomHeight       },
  { "ofNoise"      , ofNoise              },
  { "ofSignedNoise", ofSignedNoise        },
  { "ofInsidePoly" , ofInsidePoly         },
  { "ofLineSegmentIntersection", ofLineSegmentIntersection },
  { "ofBezierPoint", ofBezierPoint        },
  { "ofCurvePoint" , ofCurvePoint         },
  { "ofBezierTangent", ofBezierTangent      },
  { "ofCurveTangent", ofCurveTangent       },
  { "grad1"        , grad1                },
  { "grad2"        , grad2                },
  { "grad3"        , grad3                },
  { "grad4"        , grad4                },
  { "_slang_library_noise1", _slang_library_noise1 },
  { "_slang_library_noise2", _slang_library_noise2 },
  { "_slang_library_noise3", _slang_library_noise3 },
  { "_slang_library_noise4", _slang_library_noise4 },
  { "ofSoundStopAll", ofSoundStopAll       },
  { "ofSoundSetVolume", ofSoundSetVolume     },
  { "ofSoundUpdate", ofSoundUpdate        },
  { "ofSoundGetSpectrum", ofSoundGetSpectrum   },
  { "ofSoundShutdown", ofSoundShutdown      },
  { "ofSoundStreamSetup", ofSoundStreamSetup   },
  { "ofSoundStreamStop", ofSoundStreamStop    },
  { "ofSoundStreamStart", ofSoundStreamStart   },
  { "ofSoundStreamClose", ofSoundStreamClose   },
  { "ofSoundStreamListDevices", ofSoundStreamListDevices },
  { "ofSystemAlertDialog", ofSystemAlertDialog  },
  { "ofSystemLoadDialog", ofSystemLoadDialog   },
  { "ofSystemSaveDialog", ofSystemSaveDialog   },
  { "ofSystemTextBoxDialog", ofSystemTextBoxDialog },
  { "ofGetGlInternalFormat", ofGetGlInternalFormat },
  { "ofGetGlFormatAndType", ofGetGlFormatAndType },
  { "ofGetImageTypeFromGLType", ofGetImageTypeFromGLType },
  { "ofGetUsingArbTex", ofGetUsingArbTex     },
  { "ofEnableArbTex", ofEnableArbTex       },
  { "ofDisableArbTex", ofDisableArbTex      },
  { "ofGetUsingNormalizedTexCoords", ofGetUsingNormalizedTexCoords },
  { "ofEnableNormalizedTexCoords", ofEnableNormalizedTexCoords },
  { "ofDisableNormalizedTexCoords", ofDisableNormalizedTexCoords },
  { "ofSetTextureWrap", ofSetTextureWrap     },
  { "ofGetUsingCustomTextureWrap", ofGetUsingCustomTextureWrap },
  { "ofRestoreTextureWrap", ofRestoreTextureWrap },
  { "ofSetMinMagFilters", ofSetMinMagFilters   },
  { "ofGetUsingCustomMinMagFilters", ofGetUsingCustomMinMagFilters },
  { "ofRestoreMinMagFilters", ofRestoreMinMagFilters },
  { "ofEnableTextureEdgeHack", ofEnableTextureEdgeHack },
  { "ofDisableTextureEdgeHack", ofDisableTextureEdgeHack },
  { "ofLoadURL"    , ofLoadURL            },
  { "ofLoadURLAsync", ofLoadURLAsync       },
  { "ofSaveURLTo"  , ofSaveURLTo          },
  { "ofSaveURLAsync", ofSaveURLAsync       },
  { "ofRemoveURLRequest", ofRemoveURLRequest   },
  { "ofRemoveAllURLRequests", ofRemoveAllURLRequests },
  { "ofResetElapsedTimeCounter", ofResetElapsedTimeCounter },
  { "ofGetElapsedTimef", ofGetElapsedTimef    },
  { "ofGetElapsedTimeMillis", ofGetElapsedTimeMillis },
  { "ofGetElapsedTimeMicros", ofGetElapsedTimeMicros },
  { "ofGetSeconds" , ofGetSeconds         },
  { "ofGetMinutes" , ofGetMinutes         },
  { "ofGetHours"   , ofGetHours           },
  { "ofGetUnixTime", ofGetUnixTime        },
  { "ofGetSystemTime", ofGetSystemTime      },
  { "ofGetSystemTimeMicros", ofGetSystemTimeMicros },
  { "ofGetTimestampString", ofGetTimestampString },
  { "ofGetYear"    , ofGetYear            },
  { "ofGetMonth"   , ofGetMonth           },
  { "ofGetDay"     , ofGetDay             },
  { "ofGetWeekday" , ofGetWeekday         },
  { "ofLaunchBrowser", ofLaunchBrowser      },
  { "ofEnableDataPath", ofEnableDataPath     },
  { "ofDisableDataPath", ofDisableDataPath    },
  { "ofToDataPath" , ofToDataPath         },
  { "ofSetDataPathRoot", ofSetDataPathRoot    },
  { "ofToHex"      , ofToHex              },
  { "ofHexToInt"   , ofHexToInt           },
  { "ofHexToChar"  , ofHexToChar          },
  { "ofHexToFloat" , ofHexToFloat         },
  { "ofHexToString", ofHexToString        },
  { "ofToInt"      , ofToInt              },
  { "ofToChar"     , ofToChar             },
  { "ofToFloat"    , ofToFloat            },
  { "ofToDouble"   , ofToDouble           },
  { "ofToBool"     , ofToBool             },
  { "ofToBinary"   , ofToBinary           },
  { "ofBinaryToInt", ofBinaryToInt        },
  { "ofBinaryToChar", ofBinaryToChar       },
  { "ofBinaryToFloat", ofBinaryToFloat      },
  { "ofBinaryToString", ofBinaryToString     },
  { "ofGetVersionInfo", ofGetVersionInfo     },
  { "ofSaveScreen" , ofSaveScreen         },
  { "ofSaveFrame"  , ofSaveFrame          },
  { "ofSaveViewport", ofSaveViewport       },
  { "ofSplitString", ofSplitString        },
  { "ofJoinString" , ofJoinString         },
  { "ofIsStringInString", ofIsStringInString   },
  { "ofToLower"    , ofToLower            },
  { "ofToUpper"    , ofToUpper            },
  { "ofVAArgsToString", ofVAArgsToString     },
  { "ofSystem"     , ofSystem             },
  { "ofGetTargetPlatform", ofGetTargetPlatform  },
  { "__add"        , operator_add         },
  { "__sub"        , operator_sub         },
  { "__mul"        , operator_mul         },
  { "__div"        , operator_div         },
  { NULL, NULL},
};

// --=============================================== CONSTANTS
static const struct dub_const_Reg of_const[] = {
  { "OF_LOOP_NONE" , OF_LOOP_NONE         },
  { "OF_LOOP_PALINDROME", OF_LOOP_PALINDROME   },
  { "OF_LOOP_NORMAL", OF_LOOP_NORMAL       },
  { "OF_TARGET_OSX", OF_TARGET_OSX        },
  { "OF_TARGET_WINGCC", OF_TARGET_WINGCC     },
  { "OF_TARGET_WINVS", OF_TARGET_WINVS      },
  { "OF_TARGET_IPHONE", OF_TARGET_IPHONE     },
  { "OF_TARGET_ANDROID", OF_TARGET_ANDROID    },
  { "OF_TARGET_LINUX", OF_TARGET_LINUX      },
  { "OF_TARGET_LINUX64", OF_TARGET_LINUX64    },
  { "OF_TARGET_LINUXARMV6L", OF_TARGET_LINUXARMV6L },
  { "OF_TARGET_LINUXARMV7L", OF_TARGET_LINUXARMV7L },
  { "OF_OUTLINE"   , OF_OUTLINE           },
  { "OF_FILLED"    , OF_FILLED            },
  { "OF_WINDOW"    , OF_WINDOW            },
  { "OF_FULLSCREEN", OF_FULLSCREEN        },
  { "OF_GAME_MODE" , OF_GAME_MODE         },
  { "OF_ASPECT_RATIO_IGNORE", OF_ASPECT_RATIO_IGNORE },
  { "OF_ASPECT_RATIO_KEEP", OF_ASPECT_RATIO_KEEP },
  { "OF_ASPECT_RATIO_KEEP_BY_EXPANDING", OF_ASPECT_RATIO_KEEP_BY_EXPANDING },
  { "OF_ALIGN_VERT_IGNORE", OF_ALIGN_VERT_IGNORE },
  { "OF_ALIGN_VERT_TOP", OF_ALIGN_VERT_TOP    },
  { "OF_ALIGN_VERT_BOTTOM", OF_ALIGN_VERT_BOTTOM },
  { "OF_ALIGN_VERT_CENTER", OF_ALIGN_VERT_CENTER },
  { "OF_ALIGN_HORZ_IGNORE", OF_ALIGN_HORZ_IGNORE },
  { "OF_ALIGN_HORZ_LEFT", OF_ALIGN_HORZ_LEFT   },
  { "OF_ALIGN_HORZ_RIGHT", OF_ALIGN_HORZ_RIGHT  },
  { "OF_ALIGN_HORZ_CENTER", OF_ALIGN_HORZ_CENTER },
  { "OF_RECTMODE_CORNER", OF_RECTMODE_CORNER   },
  { "OF_RECTMODE_CENTER", OF_RECTMODE_CENTER   },
  { "OF_SCALEMODE_FIT", OF_SCALEMODE_FIT     },
  { "OF_SCALEMODE_FILL", OF_SCALEMODE_FILL    },
  { "OF_SCALEMODE_CENTER", OF_SCALEMODE_CENTER  },
  { "OF_SCALEMODE_STRETCH_TO_FILL", OF_SCALEMODE_STRETCH_TO_FILL },
  { "OF_IMAGE_GRAYSCALE", OF_IMAGE_GRAYSCALE   },
  { "OF_IMAGE_COLOR", OF_IMAGE_COLOR       },
  { "OF_IMAGE_COLOR_ALPHA", OF_IMAGE_COLOR_ALPHA },
  { "OF_IMAGE_UNDEFINED", OF_IMAGE_UNDEFINED   },
  { "OF_PIXELS_MONO", OF_PIXELS_MONO       },
  { "OF_PIXELS_RGB", OF_PIXELS_RGB        },
  { "OF_PIXELS_RGBA", OF_PIXELS_RGBA       },
  { "OF_PIXELS_BGRA", OF_PIXELS_BGRA       },
  { "OF_PIXELS_RGB565", OF_PIXELS_RGB565     },
  { "OF_BLENDMODE_DISABLED", OF_BLENDMODE_DISABLED },
  { "OF_BLENDMODE_ALPHA", OF_BLENDMODE_ALPHA   },
  { "OF_BLENDMODE_ADD", OF_BLENDMODE_ADD     },
  { "OF_BLENDMODE_SUBTRACT", OF_BLENDMODE_SUBTRACT },
  { "OF_BLENDMODE_MULTIPLY", OF_BLENDMODE_MULTIPLY },
  { "OF_BLENDMODE_SCREEN", OF_BLENDMODE_SCREEN  },
  { "OF_ORIENTATION_DEFAULT", OF_ORIENTATION_DEFAULT },
  { "OF_ORIENTATION_180", OF_ORIENTATION_180   },
  { "OF_ORIENTATION_90_LEFT", OF_ORIENTATION_90_LEFT },
  { "OF_ORIENTATION_90_RIGHT", OF_ORIENTATION_90_RIGHT },
  { "OF_ORIENTATION_UNKNOWN", OF_ORIENTATION_UNKNOWN },
  { "OF_GRADIENT_LINEAR", OF_GRADIENT_LINEAR   },
  { "OF_GRADIENT_CIRCULAR", OF_GRADIENT_CIRCULAR },
  { "OF_GRADIENT_BAR", OF_GRADIENT_BAR      },
  { "OF_POLY_WINDING_ODD", OF_POLY_WINDING_ODD  },
  { "OF_POLY_WINDING_NONZERO", OF_POLY_WINDING_NONZERO },
  { "OF_POLY_WINDING_POSITIVE", OF_POLY_WINDING_POSITIVE },
  { "OF_POLY_WINDING_NEGATIVE", OF_POLY_WINDING_NEGATIVE },
  { "OF_POLY_WINDING_ABS_GEQ_TWO", OF_POLY_WINDING_ABS_GEQ_TWO },
  { "OF_LEFT_HANDED", OF_LEFT_HANDED       },
  { "OF_RIGHT_HANDED", OF_RIGHT_HANDED      },
  { "OF_MATRIX_MODELVIEW", OF_MATRIX_MODELVIEW  },
  { "OF_MATRIX_PROJECTION", OF_MATRIX_PROJECTION },
  { "OF_MATRIX_TEXTURE", OF_MATRIX_TEXTURE    },
  { "OF_BITMAPMODE_SIMPLE", OF_BITMAPMODE_SIMPLE },
  { "OF_BITMAPMODE_SCREEN", OF_BITMAPMODE_SCREEN },
  { "OF_BITMAPMODE_VIEWPORT", OF_BITMAPMODE_VIEWPORT },
  { "OF_BITMAPMODE_MODEL", OF_BITMAPMODE_MODEL  },
  { "OF_BITMAPMODE_MODEL_BILLBOARD", OF_BITMAPMODE_MODEL_BILLBOARD },
  { "OF_PRIMITIVE_TRIANGLES", OF_PRIMITIVE_TRIANGLES },
  { "OF_PRIMITIVE_TRIANGLE_STRIP", OF_PRIMITIVE_TRIANGLE_STRIP },
  { "OF_PRIMITIVE_TRIANGLE_FAN", OF_PRIMITIVE_TRIANGLE_FAN },
  { "OF_PRIMITIVE_LINES", OF_PRIMITIVE_LINES   },
  { "OF_PRIMITIVE_LINE_STRIP", OF_PRIMITIVE_LINE_STRIP },
  { "OF_PRIMITIVE_LINE_LOOP", OF_PRIMITIVE_LINE_LOOP },
  { "OF_PRIMITIVE_POINTS", OF_PRIMITIVE_POINTS  },
  { "OF_MESH_POINTS", OF_MESH_POINTS       },
  { "OF_MESH_WIREFRAME", OF_MESH_WIREFRAME    },
  { "OF_MESH_FILL" , OF_MESH_FILL         },
  { "OF_IMAGE_QUALITY_BEST", OF_IMAGE_QUALITY_BEST },
  { "OF_IMAGE_QUALITY_HIGH", OF_IMAGE_QUALITY_HIGH },
  { "OF_IMAGE_QUALITY_MEDIUM", OF_IMAGE_QUALITY_MEDIUM },
  { "OF_IMAGE_QUALITY_LOW", OF_IMAGE_QUALITY_LOW },
  { "OF_IMAGE_QUALITY_WORST", OF_IMAGE_QUALITY_WORST },
  { "OF_IMAGE_FORMAT_BMP", OF_IMAGE_FORMAT_BMP  },
  { "OF_IMAGE_FORMAT_ICO", OF_IMAGE_FORMAT_ICO  },
  { "OF_IMAGE_FORMAT_JPEG", OF_IMAGE_FORMAT_JPEG },
  { "OF_IMAGE_FORMAT_JNG", OF_IMAGE_FORMAT_JNG  },
  { "OF_IMAGE_FORMAT_KOALA", OF_IMAGE_FORMAT_KOALA },
  { "OF_IMAGE_FORMAT_LBM", OF_IMAGE_FORMAT_LBM  },
  { "OF_IMAGE_FORMAT_IFF", OF_IMAGE_FORMAT_IFF  },
  { "OF_IMAGE_FORMAT_MNG", OF_IMAGE_FORMAT_MNG  },
  { "OF_IMAGE_FORMAT_PBM", OF_IMAGE_FORMAT_PBM  },
  { "OF_IMAGE_FORMAT_PBMRAW", OF_IMAGE_FORMAT_PBMRAW },
  { "OF_IMAGE_FORMAT_PCD", OF_IMAGE_FORMAT_PCD  },
  { "OF_IMAGE_FORMAT_PCX", OF_IMAGE_FORMAT_PCX  },
  { "OF_IMAGE_FORMAT_PGM", OF_IMAGE_FORMAT_PGM  },
  { "OF_IMAGE_FORMAT_PGMRAW", OF_IMAGE_FORMAT_PGMRAW },
  { "OF_IMAGE_FORMAT_PNG", OF_IMAGE_FORMAT_PNG  },
  { "OF_IMAGE_FORMAT_PPM", OF_IMAGE_FORMAT_PPM  },
  { "OF_IMAGE_FORMAT_PPMRAW", OF_IMAGE_FORMAT_PPMRAW },
  { "OF_IMAGE_FORMAT_RAS", OF_IMAGE_FORMAT_RAS  },
  { "OF_IMAGE_FORMAT_TARGA", OF_IMAGE_FORMAT_TARGA },
  { "OF_IMAGE_FORMAT_TIFF", OF_IMAGE_FORMAT_TIFF },
  { "OF_IMAGE_FORMAT_WBMP", OF_IMAGE_FORMAT_WBMP },
  { "OF_IMAGE_FORMAT_PSD", OF_IMAGE_FORMAT_PSD  },
  { "OF_IMAGE_FORMAT_CUT", OF_IMAGE_FORMAT_CUT  },
  { "OF_IMAGE_FORMAT_XBM", OF_IMAGE_FORMAT_XBM  },
  { "OF_IMAGE_FORMAT_XPM", OF_IMAGE_FORMAT_XPM  },
  { "OF_IMAGE_FORMAT_DDS", OF_IMAGE_FORMAT_DDS  },
  { "OF_IMAGE_FORMAT_GIF", OF_IMAGE_FORMAT_GIF  },
  { "OF_IMAGE_FORMAT_HDR", OF_IMAGE_FORMAT_HDR  },
  { "OF_IMAGE_FORMAT_FAXG3", OF_IMAGE_FORMAT_FAXG3 },
  { "OF_IMAGE_FORMAT_SGI", OF_IMAGE_FORMAT_SGI  },
  { "OF_IMAGE_FORMAT_EXR", OF_IMAGE_FORMAT_EXR  },
  { "OF_IMAGE_FORMAT_J2K", OF_IMAGE_FORMAT_J2K  },
  { "OF_IMAGE_FORMAT_JP2", OF_IMAGE_FORMAT_JP2  },
  { "OF_IMAGE_FORMAT_PFM", OF_IMAGE_FORMAT_PFM  },
  { "OF_IMAGE_FORMAT_PICT", OF_IMAGE_FORMAT_PICT },
  { "OF_IMAGE_FORMAT_RAW", OF_IMAGE_FORMAT_RAW  },
  { "OF_LIGHT_POINT", OF_LIGHT_POINT       },
  { "OF_LIGHT_SPOT", OF_LIGHT_SPOT        },
  { "OF_LIGHT_DIRECTIONAL", OF_LIGHT_DIRECTIONAL },
  { "OF_LOG_VERBOSE", OF_LOG_VERBOSE       },
  { "OF_LOG_NOTICE", OF_LOG_NOTICE        },
  { "OF_LOG_WARNING", OF_LOG_WARNING       },
  { "OF_LOG_ERROR" , OF_LOG_ERROR         },
  { "OF_LOG_FATAL_ERROR", OF_LOG_FATAL_ERROR   },
  { "OF_LOG_SILENT", OF_LOG_SILENT        },
  { "OF_INTERPOLATE_NEAREST_NEIGHBOR", OF_INTERPOLATE_NEAREST_NEIGHBOR },
  { "OF_INTERPOLATE_BILINEAR", OF_INTERPOLATE_BILINEAR },
  { "OF_INTERPOLATE_BICUBIC", OF_INTERPOLATE_BICUBIC },
  { "OF_COMPRESS_NONE", OF_COMPRESS_NONE     },
  { "OF_COMPRESS_SRGB", OF_COMPRESS_SRGB     },
  { "OF_COMPRESS_ARB", OF_COMPRESS_ARB      },
  { NULL, 0},
};

extern "C" int luaopen_of(lua_State *L) {
  luaopen_ofBaseGLRenderer(L);
  luaopen_ofCamera(L);
  luaopen_ofColor(L);
  luaopen_ofEasyCam(L);
  luaopen_ofDragInfo(L);
  luaopen_ofEventArgs(L);
  luaopen_ofEntryEventArgs(L);
  luaopen_ofKeyEventArgs(L);
  luaopen_ofMouseEventArgs(L);
  luaopen_ofTouchEventArgs(L);
  luaopen_ofAudioEventArgs(L);
  luaopen_ofResizeEventArgs(L);
  luaopen_ofMessage(L);
  luaopen_ofCoreEvents(L);
  luaopen_ofGLES2Renderer(L);
  luaopen_ofFbo(L);
  luaopen_ofBuffer(L);
  luaopen_ofFilePath(L);
  luaopen_ofFile(L);
  luaopen_ofDirectory(L);
  luaopen_ofLight(L);
  luaopen_ofLog(L);
  luaopen_ofLogVerbose(L);
  luaopen_ofLogNotice(L);
  luaopen_ofLogWarning(L);
  luaopen_ofLogError(L);
  luaopen_ofLogFatalError(L);
  luaopen_ofConsoleLoggerChannel(L);
  luaopen_ofFileLoggerChannel(L);
  luaopen_ofLuaApp(L);
  luaopen_ofMaterial(L);
  luaopen_ofMatrix3x3(L);
  luaopen_ofMatrix4x4(L);
  luaopen_ofMesh(L);
  luaopen_ofNode(L);
  luaopen_ofPath(L);
  luaopen_ofPixels(L);
  luaopen_ofSubPath(L);
  luaopen_ofPolyline(L);
  luaopen_ofQuaternion(L);
  luaopen_ofRectangle(L);
  luaopen_ofShader(L);
  luaopen_ofSoundPlayer(L);
  luaopen_ofSoundStream(L);
  luaopen_ofTessellator(L);
  luaopen_ofTextureData(L);
  luaopen_ofTexture(L);
  luaopen_ofThread(L);
  luaopen_ofTrueTypeFont(L);
  luaopen_ofStyle(L);
  luaopen_ofHttpRequest(L);
  luaopen_ofHttpResponse(L);
  luaopen_ofURLFileLoader(L);
  luaopen_ofVbo(L);
  luaopen_ofVboMesh(L);
  luaopen_ofVec2f(L);
  luaopen_ofVec3f(L);
  luaopen_ofVec4f(L);
  luaopen_ofVideoGrabber(L);
  luaopen_ofVideoPlayer(L);
  luaopen_ofImage(L);

  lua_getfield(L, LUA_GLOBALSINDEX, "_G");
  
  // <lib>
  // register global constants
  dub_register_const(L, of_const);
  luaL_register(L, NULL, of_functions);
  // <lib>
  lua_pop(L, 1);
  return 0;
}
