/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofSoundPlayer
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/sound/ofSoundPlayer.h"


/** ~ofSoundPlayer()
 * 
 */
static int ofSoundPlayer__ofSoundPlayer(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofSoundPlayer"));
    if (userdata->gc) {
      ofSoundPlayer *self = (ofSoundPlayer *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** ofSoundPlayer::ofSoundPlayer()
 * api/openFrameworks/sound/ofSoundPlayer.h:56
 */
static int ofSoundPlayer_ofSoundPlayer(lua_State *L) {
  try {
    ofSoundPlayer *retval__ = new ofSoundPlayer();
    dub_pushudata(L, retval__, "ofSoundPlayer", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundPlayer::setPlayer(ofPtr< ofBaseSoundPlayer > newPlayer)
 * api/openFrameworks/sound/ofSoundPlayer.h:58
 */
static int ofSoundPlayer_setPlayer(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    ofPtr < ofBaseSoundPlayer > *newPlayer = *((ofPtr < ofBaseSoundPlayer > **)dub_checksdata(L, 2, "ofPtr < ofBaseSoundPlayer >"));
    self->setPlayer(*newPlayer);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setPlayer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setPlayer: Unknown exception");
  }
  return dub_error(L);
}

/** ofPtr<ofBaseSoundPlayer> ofSoundPlayer::getPlayer()
 * api/openFrameworks/sound/ofSoundPlayer.h:59
 */
static int ofSoundPlayer_getPlayer(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    dub_pushudata(L, new ofPtr < ofBaseSoundPlayer >(self->getPlayer()), "ofPtr < ofBaseSoundPlayer >", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPlayer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPlayer: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofSoundPlayer::loadSound(string fileName, bool stream=false)
 * api/openFrameworks/sound/ofSoundPlayer.h:61
 */
static int ofSoundPlayer_loadSound(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      string *fileName = *((string **)dub_checksdata(L, 2, "string"));
      bool stream = dub_checkboolean(L, 3);
      lua_pushboolean(L, self->loadSound(*fileName, stream));
      return 1;
    } else {
      string *fileName = *((string **)dub_checksdata(L, 2, "string"));
      lua_pushboolean(L, self->loadSound(*fileName));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "loadSound: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "loadSound: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundPlayer::unloadSound()
 * api/openFrameworks/sound/ofSoundPlayer.h:62
 */
static int ofSoundPlayer_unloadSound(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    self->unloadSound();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "unloadSound: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "unloadSound: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundPlayer::play()
 * api/openFrameworks/sound/ofSoundPlayer.h:63
 */
static int ofSoundPlayer_play(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    self->play();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "play: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "play: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundPlayer::stop()
 * api/openFrameworks/sound/ofSoundPlayer.h:64
 */
static int ofSoundPlayer_stop(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    self->stop();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "stop: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "stop: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundPlayer::setVolume(float vol)
 * api/openFrameworks/sound/ofSoundPlayer.h:66
 */
static int ofSoundPlayer_setVolume(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    float vol = dub_checknumber(L, 2);
    self->setVolume(vol);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setVolume: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setVolume: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundPlayer::setPan(float vol)
 * api/openFrameworks/sound/ofSoundPlayer.h:67
 */
static int ofSoundPlayer_setPan(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    float vol = dub_checknumber(L, 2);
    self->setPan(vol);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setPan: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setPan: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundPlayer::setSpeed(float spd)
 * api/openFrameworks/sound/ofSoundPlayer.h:68
 */
static int ofSoundPlayer_setSpeed(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    float spd = dub_checknumber(L, 2);
    self->setSpeed(spd);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSpeed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSpeed: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundPlayer::setPaused(bool bP)
 * api/openFrameworks/sound/ofSoundPlayer.h:69
 */
static int ofSoundPlayer_setPaused(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    bool bP = dub_checkboolean(L, 2);
    self->setPaused(bP);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setPaused: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setPaused: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundPlayer::setLoop(bool bLp)
 * api/openFrameworks/sound/ofSoundPlayer.h:70
 */
static int ofSoundPlayer_setLoop(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    bool bLp = dub_checkboolean(L, 2);
    self->setLoop(bLp);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setLoop: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setLoop: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundPlayer::setMultiPlay(bool bMp)
 * api/openFrameworks/sound/ofSoundPlayer.h:71
 */
static int ofSoundPlayer_setMultiPlay(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    bool bMp = dub_checkboolean(L, 2);
    self->setMultiPlay(bMp);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setMultiPlay: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setMultiPlay: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundPlayer::setPosition(float pct)
 * api/openFrameworks/sound/ofSoundPlayer.h:72
 */
static int ofSoundPlayer_setPosition(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    float pct = dub_checknumber(L, 2);
    self->setPosition(pct);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setPosition: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundPlayer::setPositionMS(int ms)
 * api/openFrameworks/sound/ofSoundPlayer.h:73
 */
static int ofSoundPlayer_setPositionMS(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    int ms = dub_checkint(L, 2);
    self->setPositionMS(ms);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setPositionMS: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setPositionMS: Unknown exception");
  }
  return dub_error(L);
}

/** int ofSoundPlayer::getPositionMS()
 * api/openFrameworks/sound/ofSoundPlayer.h:74
 */
static int ofSoundPlayer_getPositionMS(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    lua_pushnumber(L, self->getPositionMS());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPositionMS: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPositionMS: Unknown exception");
  }
  return dub_error(L);
}

/** float ofSoundPlayer::getPosition()
 * api/openFrameworks/sound/ofSoundPlayer.h:76
 */
static int ofSoundPlayer_getPosition(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    lua_pushnumber(L, self->getPosition());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPosition: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofSoundPlayer::getIsPlaying()
 * api/openFrameworks/sound/ofSoundPlayer.h:77
 */
static int ofSoundPlayer_getIsPlaying(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    lua_pushboolean(L, self->getIsPlaying());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getIsPlaying: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getIsPlaying: Unknown exception");
  }
  return dub_error(L);
}

/** float ofSoundPlayer::getSpeed()
 * api/openFrameworks/sound/ofSoundPlayer.h:78
 */
static int ofSoundPlayer_getSpeed(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    lua_pushnumber(L, self->getSpeed());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSpeed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSpeed: Unknown exception");
  }
  return dub_error(L);
}

/** float ofSoundPlayer::getPan()
 * api/openFrameworks/sound/ofSoundPlayer.h:79
 */
static int ofSoundPlayer_getPan(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    lua_pushnumber(L, self->getPan());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPan: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPan: Unknown exception");
  }
  return dub_error(L);
}

/** float ofSoundPlayer::getVolume()
 * api/openFrameworks/sound/ofSoundPlayer.h:80
 */
static int ofSoundPlayer_getVolume(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    lua_pushnumber(L, self->getVolume());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getVolume: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getVolume: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofSoundPlayer::isLoaded()
 * api/openFrameworks/sound/ofSoundPlayer.h:82
 */
static int ofSoundPlayer_isLoaded(lua_State *L) {
  try {
    ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata(L, 1, "ofSoundPlayer"));
    lua_pushboolean(L, self->isLoaded());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isLoaded: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isLoaded: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofSoundPlayer___tostring(lua_State *L) {
  ofSoundPlayer *self = *((ofSoundPlayer **)dub_checksdata_n(L, 1, "ofSoundPlayer"));
  lua_pushfstring(L, "ofSoundPlayer: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofSoundPlayer_member_methods[] = {
  { "__gc"         , ofSoundPlayer__ofSoundPlayer },
  { "new"          , ofSoundPlayer_ofSoundPlayer },
  { "setPlayer"    , ofSoundPlayer_setPlayer },
  { "getPlayer"    , ofSoundPlayer_getPlayer },
  { "loadSound"    , ofSoundPlayer_loadSound },
  { "unloadSound"  , ofSoundPlayer_unloadSound },
  { "play"         , ofSoundPlayer_play   },
  { "stop"         , ofSoundPlayer_stop   },
  { "setVolume"    , ofSoundPlayer_setVolume },
  { "setPan"       , ofSoundPlayer_setPan },
  { "setSpeed"     , ofSoundPlayer_setSpeed },
  { "setPaused"    , ofSoundPlayer_setPaused },
  { "setLoop"      , ofSoundPlayer_setLoop },
  { "setMultiPlay" , ofSoundPlayer_setMultiPlay },
  { "setPosition"  , ofSoundPlayer_setPosition },
  { "setPositionMS", ofSoundPlayer_setPositionMS },
  { "getPositionMS", ofSoundPlayer_getPositionMS },
  { "getPosition"  , ofSoundPlayer_getPosition },
  { "getIsPlaying" , ofSoundPlayer_getIsPlaying },
  { "getSpeed"     , ofSoundPlayer_getSpeed },
  { "getPan"       , ofSoundPlayer_getPan },
  { "getVolume"    , ofSoundPlayer_getVolume },
  { "isLoaded"     , ofSoundPlayer_isLoaded },
  { "__tostring"   , ofSoundPlayer___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofSoundPlayer(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofSoundPlayer");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofSoundPlayer_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofSoundPlayer", "ofSoundPlayer");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
