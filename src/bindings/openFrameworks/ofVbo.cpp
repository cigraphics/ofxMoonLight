/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofVbo
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "gl/ofVbo.h"


/** ofVbo::ofVbo()
 * api/openFrameworks/gl/ofVbo.h:14
 */
static int ofVbo_ofVbo(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      ofVbo *mom = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
      ofVbo *retval__ = new ofVbo(*mom);
      dub_pushudata(L, retval__, "ofVbo", true);
      return 1;
    } else {
      ofVbo *retval__ = new ofVbo();
      dub_pushudata(L, retval__, "ofVbo", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** ofVbo& ofVbo::operator=(const ofVbo &mom)
 * api/openFrameworks/gl/ofVbo.h:16
 */
static int ofVbo_operator_sete(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    ofVbo *mom = *((ofVbo **)dub_checksdata(L, 2, "ofVbo"));
    dub_pushudata(L, &self->operator=(*mom), "ofVbo", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub_error(L);
}

/** ofVbo::~ofVbo()
 * api/openFrameworks/gl/ofVbo.h:17
 */
static int ofVbo__ofVbo(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofVbo"));
    if (userdata->gc) {
      ofVbo *self = (ofVbo *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::setMesh(const ofMesh &mesh, int usage)
 * api/openFrameworks/gl/ofVbo.h:19
 */
static int ofVbo_setMesh(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    ofMesh *mesh = *((ofMesh **)dub_checksdata(L, 2, "ofMesh"));
    int usage = dub_checkint(L, 3);
    self->setMesh(*mesh, usage);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setMesh: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setMesh: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::setVertexData(const ofVec3f *verts, int total, int usage)
 * api/openFrameworks/gl/ofVbo.h:21
 */
static int ofVbo_setVertexData(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      float * vert0x = (float *) lua_touserdata (L, 2);
      
      int numCoords = dub_checkint(L, 3);
      int total = dub_checkint(L, 4);
      int usage = dub_checkint(L, 5);
      int stride = dub_checkint(L, 6);
      self->setVertexData((float *) vert0x, numCoords, total, usage, stride);
      return 0;
    } else if (top__ >= 5) {
      float * vert0x = (float *) lua_touserdata (L, 2);
      
      int numCoords = dub_checkint(L, 3);
      int total = dub_checkint(L, 4);
      int usage = dub_checkint(L, 5);
      self->setVertexData((float *) vert0x, numCoords, total, usage);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
        ofVec3f *verts = *((ofVec3f **)ptr2__);
        int total = dub_checkint(L, 3);
        int usage = dub_checkint(L, 4);
        self->setVertexData(verts, total, usage);
        return 0;
      } else {
        ofVec2f *verts = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
        int total = dub_checkint(L, 3);
        int usage = dub_checkint(L, 4);
        self->setVertexData(verts, total, usage);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setVertexData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setVertexData: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::setColorData(const ofFloatColor *colors, int total, int usage)
 * api/openFrameworks/gl/ofVbo.h:24
 */
static int ofVbo_setColorData(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float * color0r = (float *) lua_touserdata (L, 2);
      
      int total = dub_checkint(L, 3);
      int usage = dub_checkint(L, 4);
      int stride = dub_checkint(L, 5);
      self->setColorData((float *) color0r, total, usage, stride);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofFloatColor", type__)) ) {
        ofFloatColor *colors = *((ofFloatColor **)ptr2__);
        int total = dub_checkint(L, 3);
        int usage = dub_checkint(L, 4);
        self->setColorData(colors, total, usage);
        return 0;
      } else {
        float * color0r = (float *) lua_touserdata (L, 2);
        
        int total = dub_checkint(L, 3);
        int usage = dub_checkint(L, 4);
        self->setColorData((float *) color0r, total, usage);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setColorData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setColorData: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::setNormalData(const ofVec3f *normals, int total, int usage)
 * api/openFrameworks/gl/ofVbo.h:25
 */
static int ofVbo_setNormalData(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float * normal0x = (float *) lua_touserdata (L, 2);
      
      int total = dub_checkint(L, 3);
      int usage = dub_checkint(L, 4);
      int stride = dub_checkint(L, 5);
      self->setNormalData((float *) normal0x, total, usage, stride);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
        ofVec3f *normals = *((ofVec3f **)ptr2__);
        int total = dub_checkint(L, 3);
        int usage = dub_checkint(L, 4);
        self->setNormalData(normals, total, usage);
        return 0;
      } else {
        float * normal0x = (float *) lua_touserdata (L, 2);
        
        int total = dub_checkint(L, 3);
        int usage = dub_checkint(L, 4);
        self->setNormalData((float *) normal0x, total, usage);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setNormalData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setNormalData: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::setTexCoordData(const ofVec2f *texCoords, int total, int usage)
 * api/openFrameworks/gl/ofVbo.h:26
 */
static int ofVbo_setTexCoordData(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float * texCoord0x = (float *) lua_touserdata (L, 2);
      
      int total = dub_checkint(L, 3);
      int usage = dub_checkint(L, 4);
      int stride = dub_checkint(L, 5);
      self->setTexCoordData((float *) texCoord0x, total, usage, stride);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "float *", type__)) ) {
        float * texCoord0x = (float *) lua_touserdata (L, 2);
        
        int total = dub_checkint(L, 3);
        int usage = dub_checkint(L, 4);
        self->setTexCoordData((float *) texCoord0x, total, usage);
        return 0;
      } else {
        ofVec2f *texCoords = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
        int total = dub_checkint(L, 3);
        int usage = dub_checkint(L, 4);
        self->setTexCoordData(texCoords, total, usage);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setTexCoordData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setTexCoordData: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::setIndexData(const ofIndexType *indices, int total, int usage)
 * api/openFrameworks/gl/ofVbo.h:27
 */
static int ofVbo_setIndexData(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    ofIndexType *indices = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    int total = dub_checkint(L, 3);
    int usage = dub_checkint(L, 4);
    self->setIndexData(indices, total, usage);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setIndexData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setIndexData: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::updateMesh(const ofMesh &mesh)
 * api/openFrameworks/gl/ofVbo.h:34
 */
static int ofVbo_updateMesh(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    ofMesh *mesh = *((ofMesh **)dub_checksdata(L, 2, "ofMesh"));
    self->updateMesh(*mesh);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "updateMesh: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "updateMesh: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::updateVertexData(const ofVec3f *verts, int total)
 * api/openFrameworks/gl/ofVbo.h:36
 */
static int ofVbo_updateVertexData(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
      ofVec3f *verts = *((ofVec3f **)ptr2__);
      int total = dub_checkint(L, 3);
      self->updateVertexData(verts, total);
      return 0;
    } else if ( (ptr2__ = dub_issdata(L, 2, "ofVec2f", type__)) ) {
      ofVec2f *verts = *((ofVec2f **)ptr2__);
      int total = dub_checkint(L, 3);
      self->updateVertexData(verts, total);
      return 0;
    } else {
      float * ver0x = (float *) lua_touserdata (L, 2);
      
      int total = dub_checkint(L, 3);
      self->updateVertexData((float *) ver0x, total);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "updateVertexData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "updateVertexData: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::updateColorData(const ofFloatColor *colors, int total)
 * api/openFrameworks/gl/ofVbo.h:38
 */
static int ofVbo_updateColorData(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofFloatColor", type__)) ) {
      ofFloatColor *colors = *((ofFloatColor **)ptr2__);
      int total = dub_checkint(L, 3);
      self->updateColorData(colors, total);
      return 0;
    } else {
      float * color0r = (float *) lua_touserdata (L, 2);
      
      int total = dub_checkint(L, 3);
      self->updateColorData((float *) color0r, total);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "updateColorData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "updateColorData: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::updateNormalData(const ofVec3f *normals, int total)
 * api/openFrameworks/gl/ofVbo.h:39
 */
static int ofVbo_updateNormalData(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
      ofVec3f *normals = *((ofVec3f **)ptr2__);
      int total = dub_checkint(L, 3);
      self->updateNormalData(normals, total);
      return 0;
    } else {
      float * normal0x = (float *) lua_touserdata (L, 2);
      
      int total = dub_checkint(L, 3);
      self->updateNormalData((float *) normal0x, total);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "updateNormalData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "updateNormalData: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::updateTexCoordData(const ofVec2f *texCoords, int total)
 * api/openFrameworks/gl/ofVbo.h:40
 */
static int ofVbo_updateTexCoordData(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "float *", type__)) ) {
      float * texCoord0x = (float *) lua_touserdata (L, 2);
      
      int total = dub_checkint(L, 3);
      self->updateTexCoordData((float *) texCoord0x, total);
      return 0;
    } else {
      ofVec2f *texCoords = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      int total = dub_checkint(L, 3);
      self->updateTexCoordData(texCoords, total);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "updateTexCoordData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "updateTexCoordData: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::updateIndexData(const ofIndexType *indices, int total)
 * api/openFrameworks/gl/ofVbo.h:41
 */
static int ofVbo_updateIndexData(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    ofIndexType *indices = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    int total = dub_checkint(L, 3);
    self->updateIndexData(indices, total);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "updateIndexData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "updateIndexData: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::enableColors()
 * api/openFrameworks/gl/ofVbo.h:48
 */
static int ofVbo_enableColors(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    self->enableColors();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableColors: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableColors: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::enableNormals()
 * api/openFrameworks/gl/ofVbo.h:49
 */
static int ofVbo_enableNormals(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    self->enableNormals();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableNormals: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableNormals: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::enableTexCoords()
 * api/openFrameworks/gl/ofVbo.h:50
 */
static int ofVbo_enableTexCoords(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    self->enableTexCoords();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableTexCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableTexCoords: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::enableIndices()
 * api/openFrameworks/gl/ofVbo.h:51
 */
static int ofVbo_enableIndices(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    self->enableIndices();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableIndices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableIndices: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::disableColors()
 * api/openFrameworks/gl/ofVbo.h:53
 */
static int ofVbo_disableColors(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    self->disableColors();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disableColors: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disableColors: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::disableNormals()
 * api/openFrameworks/gl/ofVbo.h:54
 */
static int ofVbo_disableNormals(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    self->disableNormals();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disableNormals: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disableNormals: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::disableTexCoords()
 * api/openFrameworks/gl/ofVbo.h:55
 */
static int ofVbo_disableTexCoords(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    self->disableTexCoords();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disableTexCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disableTexCoords: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::disableIndices()
 * api/openFrameworks/gl/ofVbo.h:56
 */
static int ofVbo_disableIndices(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    self->disableIndices();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disableIndices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disableIndices: Unknown exception");
  }
  return dub_error(L);
}

/** GLuint ofVbo::getVertId()
 * api/openFrameworks/gl/ofVbo.h:58
 */
static int ofVbo_getVertId(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    lua_pushnumber(L, self->getVertId());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getVertId: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getVertId: Unknown exception");
  }
  return dub_error(L);
}

/** GLuint ofVbo::getColorId()
 * api/openFrameworks/gl/ofVbo.h:59
 */
static int ofVbo_getColorId(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    lua_pushnumber(L, self->getColorId());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getColorId: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getColorId: Unknown exception");
  }
  return dub_error(L);
}

/** GLuint ofVbo::getNormalId()
 * api/openFrameworks/gl/ofVbo.h:60
 */
static int ofVbo_getNormalId(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    lua_pushnumber(L, self->getNormalId());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNormalId: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNormalId: Unknown exception");
  }
  return dub_error(L);
}

/** GLuint ofVbo::getTexCoordId()
 * api/openFrameworks/gl/ofVbo.h:61
 */
static int ofVbo_getTexCoordId(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    lua_pushnumber(L, self->getTexCoordId());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getTexCoordId: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getTexCoordId: Unknown exception");
  }
  return dub_error(L);
}

/** GLuint ofVbo::getIndexId()
 * api/openFrameworks/gl/ofVbo.h:62
 */
static int ofVbo_getIndexId(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    lua_pushnumber(L, self->getIndexId());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getIndexId: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getIndexId: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofVbo::getIsAllocated()
 * api/openFrameworks/gl/ofVbo.h:64
 */
static int ofVbo_getIsAllocated(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    lua_pushboolean(L, self->getIsAllocated());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getIsAllocated: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getIsAllocated: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofVbo::getUsingVerts()
 * api/openFrameworks/gl/ofVbo.h:65
 */
static int ofVbo_getUsingVerts(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    lua_pushboolean(L, self->getUsingVerts());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUsingVerts: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUsingVerts: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofVbo::getUsingColors()
 * api/openFrameworks/gl/ofVbo.h:66
 */
static int ofVbo_getUsingColors(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    lua_pushboolean(L, self->getUsingColors());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUsingColors: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUsingColors: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofVbo::getUsingNormals()
 * api/openFrameworks/gl/ofVbo.h:67
 */
static int ofVbo_getUsingNormals(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    lua_pushboolean(L, self->getUsingNormals());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUsingNormals: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUsingNormals: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofVbo::getUsingTexCoords()
 * api/openFrameworks/gl/ofVbo.h:68
 */
static int ofVbo_getUsingTexCoords(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    lua_pushboolean(L, self->getUsingTexCoords());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUsingTexCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUsingTexCoords: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofVbo::getUsingIndices()
 * api/openFrameworks/gl/ofVbo.h:69
 */
static int ofVbo_getUsingIndices(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    lua_pushboolean(L, self->getUsingIndices());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUsingIndices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUsingIndices: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::draw(int drawMode, int first, int total)
 * api/openFrameworks/gl/ofVbo.h:71
 */
static int ofVbo_draw(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    int drawMode = dub_checkint(L, 2);
    int first = dub_checkint(L, 3);
    int total = dub_checkint(L, 4);
    self->draw(drawMode, first, total);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "draw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "draw: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::drawElements(int drawMode, int amt)
 * api/openFrameworks/gl/ofVbo.h:72
 */
static int ofVbo_drawElements(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    int drawMode = dub_checkint(L, 2);
    int amt = dub_checkint(L, 3);
    self->drawElements(drawMode, amt);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawElements: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawElements: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::bind()
 * api/openFrameworks/gl/ofVbo.h:73
 */
static int ofVbo_bind(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    self->bind();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "bind: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "bind: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::unbind()
 * api/openFrameworks/gl/ofVbo.h:74
 */
static int ofVbo_unbind(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    self->unbind();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "unbind: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "unbind: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::clear()
 * api/openFrameworks/gl/ofVbo.h:76
 */
static int ofVbo_clear(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    self->clear();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clear: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clear: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::clearVertices()
 * api/openFrameworks/gl/ofVbo.h:78
 */
static int ofVbo_clearVertices(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    self->clearVertices();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearVertices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearVertices: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::clearNormals()
 * api/openFrameworks/gl/ofVbo.h:79
 */
static int ofVbo_clearNormals(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    self->clearNormals();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearNormals: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearNormals: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::clearColors()
 * api/openFrameworks/gl/ofVbo.h:80
 */
static int ofVbo_clearColors(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    self->clearColors();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearColors: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearColors: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::clearTexCoords()
 * api/openFrameworks/gl/ofVbo.h:81
 */
static int ofVbo_clearTexCoords(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    self->clearTexCoords();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearTexCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearTexCoords: Unknown exception");
  }
  return dub_error(L);
}

/** void ofVbo::clearIndices()
 * api/openFrameworks/gl/ofVbo.h:82
 */
static int ofVbo_clearIndices(lua_State *L) {
  try {
    ofVbo *self = *((ofVbo **)dub_checksdata(L, 1, "ofVbo"));
    self->clearIndices();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearIndices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearIndices: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofVbo___tostring(lua_State *L) {
  ofVbo *self = *((ofVbo **)dub_checksdata_n(L, 1, "ofVbo"));
  lua_pushfstring(L, "ofVbo: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofVbo_member_methods[] = {
  { "new"          , ofVbo_ofVbo          },
  { "set"          , ofVbo_operator_sete  },
  { "__gc"         , ofVbo__ofVbo         },
  { "setMesh"      , ofVbo_setMesh        },
  { "setVertexData", ofVbo_setVertexData  },
  { "setColorData" , ofVbo_setColorData   },
  { "setNormalData", ofVbo_setNormalData  },
  { "setTexCoordData", ofVbo_setTexCoordData },
  { "setIndexData" , ofVbo_setIndexData   },
  { "updateMesh"   , ofVbo_updateMesh     },
  { "updateVertexData", ofVbo_updateVertexData },
  { "updateColorData", ofVbo_updateColorData },
  { "updateNormalData", ofVbo_updateNormalData },
  { "updateTexCoordData", ofVbo_updateTexCoordData },
  { "updateIndexData", ofVbo_updateIndexData },
  { "enableColors" , ofVbo_enableColors   },
  { "enableNormals", ofVbo_enableNormals  },
  { "enableTexCoords", ofVbo_enableTexCoords },
  { "enableIndices", ofVbo_enableIndices  },
  { "disableColors", ofVbo_disableColors  },
  { "disableNormals", ofVbo_disableNormals },
  { "disableTexCoords", ofVbo_disableTexCoords },
  { "disableIndices", ofVbo_disableIndices },
  { "getVertId"    , ofVbo_getVertId      },
  { "getColorId"   , ofVbo_getColorId     },
  { "getNormalId"  , ofVbo_getNormalId    },
  { "getTexCoordId", ofVbo_getTexCoordId  },
  { "getIndexId"   , ofVbo_getIndexId     },
  { "getIsAllocated", ofVbo_getIsAllocated },
  { "getUsingVerts", ofVbo_getUsingVerts  },
  { "getUsingColors", ofVbo_getUsingColors },
  { "getUsingNormals", ofVbo_getUsingNormals },
  { "getUsingTexCoords", ofVbo_getUsingTexCoords },
  { "getUsingIndices", ofVbo_getUsingIndices },
  { "draw"         , ofVbo_draw           },
  { "drawElements" , ofVbo_drawElements   },
  { "bind"         , ofVbo_bind           },
  { "unbind"       , ofVbo_unbind         },
  { "clear"        , ofVbo_clear          },
  { "clearVertices", ofVbo_clearVertices  },
  { "clearNormals" , ofVbo_clearNormals   },
  { "clearColors"  , ofVbo_clearColors    },
  { "clearTexCoords", ofVbo_clearTexCoords },
  { "clearIndices" , ofVbo_clearIndices   },
  { "__tostring"   , ofVbo___tostring     },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofVbo(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofVbo");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofVbo_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofVbo", "ofVbo");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
