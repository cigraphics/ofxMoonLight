/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofColor
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "types/ofColor.h"


/** Set attributes (key, value)
 * 
 */
static int ofColor__set_(lua_State *L) {

  ofColor *self = *((ofColor **)dub_checksdata_n(L, 1, "ofColor"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 7);
  switch(key_h) {
    case 2: {
      if (DUB_ASSERT_KEY(key, "r")) break;
      self->r = luaL_checkint(L, 3);
      return 0;
    }
    case 5: {
      if (DUB_ASSERT_KEY(key, "g")) break;
      self->g = luaL_checkint(L, 3);
      return 0;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "b")) break;
      self->b = luaL_checkint(L, 3);
      return 0;
    }
    case 6: {
      if (DUB_ASSERT_KEY(key, "a")) break;
      self->a = luaL_checkint(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** ofColor::ofColor()
 * api/openFrameworks/types/ofColor.h:12
 */
static int ofColor_ofColor(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float _r = dub_checknumber(L, 1);
      float _g = dub_checknumber(L, 2);
      float _b = dub_checknumber(L, 3);
      float _a = dub_checknumber(L, 4);
      ofColor *retval__ = new ofColor(_r, _g, _b, _a);
      dub_pushudata(L, retval__, "ofColor", true);
      return 1;
    } else if (top__ >= 3) {
      float _r = dub_checknumber(L, 1);
      float _g = dub_checknumber(L, 2);
      float _b = dub_checknumber(L, 3);
      ofColor *retval__ = new ofColor(_r, _g, _b);
      dub_pushudata(L, retval__, "ofColor", true);
      return 1;
    } else if (top__ >= 2) {
      int type__ = lua_type(L, 1);
      if (type__ == LUA_TNUMBER) {
        float gray = dub_checknumber(L, 1);
        float _a = dub_checknumber(L, 2);
        ofColor *retval__ = new ofColor(gray, _a);
        dub_pushudata(L, retval__, "ofColor", true);
        return 1;
      } else {
        ofColor *color = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
        float _a = dub_checknumber(L, 2);
        ofColor *retval__ = new ofColor(*color, _a);
        dub_pushudata(L, retval__, "ofColor", true);
        return 1;
      }
    } else if (top__ >= 1) {
      int type__ = lua_type(L, 1);
      if (type__ == LUA_TNUMBER) {
        float gray = dub_checknumber(L, 1);
        ofColor *retval__ = new ofColor(gray);
        dub_pushudata(L, retval__, "ofColor", true);
        return 1;
      } else {
        ofColor *color = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
        ofColor *retval__ = new ofColor(*color);
        dub_pushudata(L, retval__, "ofColor", true);
        return 1;
      }
    } else {
      ofColor *retval__ = new ofColor();
      dub_pushudata(L, retval__, "ofColor", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor::~ofColor()
 * api/openFrameworks/types/ofColor.h:13
 */
static int ofColor__ofColor(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofColor"));
    if (userdata->gc) {
      ofColor *self = (ofColor *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** void ofColor::set(float _r, float _g, float _b, float _a=limit())
 * api/openFrameworks/types/ofColor.h:23
 */
static int ofColor_set(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float _r = dub_checknumber(L, 2);
      float _g = dub_checknumber(L, 3);
      float _b = dub_checknumber(L, 4);
      float _a = dub_checknumber(L, 5);
      self->set(_r, _g, _b, _a);
      return 0;
    } else if (top__ >= 4) {
      float _r = dub_checknumber(L, 2);
      float _g = dub_checknumber(L, 3);
      float _b = dub_checknumber(L, 4);
      self->set(_r, _g, _b);
      return 0;
    } else if (top__ >= 3) {
      float _gray = dub_checknumber(L, 2);
      float _a = dub_checknumber(L, 3);
      self->set(_gray, _a);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float _gray = dub_checknumber(L, 2);
        self->set(_gray);
        return 0;
      } else {
        ofColor const *color = *((ofColor const **)dub_checksdata(L, 2, "ofColor const"));
        self->set(*color);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub_error(L);
}

/** void ofColor::setHex(int hexColor, float alpha=limit())
 * api/openFrameworks/types/ofColor.h:27
 */
static int ofColor_setHex(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      int hexColor = dub_checkint(L, 2);
      float alpha = dub_checknumber(L, 3);
      self->setHex(hexColor, alpha);
      return 0;
    } else {
      int hexColor = dub_checkint(L, 2);
      self->setHex(hexColor);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setHex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setHex: Unknown exception");
  }
  return dub_error(L);
}

/** int ofColor::getHex() const
 * api/openFrameworks/types/ofColor.h:28
 */
static int ofColor_getHex(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    lua_pushnumber(L, self->getHex());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getHex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getHex: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor& ofColor::clamp()
 * api/openFrameworks/types/ofColor.h:30
 */
static int ofColor_clamp(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    dub_pushudata(L, &self->clamp(), "ofColor", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clamp: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clamp: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor& ofColor::invert()
 * api/openFrameworks/types/ofColor.h:31
 */
static int ofColor_invert(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    dub_pushudata(L, &self->invert(), "ofColor", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "invert: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "invert: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor& ofColor::normalize()
 * api/openFrameworks/types/ofColor.h:32
 */
static int ofColor_normalize(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    dub_pushudata(L, &self->normalize(), "ofColor", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "normalize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "normalize: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor& ofColor::lerp(const ofColor &target, float amount)
 * api/openFrameworks/types/ofColor.h:33
 */
static int ofColor_lerp(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    ofColor *target = *((ofColor **)dub_checksdata(L, 2, "ofColor"));
    float amount = dub_checknumber(L, 3);
    dub_pushudata(L, &self->lerp(*target, amount), "ofColor", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "lerp: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "lerp: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor ofColor::getClamped() const
 * api/openFrameworks/types/ofColor.h:35
 */
static int ofColor_getClamped(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    dub_pushudata(L, new ofColor(self->getClamped()), "ofColor", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getClamped: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getClamped: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor ofColor::getInverted() const
 * api/openFrameworks/types/ofColor.h:36
 */
static int ofColor_getInverted(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    dub_pushudata(L, new ofColor(self->getInverted()), "ofColor", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getInverted: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getInverted: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor ofColor::getNormalized() const
 * api/openFrameworks/types/ofColor.h:37
 */
static int ofColor_getNormalized(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    dub_pushudata(L, new ofColor(self->getNormalized()), "ofColor", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNormalized: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNormalized: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor ofColor::getLerped(const ofColor &target, float amount) const
 * api/openFrameworks/types/ofColor.h:38
 */
static int ofColor_getLerped(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    ofColor *target = *((ofColor **)dub_checksdata(L, 2, "ofColor"));
    float amount = dub_checknumber(L, 3);
    dub_pushudata(L, new ofColor(self->getLerped(*target, amount)), "ofColor", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLerped: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLerped: Unknown exception");
  }
  return dub_error(L);
}

/** float ofColor::getHue() const
 * api/openFrameworks/types/ofColor.h:40
 */
static int ofColor_getHue(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    lua_pushnumber(L, self->getHue());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getHue: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getHue: Unknown exception");
  }
  return dub_error(L);
}

/** float ofColor::getSaturation() const
 * api/openFrameworks/types/ofColor.h:41
 */
static int ofColor_getSaturation(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    lua_pushnumber(L, self->getSaturation());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSaturation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSaturation: Unknown exception");
  }
  return dub_error(L);
}

/** float ofColor::getBrightness() const
 * api/openFrameworks/types/ofColor.h:42
 */
static int ofColor_getBrightness(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    lua_pushnumber(L, self->getBrightness());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBrightness: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBrightness: Unknown exception");
  }
  return dub_error(L);
}

/** float ofColor::getLightness() const
 * api/openFrameworks/types/ofColor.h:43
 */
static int ofColor_getLightness(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    lua_pushnumber(L, self->getLightness());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLightness: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLightness: Unknown exception");
  }
  return dub_error(L);
}

/** void ofColor::getHsb(float &hue, float &saturation, float &brightness) const
 * api/openFrameworks/types/ofColor.h:44
 */
static int ofColor_getHsb(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    float hue = dub_checknumber(L, 2);
    float saturation = dub_checknumber(L, 3);
    float brightness = dub_checknumber(L, 4);
    self->getHsb(hue, saturation, brightness);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getHsb: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getHsb: Unknown exception");
  }
  return dub_error(L);
}

/** void ofColor::setHue(float hue)
 * api/openFrameworks/types/ofColor.h:46
 */
static int ofColor_setHue(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    float hue = dub_checknumber(L, 2);
    self->setHue(hue);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setHue: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setHue: Unknown exception");
  }
  return dub_error(L);
}

/** void ofColor::setSaturation(float saturation)
 * api/openFrameworks/types/ofColor.h:47
 */
static int ofColor_setSaturation(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    float saturation = dub_checknumber(L, 2);
    self->setSaturation(saturation);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSaturation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSaturation: Unknown exception");
  }
  return dub_error(L);
}

/** void ofColor::setBrightness(float brightness)
 * api/openFrameworks/types/ofColor.h:48
 */
static int ofColor_setBrightness(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    float brightness = dub_checknumber(L, 2);
    self->setBrightness(brightness);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setBrightness: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setBrightness: Unknown exception");
  }
  return dub_error(L);
}

/** void ofColor::setHsb(float hue, float saturation, float brightness, float alpha=limit())
 * api/openFrameworks/types/ofColor.h:49
 */
static int ofColor_setHsb(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float hue = dub_checknumber(L, 2);
      float saturation = dub_checknumber(L, 3);
      float brightness = dub_checknumber(L, 4);
      float alpha = dub_checknumber(L, 5);
      self->setHsb(hue, saturation, brightness, alpha);
      return 0;
    } else {
      float hue = dub_checknumber(L, 2);
      float saturation = dub_checknumber(L, 3);
      float brightness = dub_checknumber(L, 4);
      self->setHsb(hue, saturation, brightness);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setHsb: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setHsb: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor& ofColor::operator=(ofColor const &color)
 * api/openFrameworks/types/ofColor.h:51
 */
static int ofColor_operator_sete(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofColor const", type__)) ) {
      ofColor const *color = *((ofColor const **)ptr2__);
      dub_pushudata(L, &self->operator=(*color), "ofColor", false);
      return 1;
    } else {
      float const *val = *((float const **)dub_checksdata(L, 2, "float const"));
      dub_pushudata(L, &self->operator=(*val), "ofColor", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofColor::operator==(ofColor const &color)
 * api/openFrameworks/types/ofColor.h:54
 */
static int ofColor_operator_eq(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    ofColor const *color = *((ofColor const **)dub_checksdata(L, 2, "ofColor const"));
    lua_pushboolean(L, self->operator==(*color));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__eq: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__eq: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor ofColor::operator+(ofColor const &color) const
 * api/openFrameworks/types/ofColor.h:56
 */
static int ofColor_operator_add(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofColor const", type__)) ) {
      ofColor const *color = *((ofColor const **)ptr2__);
      dub_pushudata(L, new ofColor(self->operator+(*color)), "ofColor", true);
      return 1;
    } else {
      float const *val = *((float const **)dub_checksdata(L, 2, "float const"));
      dub_pushudata(L, new ofColor(self->operator+(*val)), "ofColor", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "__add: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__add: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor& ofColor::operator+=(ofColor const &color)
 * api/openFrameworks/types/ofColor.h:58
 */
static int ofColor_operator_adde(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofColor const", type__)) ) {
      ofColor const *color = *((ofColor const **)ptr2__);
      dub_pushudata(L, &self->operator+=(*color), "ofColor", false);
      return 1;
    } else {
      float const *val = *((float const **)dub_checksdata(L, 2, "float const"));
      dub_pushudata(L, &self->operator+=(*val), "ofColor", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "add: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "add: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor ofColor::operator-(ofColor const &color) const
 * api/openFrameworks/types/ofColor.h:60
 */
static int ofColor_operator_sub(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofColor const", type__)) ) {
      ofColor const *color = *((ofColor const **)ptr2__);
      dub_pushudata(L, new ofColor(self->operator-(*color)), "ofColor", true);
      return 1;
    } else {
      float const *val = *((float const **)dub_checksdata(L, 2, "float const"));
      dub_pushudata(L, new ofColor(self->operator-(*val)), "ofColor", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "__sub: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__sub: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor& ofColor::operator-=(ofColor const &color)
 * api/openFrameworks/types/ofColor.h:62
 */
static int ofColor_operator_sube(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofColor const", type__)) ) {
      ofColor const *color = *((ofColor const **)ptr2__);
      dub_pushudata(L, &self->operator-=(*color), "ofColor", false);
      return 1;
    } else {
      float const *val = *((float const **)dub_checksdata(L, 2, "float const"));
      dub_pushudata(L, &self->operator-=(*val), "ofColor", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "sub: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "sub: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor ofColor::operator*(ofColor const &color) const
 * api/openFrameworks/types/ofColor.h:64
 */
static int ofColor_operator_mul(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofColor const", type__)) ) {
      ofColor const *color = *((ofColor const **)ptr2__);
      dub_pushudata(L, new ofColor(self->operator*(*color)), "ofColor", true);
      return 1;
    } else {
      float const *val = *((float const **)dub_checksdata(L, 2, "float const"));
      dub_pushudata(L, new ofColor(self->operator*(*val)), "ofColor", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "__mul: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__mul: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor& ofColor::operator*=(ofColor const &color)
 * api/openFrameworks/types/ofColor.h:66
 */
static int ofColor_operator_mule(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofColor const", type__)) ) {
      ofColor const *color = *((ofColor const **)ptr2__);
      dub_pushudata(L, &self->operator*=(*color), "ofColor", false);
      return 1;
    } else {
      float const *val = *((float const **)dub_checksdata(L, 2, "float const"));
      dub_pushudata(L, &self->operator*=(*val), "ofColor", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "mul: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mul: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor ofColor::operator/(ofColor const &color) const
 * api/openFrameworks/types/ofColor.h:68
 */
static int ofColor_operator_div(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofColor const", type__)) ) {
      ofColor const *color = *((ofColor const **)ptr2__);
      dub_pushudata(L, new ofColor(self->operator/(*color)), "ofColor", true);
      return 1;
    } else {
      float const *val = *((float const **)dub_checksdata(L, 2, "float const"));
      dub_pushudata(L, new ofColor(self->operator/(*val)), "ofColor", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "__div: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__div: Unknown exception");
  }
  return dub_error(L);
}

/** ofColor& ofColor::operator/=(ofColor const &color)
 * api/openFrameworks/types/ofColor.h:70
 */
static int ofColor_operator_dive(lua_State *L) {
  try {
    ofColor *self = *((ofColor **)dub_checksdata(L, 1, "ofColor"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofColor const", type__)) ) {
      ofColor const *color = *((ofColor const **)ptr2__);
      dub_pushudata(L, &self->operator/=(*color), "ofColor", false);
      return 1;
    } else {
      float const *val = *((float const **)dub_checksdata(L, 2, "float const"));
      dub_pushudata(L, &self->operator/=(*val), "ofColor", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "div: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "div: Unknown exception");
  }
  return dub_error(L);
}

/** const unsigned char& ofColor::operator[](int n) const
 * api/openFrameworks/types/ofColor.h:72
 */
static int ofColor__get_(lua_State *L) {

  ofColor *self = *((ofColor **)dub_checksdata_n(L, 1, "ofColor", true));
  if (lua_type(L, 2) != LUA_TSTRING) {
    int n = luaL_checkint(L, 2);
    lua_pushnumber(L, self->operator[](n));
    return 1;
  }
  
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 7);
  switch(key_h) {
    case 2: {
      if (DUB_ASSERT_KEY(key, "r")) break;
      lua_pushnumber(L, self->r);
      return 1;
    }
    case 5: {
      if (DUB_ASSERT_KEY(key, "g")) break;
      lua_pushnumber(L, self->g);
      return 1;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "b")) break;
      lua_pushnumber(L, self->b);
      return 1;
    }
    case 6: {
      if (DUB_ASSERT_KEY(key, "a")) break;
      lua_pushnumber(L, self->a);
      return 1;
    }
  }
  return 0;
}

/** static ofColor ofColor::fromHsb(float hue, float saturation, float brightness, float alpha=limit())
 * api/openFrameworks/types/ofColor.h:20
 */
static int ofColor_fromHsb(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float hue = dub_checknumber(L, 1);
      float saturation = dub_checknumber(L, 2);
      float brightness = dub_checknumber(L, 3);
      float alpha = dub_checknumber(L, 4);
      dub_pushudata(L, new ofColor(ofColor::fromHsb(hue, saturation, brightness, alpha)), "ofColor", true);
      return 1;
    } else {
      float hue = dub_checknumber(L, 1);
      float saturation = dub_checknumber(L, 2);
      float brightness = dub_checknumber(L, 3);
      dub_pushudata(L, new ofColor(ofColor::fromHsb(hue, saturation, brightness)), "ofColor", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "fromHsb: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "fromHsb: Unknown exception");
  }
  return dub_error(L);
}

/** static ofColor ofColor::fromHex(int hexColor, float alpha=limit())
 * api/openFrameworks/types/ofColor.h:21
 */
static int ofColor_fromHex(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int hexColor = dub_checkint(L, 1);
      float alpha = dub_checknumber(L, 2);
      dub_pushudata(L, new ofColor(ofColor::fromHex(hexColor, alpha)), "ofColor", true);
      return 1;
    } else {
      int hexColor = dub_checkint(L, 1);
      dub_pushudata(L, new ofColor(ofColor::fromHex(hexColor)), "ofColor", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "fromHex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "fromHex: Unknown exception");
  }
  return dub_error(L);
}

/** static float ofColor::limit()
 * api/openFrameworks/types/ofColor.h:75
 */
static int ofColor_limit(lua_State *L) {
  try {
    lua_pushnumber(L, ofColor::limit());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "limit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "limit: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofColor___tostring(lua_State *L) {
  ofColor *self = *((ofColor **)dub_checksdata_n(L, 1, "ofColor"));
  lua_pushfstring(L, "ofColor: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofColor_member_methods[] = {
  { "__newindex"   , ofColor__set_        },
  { "new"          , ofColor_ofColor      },
  { "__gc"         , ofColor__ofColor     },
  { "set"          , ofColor_set          },
  { "setHex"       , ofColor_setHex       },
  { "getHex"       , ofColor_getHex       },
  { "clamp"        , ofColor_clamp        },
  { "invert"       , ofColor_invert       },
  { "normalize"    , ofColor_normalize    },
  { "lerp"         , ofColor_lerp         },
  { "getClamped"   , ofColor_getClamped   },
  { "getInverted"  , ofColor_getInverted  },
  { "getNormalized", ofColor_getNormalized },
  { "getLerped"    , ofColor_getLerped    },
  { "getHue"       , ofColor_getHue       },
  { "getSaturation", ofColor_getSaturation },
  { "getBrightness", ofColor_getBrightness },
  { "getLightness" , ofColor_getLightness },
  { "getHsb"       , ofColor_getHsb       },
  { "setHue"       , ofColor_setHue       },
  { "setSaturation", ofColor_setSaturation },
  { "setBrightness", ofColor_setBrightness },
  { "setHsb"       , ofColor_setHsb       },
  { "set"          , ofColor_operator_sete },
  { "__eq"         , ofColor_operator_eq  },
  { "__add"        , ofColor_operator_add },
  { "add"          , ofColor_operator_adde },
  { "__sub"        , ofColor_operator_sub },
  { "sub"          , ofColor_operator_sube },
  { "__mul"        , ofColor_operator_mul },
  { "mul"          , ofColor_operator_mule },
  { "__div"        , ofColor_operator_div },
  { "div"          , ofColor_operator_dive },
  { "__index"      , ofColor__get_        },
  { "fromHsb"      , ofColor_fromHsb      },
  { "fromHex"      , ofColor_fromHex      },
  { "limit"        , ofColor_limit        },
  { "__tostring"   , ofColor___tostring   },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofColor(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofColor");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofColor_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofColor", "ofColor");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
