/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofEventArgs
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/events/ofEvents.h"


/** ofEventArgs()
 * 
 */
static int ofEventArgs_ofEventArgs(lua_State *L) {
  try {
    ofEventArgs *retval__ = new ofEventArgs();
    dub_pushudata(L, retval__, "ofEventArgs", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofEventArgs___tostring(lua_State *L) {
  ofEventArgs *self = *((ofEventArgs **)dub_checksdata_n(L, 1, "ofEventArgs"));
  lua_pushfstring(L, "ofEventArgs: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofEventArgs_member_methods[] = {
  { "new"          , ofEventArgs_ofEventArgs },
  { "__tostring"   , ofEventArgs___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofEventArgs(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofEventArgs");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofEventArgs_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofEventArgs", "ofEventArgs");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
