/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofFileDialogResult
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/utils/ofSystemUtils.h"


/** ~ofFileDialogResult()
 * 
 */
static int ofFileDialogResult__ofFileDialogResult(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofFileDialogResult"));
    if (userdata->gc) {
      ofFileDialogResult *self = (ofFileDialogResult *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** Set attributes (key, value)
 * 
 */
static int ofFileDialogResult__set_(lua_State *L) {

  ofFileDialogResult *self = *((ofFileDialogResult **)dub_checksdata_n(L, 1, "ofFileDialogResult"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 5);
  switch(key_h) {
    case 3: {
      if (DUB_ASSERT_KEY(key, "filePath")) break;
      self->filePath = **((string **)dub_checksdata_n(L, 3, "string"));
      return 0;
    }
    case 4: {
      if (DUB_ASSERT_KEY(key, "fileName")) break;
      self->fileName = **((string **)dub_checksdata_n(L, 3, "string"));
      return 0;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "bSuccess")) break;
      self->bSuccess = luaL_checkboolean(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int ofFileDialogResult__get_(lua_State *L) {

  ofFileDialogResult *self = *((ofFileDialogResult **)dub_checksdata_n(L, 1, "ofFileDialogResult", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 5);
  switch(key_h) {
    case 3: {
      if (DUB_ASSERT_KEY(key, "filePath")) break;
      dub_pushudata(L, &self->filePath, "string", false);
      return 1;
    }
    case 4: {
      if (DUB_ASSERT_KEY(key, "fileName")) break;
      dub_pushudata(L, &self->fileName, "string", false);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "bSuccess")) break;
      lua_pushboolean(L, self->bSuccess);
      return 1;
    }
  }
  return 0;
}

/** ofFileDialogResult::ofFileDialogResult()
 * api/openFrameworks/utils/ofSystemUtils.h:6
 */
static int ofFileDialogResult_ofFileDialogResult(lua_State *L) {
  try {
    ofFileDialogResult *retval__ = new ofFileDialogResult();
    dub_pushudata(L, retval__, "ofFileDialogResult", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** string ofFileDialogResult::getName()
 * api/openFrameworks/utils/ofSystemUtils.h:9
 */
static int ofFileDialogResult_getName(lua_State *L) {
  try {
    ofFileDialogResult *self = *((ofFileDialogResult **)dub_checksdata(L, 1, "ofFileDialogResult"));
    dub_pushudata(L, new string(self->getName()), "string", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getName: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getName: Unknown exception");
  }
  return dub_error(L);
}

/** string ofFileDialogResult::getPath()
 * api/openFrameworks/utils/ofSystemUtils.h:10
 */
static int ofFileDialogResult_getPath(lua_State *L) {
  try {
    ofFileDialogResult *self = *((ofFileDialogResult **)dub_checksdata(L, 1, "ofFileDialogResult"));
    dub_pushudata(L, new string(self->getPath()), "string", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPath: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPath: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofFileDialogResult___tostring(lua_State *L) {
  ofFileDialogResult *self = *((ofFileDialogResult **)dub_checksdata_n(L, 1, "ofFileDialogResult"));
  lua_pushfstring(L, "ofFileDialogResult: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofFileDialogResult_member_methods[] = {
  { "__gc"         , ofFileDialogResult__ofFileDialogResult },
  { "__newindex"   , ofFileDialogResult__set_ },
  { "__index"      , ofFileDialogResult__get_ },
  { "new"          , ofFileDialogResult_ofFileDialogResult },
  { "getName"      , ofFileDialogResult_getName },
  { "getPath"      , ofFileDialogResult_getPath },
  { "__tostring"   , ofFileDialogResult___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofFileDialogResult(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofFileDialogResult");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofFileDialogResult_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofFileDialogResult", "ofFileDialogResult");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
