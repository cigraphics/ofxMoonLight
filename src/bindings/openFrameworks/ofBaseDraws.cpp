/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofBaseDraws
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/types/ofBaseTypes.h"


/** virtual ofBaseDraws::~ofBaseDraws()
 * api/openFrameworks/types/ofBaseTypes.h:40
 */
static int ofBaseDraws__ofBaseDraws(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofBaseDraws"));
    if (userdata->gc) {
      ofBaseDraws *self = (ofBaseDraws *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseDraws::draw(float x, float y)=0
 * api/openFrameworks/types/ofBaseTypes.h:41
 */
static int ofBaseDraws_draw(lua_State *L) {
  try {
    ofBaseDraws *self = *((ofBaseDraws **)dub_checksdata(L, 1, "ofBaseDraws"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float w = dub_checknumber(L, 4);
      float h = dub_checknumber(L, 5);
      self->draw(x, y, w, h);
      return 0;
    } else if (top__ >= 4) {
      ofVec3f *point = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      float w = dub_checknumber(L, 3);
      float h = dub_checknumber(L, 4);
      self->draw(*point, w, h);
      return 0;
    } else if (top__ >= 3) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      self->draw(x, y);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
        ofVec3f *point = *((ofVec3f **)ptr2__);
        self->draw(*point);
        return 0;
      } else {
        ofRectangle *rect = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
        self->draw(*rect);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "draw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "draw: Unknown exception");
  }
  return dub_error(L);
}

/** virtual float ofBaseDraws::getHeight()=0
 * api/openFrameworks/types/ofBaseTypes.h:53
 */
static int ofBaseDraws_getHeight(lua_State *L) {
  try {
    ofBaseDraws *self = *((ofBaseDraws **)dub_checksdata(L, 1, "ofBaseDraws"));
    lua_pushnumber(L, self->getHeight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getHeight: Unknown exception");
  }
  return dub_error(L);
}

/** virtual float ofBaseDraws::getWidth()=0
 * api/openFrameworks/types/ofBaseTypes.h:54
 */
static int ofBaseDraws_getWidth(lua_State *L) {
  try {
    ofBaseDraws *self = *((ofBaseDraws **)dub_checksdata(L, 1, "ofBaseDraws"));
    lua_pushnumber(L, self->getWidth());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWidth: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseDraws::setAnchorPercent(float xPct, float yPct)
 * api/openFrameworks/types/ofBaseTypes.h:56
 */
static int ofBaseDraws_setAnchorPercent(lua_State *L) {
  try {
    ofBaseDraws *self = *((ofBaseDraws **)dub_checksdata(L, 1, "ofBaseDraws"));
    float xPct = dub_checknumber(L, 2);
    float yPct = dub_checknumber(L, 3);
    self->setAnchorPercent(xPct, yPct);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAnchorPercent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAnchorPercent: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseDraws::setAnchorPoint(float x, float y)
 * api/openFrameworks/types/ofBaseTypes.h:57
 */
static int ofBaseDraws_setAnchorPoint(lua_State *L) {
  try {
    ofBaseDraws *self = *((ofBaseDraws **)dub_checksdata(L, 1, "ofBaseDraws"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    self->setAnchorPoint(x, y);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAnchorPoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAnchorPoint: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseDraws::resetAnchor()
 * api/openFrameworks/types/ofBaseTypes.h:58
 */
static int ofBaseDraws_resetAnchor(lua_State *L) {
  try {
    ofBaseDraws *self = *((ofBaseDraws **)dub_checksdata(L, 1, "ofBaseDraws"));
    self->resetAnchor();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "resetAnchor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "resetAnchor: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofBaseDraws___tostring(lua_State *L) {
  ofBaseDraws *self = *((ofBaseDraws **)dub_checksdata_n(L, 1, "ofBaseDraws"));
  lua_pushfstring(L, "ofBaseDraws: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofBaseDraws_member_methods[] = {
  { "__gc"         , ofBaseDraws__ofBaseDraws },
  { "draw"         , ofBaseDraws_draw     },
  { "getHeight"    , ofBaseDraws_getHeight },
  { "getWidth"     , ofBaseDraws_getWidth },
  { "setAnchorPercent", ofBaseDraws_setAnchorPercent },
  { "setAnchorPoint", ofBaseDraws_setAnchorPoint },
  { "resetAnchor"  , ofBaseDraws_resetAnchor },
  { "__tostring"   , ofBaseDraws___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofBaseDraws(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofBaseDraws");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofBaseDraws_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofBaseDraws", "ofBaseDraws");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
