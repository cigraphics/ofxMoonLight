/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofHttpRequest
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "utils/ofURLFileLoader.h"


/** ~ofHttpRequest()
 * 
 */
static int ofHttpRequest__ofHttpRequest(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofHttpRequest"));
    if (userdata->gc) {
      ofHttpRequest *self = (ofHttpRequest *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** Set attributes (key, value)
 * 
 */
static int ofHttpRequest__set_(lua_State *L) {

  ofHttpRequest *self = *((ofHttpRequest **)dub_checksdata_n(L, 1, "ofHttpRequest"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 5);
  switch(key_h) {
    case 4: {
      if (DUB_ASSERT_KEY(key, "url")) break;
      size_t url_sz_;
      const char *url = luaL_checklstring(L, 3, &url_sz_);self->url = std::string(url, url_sz_);
      return 0;
    }
    case 2: {
      if (DUB_ASSERT_KEY(key, "name")) break;
      size_t name_sz_;
      const char *name = luaL_checklstring(L, 3, &name_sz_);self->name = std::string(name, name_sz_);
      return 0;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "saveTo")) break;
      self->saveTo = luaL_checkboolean(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int ofHttpRequest__get_(lua_State *L) {

  ofHttpRequest *self = *((ofHttpRequest **)dub_checksdata_n(L, 1, "ofHttpRequest", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 5);
  switch(key_h) {
    case 4: {
      if (DUB_ASSERT_KEY(key, "url")) break;
      lua_pushlstring(L, self->url.data(), self->url.length());
      return 1;
    }
    case 2: {
      if (DUB_ASSERT_KEY(key, "name")) break;
      lua_pushlstring(L, self->name.data(), self->name.length());
      return 1;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "saveTo")) break;
      lua_pushboolean(L, self->saveTo);
      return 1;
    }
  }
  return 0;
}

/** ofHttpRequest::ofHttpRequest()
 * api/openFrameworks/utils/ofURLFileLoader.h:15
 */
static int ofHttpRequest_ofHttpRequest(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      size_t url_sz_;
      const char *url = dub_checklstring(L, 1, &url_sz_);
      size_t name_sz_;
      const char *name = dub_checklstring(L, 2, &name_sz_);
      bool saveTo = dub_checkboolean(L, 3);
      ofHttpRequest *retval__ = new ofHttpRequest(std::string(url, url_sz_), std::string(name, name_sz_), saveTo);
      dub_pushudata(L, retval__, "ofHttpRequest", true);
      return 1;
    } else if (top__ >= 2) {
      size_t url_sz_;
      const char *url = dub_checklstring(L, 1, &url_sz_);
      size_t name_sz_;
      const char *name = dub_checklstring(L, 2, &name_sz_);
      ofHttpRequest *retval__ = new ofHttpRequest(std::string(url, url_sz_), std::string(name, name_sz_));
      dub_pushudata(L, retval__, "ofHttpRequest", true);
      return 1;
    } else {
      ofHttpRequest *retval__ = new ofHttpRequest();
      dub_pushudata(L, retval__, "ofHttpRequest", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** int ofHttpRequest::getID()
 * api/openFrameworks/utils/ofURLFileLoader.h:27
 */
static int ofHttpRequest_getID(lua_State *L) {
  try {
    ofHttpRequest *self = *((ofHttpRequest **)dub_checksdata(L, 1, "ofHttpRequest"));
    lua_pushnumber(L, self->getID());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getID: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getID: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofHttpRequest___tostring(lua_State *L) {
  ofHttpRequest *self = *((ofHttpRequest **)dub_checksdata_n(L, 1, "ofHttpRequest"));
  lua_pushfstring(L, "ofHttpRequest: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofHttpRequest_member_methods[] = {
  { "__gc"         , ofHttpRequest__ofHttpRequest },
  { "__newindex"   , ofHttpRequest__set_  },
  { "__index"      , ofHttpRequest__get_  },
  { "new"          , ofHttpRequest_ofHttpRequest },
  { "getID"        , ofHttpRequest_getID  },
  { "__tostring"   , ofHttpRequest___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofHttpRequest(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofHttpRequest");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofHttpRequest_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofHttpRequest", "ofHttpRequest");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
