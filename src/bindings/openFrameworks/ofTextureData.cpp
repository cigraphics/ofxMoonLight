/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofTextureData
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "gl/ofTexture.h"


/** ~ofTextureData()
 * 
 */
static int ofTextureData__ofTextureData(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofTextureData"));
    if (userdata->gc) {
      ofTextureData *self = (ofTextureData *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** Set attributes (key, value)
 * 
 */
static int ofTextureData__set_(lua_State *L) {

  ofTextureData *self = *((ofTextureData **)dub_checksdata_n(L, 1, "ofTextureData"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 39);
  switch(key_h) {
    case 4: {
      if (DUB_ASSERT_KEY(key, "textureID")) break;
      self->textureID = luaL_checkint(L, 3);
      return 0;
    }
    case 20: {
      if (DUB_ASSERT_KEY(key, "textureTarget")) break;
      self->textureTarget = luaL_checkint(L, 3);
      return 0;
    }
    case 32: {
      if (DUB_ASSERT_KEY(key, "glTypeInternal")) break;
      self->glTypeInternal = luaL_checkint(L, 3);
      return 0;
    }
    case 2: {
      if (DUB_ASSERT_KEY(key, "glType")) break;
      self->glType = luaL_checkint(L, 3);
      return 0;
    }
    case 30: {
      if (DUB_ASSERT_KEY(key, "pixelType")) break;
      self->pixelType = luaL_checkint(L, 3);
      return 0;
    }
    case 33: {
      if (DUB_ASSERT_KEY(key, "tex_t")) break;
      self->tex_t = luaL_checknumber(L, 3);
      return 0;
    }
    case 34: {
      if (DUB_ASSERT_KEY(key, "tex_u")) break;
      self->tex_u = luaL_checknumber(L, 3);
      return 0;
    }
    case 36: {
      if (DUB_ASSERT_KEY(key, "tex_w")) break;
      self->tex_w = luaL_checknumber(L, 3);
      return 0;
    }
    case 21: {
      if (DUB_ASSERT_KEY(key, "tex_h")) break;
      self->tex_h = luaL_checknumber(L, 3);
      return 0;
    }
    case 11: {
      if (DUB_ASSERT_KEY(key, "width")) break;
      self->width = luaL_checknumber(L, 3);
      return 0;
    }
    case 29: {
      if (DUB_ASSERT_KEY(key, "height")) break;
      self->height = luaL_checknumber(L, 3);
      return 0;
    }
    case 12: {
      if (DUB_ASSERT_KEY(key, "bFlipTexture")) break;
      self->bFlipTexture = luaL_checkboolean(L, 3);
      return 0;
    }
    case 18: {
      if (DUB_ASSERT_KEY(key, "compressionType")) break;
      self->compressionType = (ofTexCompression)luaL_checkint(L, 3);
      return 0;
    }
    case 24: {
      if (DUB_ASSERT_KEY(key, "bAllocated")) break;
      self->bAllocated = luaL_checkboolean(L, 3);
      return 0;
    }
    case 5: {
      if (DUB_ASSERT_KEY(key, "bUseExternalTextureID")) break;
      self->bUseExternalTextureID = luaL_checkboolean(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int ofTextureData__get_(lua_State *L) {

  ofTextureData *self = *((ofTextureData **)dub_checksdata_n(L, 1, "ofTextureData", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 39);
  switch(key_h) {
    case 4: {
      if (DUB_ASSERT_KEY(key, "textureID")) break;
      lua_pushnumber(L, self->textureID);
      return 1;
    }
    case 20: {
      if (DUB_ASSERT_KEY(key, "textureTarget")) break;
      lua_pushnumber(L, self->textureTarget);
      return 1;
    }
    case 32: {
      if (DUB_ASSERT_KEY(key, "glTypeInternal")) break;
      lua_pushnumber(L, self->glTypeInternal);
      return 1;
    }
    case 2: {
      if (DUB_ASSERT_KEY(key, "glType")) break;
      lua_pushnumber(L, self->glType);
      return 1;
    }
    case 30: {
      if (DUB_ASSERT_KEY(key, "pixelType")) break;
      lua_pushnumber(L, self->pixelType);
      return 1;
    }
    case 33: {
      if (DUB_ASSERT_KEY(key, "tex_t")) break;
      lua_pushnumber(L, self->tex_t);
      return 1;
    }
    case 34: {
      if (DUB_ASSERT_KEY(key, "tex_u")) break;
      lua_pushnumber(L, self->tex_u);
      return 1;
    }
    case 36: {
      if (DUB_ASSERT_KEY(key, "tex_w")) break;
      lua_pushnumber(L, self->tex_w);
      return 1;
    }
    case 21: {
      if (DUB_ASSERT_KEY(key, "tex_h")) break;
      lua_pushnumber(L, self->tex_h);
      return 1;
    }
    case 11: {
      if (DUB_ASSERT_KEY(key, "width")) break;
      lua_pushnumber(L, self->width);
      return 1;
    }
    case 29: {
      if (DUB_ASSERT_KEY(key, "height")) break;
      lua_pushnumber(L, self->height);
      return 1;
    }
    case 12: {
      if (DUB_ASSERT_KEY(key, "bFlipTexture")) break;
      lua_pushboolean(L, self->bFlipTexture);
      return 1;
    }
    case 18: {
      if (DUB_ASSERT_KEY(key, "compressionType")) break;
      lua_pushnumber(L, self->compressionType);
      return 1;
    }
    case 24: {
      if (DUB_ASSERT_KEY(key, "bAllocated")) break;
      lua_pushboolean(L, self->bAllocated);
      return 1;
    }
    case 5: {
      if (DUB_ASSERT_KEY(key, "bUseExternalTextureID")) break;
      lua_pushboolean(L, self->bUseExternalTextureID);
      return 1;
    }
  }
  return 0;
}

/** ofTextureData::ofTextureData()
 * api/openFrameworks/gl/ofTexture.h:45
 */
static int ofTextureData_ofTextureData(lua_State *L) {
  try {
    ofTextureData *retval__ = new ofTextureData();
    dub_pushudata(L, retval__, "ofTextureData", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofTextureData___tostring(lua_State *L) {
  ofTextureData *self = *((ofTextureData **)dub_checksdata_n(L, 1, "ofTextureData"));
  lua_pushfstring(L, "ofTextureData: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofTextureData_member_methods[] = {
  { "__gc"         , ofTextureData__ofTextureData },
  { "__newindex"   , ofTextureData__set_  },
  { "__index"      , ofTextureData__get_  },
  { "new"          , ofTextureData_ofTextureData },
  { "__tostring"   , ofTextureData___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofTextureData(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofTextureData");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofTextureData_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofTextureData", "ofTextureData");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
