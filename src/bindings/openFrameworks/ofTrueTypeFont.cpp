/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofTrueTypeFont
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "graphics/ofTrueTypeFont.h"


/** ofTrueTypeFont::ofTrueTypeFont()
 * api/openFrameworks/graphics/ofTrueTypeFont.h:36
 */
static int ofTrueTypeFont_ofTrueTypeFont(lua_State *L) {
  try {
    ofTrueTypeFont *retval__ = new ofTrueTypeFont();
    dub_pushudata(L, retval__, "ofTrueTypeFont", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofTrueTypeFont::~ofTrueTypeFont()
 * api/openFrameworks/graphics/ofTrueTypeFont.h:37
 */
static int ofTrueTypeFont__ofTrueTypeFont(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofTrueTypeFont"));
    if (userdata->gc) {
      ofTrueTypeFont *self = (ofTrueTypeFont *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofTrueTypeFont::loadFont(string filename, int fontsize, bool _bAntiAliased=true, bool _bFullCharacterSet=false, bool makeContours=false, float simplifyAmt=0.3, int dpi=0)
 * api/openFrameworks/graphics/ofTrueTypeFont.h:43
 */
static int ofTrueTypeFont_loadFont(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    int top__ = lua_gettop(L);
    if (top__ >= 8) {
      size_t filename_sz_;
      const char *filename = dub_checklstring(L, 2, &filename_sz_);
      int fontsize = dub_checkint(L, 3);
      bool _bAntiAliased = dub_checkboolean(L, 4);
      bool _bFullCharacterSet = dub_checkboolean(L, 5);
      bool makeContours = dub_checkboolean(L, 6);
      float simplifyAmt = dub_checknumber(L, 7);
      int dpi = dub_checkint(L, 8);
      lua_pushboolean(L, self->loadFont(std::string(filename, filename_sz_), fontsize, _bAntiAliased, _bFullCharacterSet, makeContours, simplifyAmt, dpi));
      return 1;
    } else if (top__ >= 7) {
      size_t filename_sz_;
      const char *filename = dub_checklstring(L, 2, &filename_sz_);
      int fontsize = dub_checkint(L, 3);
      bool _bAntiAliased = dub_checkboolean(L, 4);
      bool _bFullCharacterSet = dub_checkboolean(L, 5);
      bool makeContours = dub_checkboolean(L, 6);
      float simplifyAmt = dub_checknumber(L, 7);
      lua_pushboolean(L, self->loadFont(std::string(filename, filename_sz_), fontsize, _bAntiAliased, _bFullCharacterSet, makeContours, simplifyAmt));
      return 1;
    } else if (top__ >= 6) {
      size_t filename_sz_;
      const char *filename = dub_checklstring(L, 2, &filename_sz_);
      int fontsize = dub_checkint(L, 3);
      bool _bAntiAliased = dub_checkboolean(L, 4);
      bool _bFullCharacterSet = dub_checkboolean(L, 5);
      bool makeContours = dub_checkboolean(L, 6);
      lua_pushboolean(L, self->loadFont(std::string(filename, filename_sz_), fontsize, _bAntiAliased, _bFullCharacterSet, makeContours));
      return 1;
    } else if (top__ >= 5) {
      size_t filename_sz_;
      const char *filename = dub_checklstring(L, 2, &filename_sz_);
      int fontsize = dub_checkint(L, 3);
      bool _bAntiAliased = dub_checkboolean(L, 4);
      bool _bFullCharacterSet = dub_checkboolean(L, 5);
      lua_pushboolean(L, self->loadFont(std::string(filename, filename_sz_), fontsize, _bAntiAliased, _bFullCharacterSet));
      return 1;
    } else if (top__ >= 4) {
      size_t filename_sz_;
      const char *filename = dub_checklstring(L, 2, &filename_sz_);
      int fontsize = dub_checkint(L, 3);
      bool _bAntiAliased = dub_checkboolean(L, 4);
      lua_pushboolean(L, self->loadFont(std::string(filename, filename_sz_), fontsize, _bAntiAliased));
      return 1;
    } else {
      size_t filename_sz_;
      const char *filename = dub_checklstring(L, 2, &filename_sz_);
      int fontsize = dub_checkint(L, 3);
      lua_pushboolean(L, self->loadFont(std::string(filename, filename_sz_), fontsize));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "loadFont: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "loadFont: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofTrueTypeFont::isLoaded()
 * api/openFrameworks/graphics/ofTrueTypeFont.h:45
 */
static int ofTrueTypeFont_isLoaded(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    lua_pushboolean(L, self->isLoaded());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isLoaded: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isLoaded: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofTrueTypeFont::isAntiAliased()
 * api/openFrameworks/graphics/ofTrueTypeFont.h:46
 */
static int ofTrueTypeFont_isAntiAliased(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    lua_pushboolean(L, self->isAntiAliased());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isAntiAliased: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isAntiAliased: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofTrueTypeFont::hasFullCharacterSet()
 * api/openFrameworks/graphics/ofTrueTypeFont.h:47
 */
static int ofTrueTypeFont_hasFullCharacterSet(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    lua_pushboolean(L, self->hasFullCharacterSet());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "hasFullCharacterSet: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "hasFullCharacterSet: Unknown exception");
  }
  return dub_error(L);
}

/** int ofTrueTypeFont::getSize()
 * api/openFrameworks/graphics/ofTrueTypeFont.h:49
 */
static int ofTrueTypeFont_getSize(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    lua_pushnumber(L, self->getSize());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSize: Unknown exception");
  }
  return dub_error(L);
}

/** float ofTrueTypeFont::getLineHeight()
 * api/openFrameworks/graphics/ofTrueTypeFont.h:50
 */
static int ofTrueTypeFont_getLineHeight(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    lua_pushnumber(L, self->getLineHeight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLineHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLineHeight: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTrueTypeFont::setLineHeight(float height)
 * api/openFrameworks/graphics/ofTrueTypeFont.h:51
 */
static int ofTrueTypeFont_setLineHeight(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    float height = dub_checknumber(L, 2);
    self->setLineHeight(height);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setLineHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setLineHeight: Unknown exception");
  }
  return dub_error(L);
}

/** float ofTrueTypeFont::getLetterSpacing()
 * api/openFrameworks/graphics/ofTrueTypeFont.h:52
 */
static int ofTrueTypeFont_getLetterSpacing(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    lua_pushnumber(L, self->getLetterSpacing());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLetterSpacing: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLetterSpacing: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTrueTypeFont::setLetterSpacing(float spacing)
 * api/openFrameworks/graphics/ofTrueTypeFont.h:53
 */
static int ofTrueTypeFont_setLetterSpacing(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    float spacing = dub_checknumber(L, 2);
    self->setLetterSpacing(spacing);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setLetterSpacing: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setLetterSpacing: Unknown exception");
  }
  return dub_error(L);
}

/** float ofTrueTypeFont::getSpaceSize()
 * api/openFrameworks/graphics/ofTrueTypeFont.h:54
 */
static int ofTrueTypeFont_getSpaceSize(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    lua_pushnumber(L, self->getSpaceSize());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSpaceSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSpaceSize: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTrueTypeFont::setSpaceSize(float size)
 * api/openFrameworks/graphics/ofTrueTypeFont.h:55
 */
static int ofTrueTypeFont_setSpaceSize(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    float size = dub_checknumber(L, 2);
    self->setSpaceSize(size);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSpaceSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSpaceSize: Unknown exception");
  }
  return dub_error(L);
}

/** float ofTrueTypeFont::stringWidth(string s)
 * api/openFrameworks/graphics/ofTrueTypeFont.h:56
 */
static int ofTrueTypeFont_stringWidth(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    size_t s_sz_;
    const char *s = dub_checklstring(L, 2, &s_sz_);
    lua_pushnumber(L, self->stringWidth(std::string(s, s_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "stringWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "stringWidth: Unknown exception");
  }
  return dub_error(L);
}

/** float ofTrueTypeFont::stringHeight(string s)
 * api/openFrameworks/graphics/ofTrueTypeFont.h:57
 */
static int ofTrueTypeFont_stringHeight(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    size_t s_sz_;
    const char *s = dub_checklstring(L, 2, &s_sz_);
    lua_pushnumber(L, self->stringHeight(std::string(s, s_sz_)));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "stringHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "stringHeight: Unknown exception");
  }
  return dub_error(L);
}

/** ofRectangle ofTrueTypeFont::getStringBoundingBox(string s, float x, float y)
 * api/openFrameworks/graphics/ofTrueTypeFont.h:59
 */
static int ofTrueTypeFont_getStringBoundingBox(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    size_t s_sz_;
    const char *s = dub_checklstring(L, 2, &s_sz_);
    float x = dub_checknumber(L, 3);
    float y = dub_checknumber(L, 4);
    dub_pushudata(L, new ofRectangle(self->getStringBoundingBox(std::string(s, s_sz_), x, y)), "ofRectangle", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getStringBoundingBox: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getStringBoundingBox: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTrueTypeFont::drawString(string s, float x, float y)
 * api/openFrameworks/graphics/ofTrueTypeFont.h:61
 */
static int ofTrueTypeFont_drawString(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    size_t s_sz_;
    const char *s = dub_checklstring(L, 2, &s_sz_);
    float x = dub_checknumber(L, 3);
    float y = dub_checknumber(L, 4);
    self->drawString(std::string(s, s_sz_), x, y);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawString: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawString: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTrueTypeFont::drawStringAsShapes(string s, float x, float y)
 * api/openFrameworks/graphics/ofTrueTypeFont.h:62
 */
static int ofTrueTypeFont_drawStringAsShapes(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    size_t s_sz_;
    const char *s = dub_checklstring(L, 2, &s_sz_);
    float x = dub_checknumber(L, 3);
    float y = dub_checknumber(L, 4);
    self->drawStringAsShapes(std::string(s, s_sz_), x, y);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawStringAsShapes: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawStringAsShapes: Unknown exception");
  }
  return dub_error(L);
}

/** int ofTrueTypeFont::getNumCharacters()
 * api/openFrameworks/graphics/ofTrueTypeFont.h:65
 */
static int ofTrueTypeFont_getNumCharacters(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    lua_pushnumber(L, self->getNumCharacters());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNumCharacters: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNumCharacters: Unknown exception");
  }
  return dub_error(L);
}

/** ofTTFCharacter ofTrueTypeFont::getCharacterAsPoints(int character)
 * api/openFrameworks/graphics/ofTrueTypeFont.h:67
 */
static int ofTrueTypeFont_getCharacterAsPoints(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    int character = dub_checkint(L, 2);
    dub_pushudata(L, new ofPath(self->getCharacterAsPoints(character)), "ofPath", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCharacterAsPoints: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCharacterAsPoints: Unknown exception");
  }
  return dub_error(L);
}

/** vector<ofTTFCharacter> ofTrueTypeFont::getStringAsPoints(string str)
 * api/openFrameworks/graphics/ofTrueTypeFont.h:68
 */
static int ofTrueTypeFont_getStringAsPoints(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    size_t str_sz_;
    const char *str = dub_checklstring(L, 2, &str_sz_);
    dub_pushudata(L, new vector< ofTTFCharacter >(self->getStringAsPoints(std::string(str, str_sz_))), "vector< ofTTFCharacter >", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getStringAsPoints: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getStringAsPoints: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTrueTypeFont::bind()
 * api/openFrameworks/graphics/ofTrueTypeFont.h:70
 */
static int ofTrueTypeFont_bind(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    self->bind();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "bind: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "bind: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTrueTypeFont::unbind()
 * api/openFrameworks/graphics/ofTrueTypeFont.h:71
 */
static int ofTrueTypeFont_unbind(lua_State *L) {
  try {
    ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata(L, 1, "ofTrueTypeFont"));
    self->unbind();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "unbind: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "unbind: Unknown exception");
  }
  return dub_error(L);
}

/** static void ofTrueTypeFont::setGlobalDpi(int newDpi)
 * api/openFrameworks/graphics/ofTrueTypeFont.h:40
 */
static int ofTrueTypeFont_setGlobalDpi(lua_State *L) {
  try {
    int newDpi = dub_checkint(L, 1);
    ofTrueTypeFont::setGlobalDpi(newDpi);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setGlobalDpi: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setGlobalDpi: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofTrueTypeFont___tostring(lua_State *L) {
  ofTrueTypeFont *self = *((ofTrueTypeFont **)dub_checksdata_n(L, 1, "ofTrueTypeFont"));
  lua_pushfstring(L, "ofTrueTypeFont: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofTrueTypeFont_member_methods[] = {
  { "new"          , ofTrueTypeFont_ofTrueTypeFont },
  { "__gc"         , ofTrueTypeFont__ofTrueTypeFont },
  { "loadFont"     , ofTrueTypeFont_loadFont },
  { "isLoaded"     , ofTrueTypeFont_isLoaded },
  { "isAntiAliased", ofTrueTypeFont_isAntiAliased },
  { "hasFullCharacterSet", ofTrueTypeFont_hasFullCharacterSet },
  { "getSize"      , ofTrueTypeFont_getSize },
  { "getLineHeight", ofTrueTypeFont_getLineHeight },
  { "setLineHeight", ofTrueTypeFont_setLineHeight },
  { "getLetterSpacing", ofTrueTypeFont_getLetterSpacing },
  { "setLetterSpacing", ofTrueTypeFont_setLetterSpacing },
  { "getSpaceSize" , ofTrueTypeFont_getSpaceSize },
  { "setSpaceSize" , ofTrueTypeFont_setSpaceSize },
  { "stringWidth"  , ofTrueTypeFont_stringWidth },
  { "stringHeight" , ofTrueTypeFont_stringHeight },
  { "getStringBoundingBox", ofTrueTypeFont_getStringBoundingBox },
  { "drawString"   , ofTrueTypeFont_drawString },
  { "drawStringAsShapes", ofTrueTypeFont_drawStringAsShapes },
  { "getNumCharacters", ofTrueTypeFont_getNumCharacters },
  { "getCharacterAsPoints", ofTrueTypeFont_getCharacterAsPoints },
  { "getStringAsPoints", ofTrueTypeFont_getStringAsPoints },
  { "bind"         , ofTrueTypeFont_bind  },
  { "unbind"       , ofTrueTypeFont_unbind },
  { "setGlobalDpi" , ofTrueTypeFont_setGlobalDpi },
  { "__tostring"   , ofTrueTypeFont___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofTrueTypeFont(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofTrueTypeFont");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofTrueTypeFont_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofTrueTypeFont", "ofTrueTypeFont");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
