/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofThread
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/utils/ofThread.h"


/** ofThread::ofThread()
 * api/openFrameworks/utils/ofThread.h:16
 */
static int ofThread_ofThread(lua_State *L) {
  try {
    ofThread *retval__ = new ofThread();
    dub_pushudata(L, retval__, "ofThread", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofThread::~ofThread()
 * api/openFrameworks/utils/ofThread.h:17
 */
static int ofThread__ofThread(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofThread"));
    if (userdata->gc) {
      ofThread *self = (ofThread *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofThread::isThreadRunning()
 * api/openFrameworks/utils/ofThread.h:20
 */
static int ofThread_isThreadRunning(lua_State *L) {
  try {
    ofThread *self = *((ofThread **)dub_checksdata(L, 1, "ofThread"));
    lua_pushboolean(L, self->isThreadRunning());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isThreadRunning: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isThreadRunning: Unknown exception");
  }
  return dub_error(L);
}

/** int ofThread::getThreadId()
 * api/openFrameworks/utils/ofThread.h:25
 */
static int ofThread_getThreadId(lua_State *L) {
  try {
    ofThread *self = *((ofThread **)dub_checksdata(L, 1, "ofThread"));
    lua_pushnumber(L, self->getThreadId());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getThreadId: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getThreadId: Unknown exception");
  }
  return dub_error(L);
}

/** string ofThread::getThreadName()
 * api/openFrameworks/utils/ofThread.h:28
 */
static int ofThread_getThreadName(lua_State *L) {
  try {
    ofThread *self = *((ofThread **)dub_checksdata(L, 1, "ofThread"));
    dub_pushudata(L, new string(self->getThreadName()), "string", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getThreadName: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getThreadName: Unknown exception");
  }
  return dub_error(L);
}

/** void ofThread::startThread(bool blocking=true, bool verbose=false)
 * api/openFrameworks/utils/ofThread.h:36
 */
static int ofThread_startThread(lua_State *L) {
  try {
    ofThread *self = *((ofThread **)dub_checksdata(L, 1, "ofThread"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      bool blocking = dub_checkboolean(L, 2);
      bool verbose = dub_checkboolean(L, 3);
      self->startThread(blocking, verbose);
      return 0;
    } else if (top__ >= 2) {
      bool blocking = dub_checkboolean(L, 2);
      self->startThread(blocking);
      return 0;
    } else {
      self->startThread();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "startThread: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "startThread: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofThread::lock()
 * api/openFrameworks/utils/ofThread.h:45
 */
static int ofThread_lock(lua_State *L) {
  try {
    ofThread *self = *((ofThread **)dub_checksdata(L, 1, "ofThread"));
    lua_pushboolean(L, self->lock());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "lock: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "lock: Unknown exception");
  }
  return dub_error(L);
}

/** void ofThread::unlock()
 * api/openFrameworks/utils/ofThread.h:51
 */
static int ofThread_unlock(lua_State *L) {
  try {
    ofThread *self = *((ofThread **)dub_checksdata(L, 1, "ofThread"));
    self->unlock();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "unlock: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "unlock: Unknown exception");
  }
  return dub_error(L);
}

/** void ofThread::stopThread()
 * api/openFrameworks/utils/ofThread.h:54
 */
static int ofThread_stopThread(lua_State *L) {
  try {
    ofThread *self = *((ofThread **)dub_checksdata(L, 1, "ofThread"));
    self->stopThread();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "stopThread: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "stopThread: Unknown exception");
  }
  return dub_error(L);
}

/** void ofThread::waitForThread(bool stop=true)
 * api/openFrameworks/utils/ofThread.h:67
 */
static int ofThread_waitForThread(lua_State *L) {
  try {
    ofThread *self = *((ofThread **)dub_checksdata(L, 1, "ofThread"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      bool stop = dub_checkboolean(L, 2);
      self->waitForThread(stop);
      return 0;
    } else {
      self->waitForThread();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "waitForThread: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "waitForThread: Unknown exception");
  }
  return dub_error(L);
}

/** void ofThread::sleep(int sleepMS)
 * api/openFrameworks/utils/ofThread.h:99
 */
static int ofThread_sleep(lua_State *L) {
  try {
    ofThread *self = *((ofThread **)dub_checksdata(L, 1, "ofThread"));
    int sleepMS = dub_checkint(L, 2);
    self->sleep(sleepMS);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "sleep: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "sleep: Unknown exception");
  }
  return dub_error(L);
}

/** void ofThread::yield()
 * api/openFrameworks/utils/ofThread.h:110
 */
static int ofThread_yield(lua_State *L) {
  try {
    ofThread *self = *((ofThread **)dub_checksdata(L, 1, "ofThread"));
    self->yield();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "yield: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "yield: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofThread::isCurrentThread()
 * api/openFrameworks/utils/ofThread.h:128
 */
static int ofThread_isCurrentThread(lua_State *L) {
  try {
    ofThread *self = *((ofThread **)dub_checksdata(L, 1, "ofThread"));
    lua_pushboolean(L, self->isCurrentThread());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isCurrentThread: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isCurrentThread: Unknown exception");
  }
  return dub_error(L);
}

/** Poco::Thread& ofThread::getPocoThread()
 * api/openFrameworks/utils/ofThread.h:131
 */
static int ofThread_getPocoThread(lua_State *L) {
  try {
    ofThread *self = *((ofThread **)dub_checksdata(L, 1, "ofThread"));
    dub_pushudata(L, &self->getPocoThread(), "Poco::Thread", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPocoThread: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPocoThread: Unknown exception");
  }
  return dub_error(L);
}

/** static bool ofThread::isMainThread()
 * api/openFrameworks/utils/ofThread.h:134
 */
static int ofThread_isMainThread(lua_State *L) {
  try {
    lua_pushboolean(L, ofThread::isMainThread());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isMainThread: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isMainThread: Unknown exception");
  }
  return dub_error(L);
}

/** static ofThread* ofThread::getCurrentThread()
 * api/openFrameworks/utils/ofThread.h:148
 */
static int ofThread_getCurrentThread(lua_State *L) {
  try {
    ofThread *retval__ = ofThread::getCurrentThread();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "ofThread", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCurrentThread: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCurrentThread: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofThread___tostring(lua_State *L) {
  ofThread *self = *((ofThread **)dub_checksdata_n(L, 1, "ofThread"));
  lua_pushfstring(L, "ofThread: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofThread_member_methods[] = {
  { "new"          , ofThread_ofThread    },
  { "__gc"         , ofThread__ofThread   },
  { "isThreadRunning", ofThread_isThreadRunning },
  { "getThreadId"  , ofThread_getThreadId },
  { "getThreadName", ofThread_getThreadName },
  { "startThread"  , ofThread_startThread },
  { "lock"         , ofThread_lock        },
  { "unlock"       , ofThread_unlock      },
  { "stopThread"   , ofThread_stopThread  },
  { "waitForThread", ofThread_waitForThread },
  { "sleep"        , ofThread_sleep       },
  { "yield"        , ofThread_yield       },
  { "isCurrentThread", ofThread_isCurrentThread },
  { "getPocoThread", ofThread_getPocoThread },
  { "isMainThread" , ofThread_isMainThread },
  { "getCurrentThread", ofThread_getCurrentThread },
  { "__tostring"   , ofThread___tostring  },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofThread(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofThread");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofThread_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofThread", "ofThread");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
