/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofVec2f
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/math/ofVec2f.h"


/** ~ofVec2f()
 * 
 */
static int ofVec2f__ofVec2f(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofVec2f"));
    if (userdata->gc) {
      ofVec2f *self = (ofVec2f *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** Set attributes (key, value)
 * 
 */
static int ofVec2f__set_(lua_State *L) {

  ofVec2f *self = *((ofVec2f **)dub_checksdata_n(L, 1, "ofVec2f"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "x")) break;
      self->x = luaL_checknumber(L, 3);
      return 0;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "y")) break;
      self->y = luaL_checknumber(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** ofVec2f::ofVec2f()
 * api/openFrameworks/math/ofVec2f.h:13
 */
static int ofVec2f_ofVec2f(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      float _x = dub_checknumber(L, 1);
      float _y = dub_checknumber(L, 2);
      ofVec2f *retval__ = new ofVec2f(_x, _y);
      dub_pushudata(L, retval__, "ofVec2f", true);
      return 1;
    } else if (top__ >= 1) {
      int type__ = lua_type(L, 1);
      void **ptr1__;
      if (type__ == LUA_TNUMBER) {
        float _scalar = dub_checknumber(L, 1);
        ofVec2f *retval__ = new ofVec2f(_scalar);
        dub_pushudata(L, retval__, "ofVec2f", true);
        return 1;
      } else if ( (ptr1__ = dub_issdata(L, 1, "ofVec3f", type__)) ) {
        ofVec3f *vec = *((ofVec3f **)ptr1__);
        ofVec2f *retval__ = new ofVec2f(*vec);
        dub_pushudata(L, retval__, "ofVec2f", true);
        return 1;
      } else {
        ofVec4f *vec = *((ofVec4f **)dub_checksdata(L, 1, "ofVec4f"));
        ofVec2f *retval__ = new ofVec2f(*vec);
        dub_pushudata(L, retval__, "ofVec2f", true);
        return 1;
      }
    } else {
      ofVec2f *retval__ = new ofVec2f();
      dub_pushudata(L, retval__, "ofVec2f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** float* ofVec2f::getPtr()
 * api/openFrameworks/math/ofVec2f.h:19
 */
static int ofVec2f_getPtr(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    float *retval__ = self->getPtr();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "float", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPtr: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPtr: Unknown exception");
  }
  return dub_error(L);
}

/** float& ofVec2f::operator[](int n)
 * api/openFrameworks/math/ofVec2f.h:26
 */
static int ofVec2f__get_(lua_State *L) {

  ofVec2f *self = *((ofVec2f **)dub_checksdata_n(L, 1, "ofVec2f", true));
  if (lua_type(L, 2) != LUA_TSTRING) {
    int n = luaL_checkint(L, 2);
    lua_pushnumber(L, self->operator[](n));
    return 1;
  }
  
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "x")) break;
      lua_pushnumber(L, self->x);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "y")) break;
      lua_pushnumber(L, self->y);
      return 1;
    }
  }
  return 0;
}

/** void ofVec2f::set(float _scalar)
 * api/openFrameworks/math/ofVec2f.h:37
 */
static int ofVec2f_set(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float _x = dub_checknumber(L, 2);
      float _y = dub_checknumber(L, 3);
      self->set(_x, _y);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float _scalar = dub_checknumber(L, 2);
        self->set(_scalar);
        return 0;
      } else {
        ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
        self->set(*vec);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofVec2f::operator==(const ofVec2f &vec) const
 * api/openFrameworks/math/ofVec2f.h:43
 */
static int ofVec2f_operator_eq(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    lua_pushboolean(L, self->operator==(*vec));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__eq: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__eq: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofVec2f::match(const ofVec2f &vec, float tolerance=0.0001) const
 * api/openFrameworks/math/ofVec2f.h:45
 */
static int ofVec2f_match(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      float tolerance = dub_checknumber(L, 3);
      lua_pushboolean(L, self->match(*vec, tolerance));
      return 1;
    } else {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      lua_pushboolean(L, self->match(*vec));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "match: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "match: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofVec2f::isAligned(const ofVec2f &vec, float tolerance=0.0001) const
 * api/openFrameworks/math/ofVec2f.h:50
 */
static int ofVec2f_isAligned(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      float tolerance = dub_checknumber(L, 3);
      lua_pushboolean(L, self->isAligned(*vec, tolerance));
      return 1;
    } else {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      lua_pushboolean(L, self->isAligned(*vec));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "isAligned: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isAligned: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofVec2f::isAlignedRad(const ofVec2f &vec, float tolerance=0.0001) const
 * api/openFrameworks/math/ofVec2f.h:51
 */
static int ofVec2f_isAlignedRad(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      float tolerance = dub_checknumber(L, 3);
      lua_pushboolean(L, self->isAlignedRad(*vec, tolerance));
      return 1;
    } else {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      lua_pushboolean(L, self->isAlignedRad(*vec));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "isAlignedRad: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isAlignedRad: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofVec2f::align(const ofVec2f &vec, float tolerance=0.0001) const
 * api/openFrameworks/math/ofVec2f.h:52
 */
static int ofVec2f_align(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      float tolerance = dub_checknumber(L, 3);
      lua_pushboolean(L, self->align(*vec, tolerance));
      return 1;
    } else {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      lua_pushboolean(L, self->align(*vec));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "align: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "align: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofVec2f::alignRad(const ofVec2f &vec, float tolerance=0.0001) const
 * api/openFrameworks/math/ofVec2f.h:53
 */
static int ofVec2f_alignRad(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      float tolerance = dub_checknumber(L, 3);
      lua_pushboolean(L, self->alignRad(*vec, tolerance));
      return 1;
    } else {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      lua_pushboolean(L, self->alignRad(*vec));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "alignRad: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "alignRad: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::operator+(const ofVec2f &vec) const
 * api/openFrameworks/math/ofVec2f.h:58
 */
static int ofVec2f_operator_add(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TNUMBER) {
      const float f = dub_checknumber(L, 2);
      dub_pushudata(L, new ofVec2f(self->operator+(f)), "ofVec2f", true);
      return 1;
    } else {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      dub_pushudata(L, new ofVec2f(self->operator+(*vec)), "ofVec2f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "__add: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__add: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f& ofVec2f::operator+=(const ofVec2f &vec)
 * api/openFrameworks/math/ofVec2f.h:59
 */
static int ofVec2f_operator_adde(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TNUMBER) {
      const float f = dub_checknumber(L, 2);
      dub_pushudata(L, &self->operator+=(f), "ofVec2f", false);
      return 1;
    } else {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      dub_pushudata(L, &self->operator+=(*vec), "ofVec2f", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "add: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "add: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::operator-(const ofVec2f &vec) const
 * api/openFrameworks/math/ofVec2f.h:60
 */
static int ofVec2f_operator_sub(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TNUMBER) {
      const float f = dub_checknumber(L, 2);
      dub_pushudata(L, new ofVec2f(self->operator-(f)), "ofVec2f", true);
      return 1;
    } else {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      dub_pushudata(L, new ofVec2f(self->operator-(*vec)), "ofVec2f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "__sub: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__sub: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f& ofVec2f::operator-=(const ofVec2f &vec)
 * api/openFrameworks/math/ofVec2f.h:61
 */
static int ofVec2f_operator_sube(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TNUMBER) {
      const float f = dub_checknumber(L, 2);
      dub_pushudata(L, &self->operator-=(f), "ofVec2f", false);
      return 1;
    } else {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      dub_pushudata(L, &self->operator-=(*vec), "ofVec2f", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "sub: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "sub: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::operator*(const ofVec2f &vec) const
 * api/openFrameworks/math/ofVec2f.h:62
 */
static int ofVec2f_operator_mul(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TNUMBER) {
      const float f = dub_checknumber(L, 2);
      dub_pushudata(L, new ofVec2f(self->operator*(f)), "ofVec2f", true);
      return 1;
    } else {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      dub_pushudata(L, new ofVec2f(self->operator*(*vec)), "ofVec2f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "__mul: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__mul: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f& ofVec2f::operator*=(const ofVec2f &vec)
 * api/openFrameworks/math/ofVec2f.h:63
 */
static int ofVec2f_operator_mule(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TNUMBER) {
      const float f = dub_checknumber(L, 2);
      dub_pushudata(L, &self->operator*=(f), "ofVec2f", false);
      return 1;
    } else {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      dub_pushudata(L, &self->operator*=(*vec), "ofVec2f", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "mul: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mul: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::operator/(const ofVec2f &vec) const
 * api/openFrameworks/math/ofVec2f.h:64
 */
static int ofVec2f_operator_div(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TNUMBER) {
      const float f = dub_checknumber(L, 2);
      dub_pushudata(L, new ofVec2f(self->operator/(f)), "ofVec2f", true);
      return 1;
    } else {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      dub_pushudata(L, new ofVec2f(self->operator/(*vec)), "ofVec2f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "__div: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__div: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f& ofVec2f::operator/=(const ofVec2f &vec)
 * api/openFrameworks/math/ofVec2f.h:65
 */
static int ofVec2f_operator_dive(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TNUMBER) {
      const float f = dub_checknumber(L, 2);
      dub_pushudata(L, &self->operator/=(f), "ofVec2f", false);
      return 1;
    } else {
      ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      dub_pushudata(L, &self->operator/=(*vec), "ofVec2f", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "div: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "div: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::operator-() const
 * api/openFrameworks/math/ofVec2f.h:75
 */
static int ofVec2f_operator_unm(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    dub_pushudata(L, new ofVec2f(self->operator- ()), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__unm: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__unm: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::getScaled(const float length) const
 * api/openFrameworks/math/ofVec2f.h:86
 */
static int ofVec2f_getScaled(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    const float length = dub_checknumber(L, 2);
    dub_pushudata(L, new ofVec2f(self->getScaled(length)), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getScaled: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getScaled: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f& ofVec2f::scale(const float length)
 * api/openFrameworks/math/ofVec2f.h:87
 */
static int ofVec2f_scale(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    const float length = dub_checknumber(L, 2);
    dub_pushudata(L, &self->scale(length), "ofVec2f", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "scale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "scale: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::getRotated(float angle) const
 * api/openFrameworks/math/ofVec2f.h:92
 */
static int ofVec2f_getRotated(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float angle = dub_checknumber(L, 2);
      ofVec2f *pivot = *((ofVec2f **)dub_checksdata(L, 3, "ofVec2f"));
      dub_pushudata(L, new ofVec2f(self->getRotated(angle, *pivot)), "ofVec2f", true);
      return 1;
    } else {
      float angle = dub_checknumber(L, 2);
      dub_pushudata(L, new ofVec2f(self->getRotated(angle)), "ofVec2f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRotated: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRotated: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::getRotatedRad(float angle) const
 * api/openFrameworks/math/ofVec2f.h:93
 */
static int ofVec2f_getRotatedRad(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float angle = dub_checknumber(L, 2);
      ofVec2f *pivot = *((ofVec2f **)dub_checksdata(L, 3, "ofVec2f"));
      dub_pushudata(L, new ofVec2f(self->getRotatedRad(angle, *pivot)), "ofVec2f", true);
      return 1;
    } else {
      float angle = dub_checknumber(L, 2);
      dub_pushudata(L, new ofVec2f(self->getRotatedRad(angle)), "ofVec2f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRotatedRad: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRotatedRad: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f& ofVec2f::rotate(float angle)
 * api/openFrameworks/math/ofVec2f.h:94
 */
static int ofVec2f_rotate(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float angle = dub_checknumber(L, 2);
      ofVec2f *pivot = *((ofVec2f **)dub_checksdata(L, 3, "ofVec2f"));
      dub_pushudata(L, &self->rotate(angle, *pivot), "ofVec2f", false);
      return 1;
    } else {
      float angle = dub_checknumber(L, 2);
      dub_pushudata(L, &self->rotate(angle), "ofVec2f", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotate: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f& ofVec2f::rotateRad(float angle)
 * api/openFrameworks/math/ofVec2f.h:95
 */
static int ofVec2f_rotateRad(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float angle = dub_checknumber(L, 2);
      ofVec2f *pivot = *((ofVec2f **)dub_checksdata(L, 3, "ofVec2f"));
      dub_pushudata(L, &self->rotateRad(angle, *pivot), "ofVec2f", false);
      return 1;
    } else {
      float angle = dub_checknumber(L, 2);
      dub_pushudata(L, &self->rotateRad(angle), "ofVec2f", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotateRad: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotateRad: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::getMapped(const ofVec2f &origin, const ofVec2f &vx, const ofVec2f &vy) const
 * api/openFrameworks/math/ofVec2f.h:110
 */
static int ofVec2f_getMapped(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    ofVec2f *origin = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    ofVec2f *vx = *((ofVec2f **)dub_checksdata(L, 3, "ofVec2f"));
    ofVec2f *vy = *((ofVec2f **)dub_checksdata(L, 4, "ofVec2f"));
    dub_pushudata(L, new ofVec2f(self->getMapped(*origin, *vx, *vy)), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getMapped: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getMapped: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f& ofVec2f::map(const ofVec2f &origin, const ofVec2f &vx, const ofVec2f &vy)
 * api/openFrameworks/math/ofVec2f.h:112
 */
static int ofVec2f_map(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    ofVec2f *origin = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    ofVec2f *vx = *((ofVec2f **)dub_checksdata(L, 3, "ofVec2f"));
    ofVec2f *vy = *((ofVec2f **)dub_checksdata(L, 4, "ofVec2f"));
    dub_pushudata(L, &self->map(*origin, *vx, *vy), "ofVec2f", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "map: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "map: Unknown exception");
  }
  return dub_error(L);
}

/** float ofVec2f::distance(const ofVec2f &pnt) const
 * api/openFrameworks/math/ofVec2f.h:117
 */
static int ofVec2f_distance(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    ofVec2f *pnt = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    lua_pushnumber(L, self->distance(*pnt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "distance: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "distance: Unknown exception");
  }
  return dub_error(L);
}

/** float ofVec2f::squareDistance(const ofVec2f &pnt) const
 * api/openFrameworks/math/ofVec2f.h:118
 */
static int ofVec2f_squareDistance(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    ofVec2f *pnt = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    lua_pushnumber(L, self->squareDistance(*pnt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "squareDistance: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "squareDistance: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::getInterpolated(const ofVec2f &pnt, float p) const
 * api/openFrameworks/math/ofVec2f.h:128
 */
static int ofVec2f_getInterpolated(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    ofVec2f *pnt = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    float p = dub_checknumber(L, 3);
    dub_pushudata(L, new ofVec2f(self->getInterpolated(*pnt, p)), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getInterpolated: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getInterpolated: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f& ofVec2f::interpolate(const ofVec2f &pnt, float p)
 * api/openFrameworks/math/ofVec2f.h:129
 */
static int ofVec2f_interpolate(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    ofVec2f *pnt = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    float p = dub_checknumber(L, 3);
    dub_pushudata(L, &self->interpolate(*pnt, p), "ofVec2f", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "interpolate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "interpolate: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::getMiddle(const ofVec2f &pnt) const
 * api/openFrameworks/math/ofVec2f.h:130
 */
static int ofVec2f_getMiddle(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    ofVec2f *pnt = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    dub_pushudata(L, new ofVec2f(self->getMiddle(*pnt)), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getMiddle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getMiddle: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f& ofVec2f::middle(const ofVec2f &pnt)
 * api/openFrameworks/math/ofVec2f.h:131
 */
static int ofVec2f_middle(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    ofVec2f *pnt = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    dub_pushudata(L, &self->middle(*pnt), "ofVec2f", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "middle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "middle: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f& ofVec2f::average(const ofVec2f *points, int num)
 * api/openFrameworks/math/ofVec2f.h:132
 */
static int ofVec2f_average(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    ofVec2f *points = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    int num = dub_checkint(L, 3);
    dub_pushudata(L, &self->average(points, num), "ofVec2f", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "average: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "average: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::getNormalized() const
 * api/openFrameworks/math/ofVec2f.h:137
 */
static int ofVec2f_getNormalized(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    dub_pushudata(L, new ofVec2f(self->getNormalized()), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNormalized: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNormalized: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f& ofVec2f::normalize()
 * api/openFrameworks/math/ofVec2f.h:138
 */
static int ofVec2f_normalize(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    dub_pushudata(L, &self->normalize(), "ofVec2f", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "normalize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "normalize: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::getLimited(float max) const
 * api/openFrameworks/math/ofVec2f.h:143
 */
static int ofVec2f_getLimited(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    float max = dub_checknumber(L, 2);
    dub_pushudata(L, new ofVec2f(self->getLimited(max)), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLimited: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLimited: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f& ofVec2f::limit(float max)
 * api/openFrameworks/math/ofVec2f.h:144
 */
static int ofVec2f_limit(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    float max = dub_checknumber(L, 2);
    dub_pushudata(L, &self->limit(max), "ofVec2f", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "limit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "limit: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::getPerpendicular() const
 * api/openFrameworks/math/ofVec2f.h:149
 */
static int ofVec2f_getPerpendicular(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    dub_pushudata(L, new ofVec2f(self->getPerpendicular()), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPerpendicular: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPerpendicular: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f& ofVec2f::perpendicular()
 * api/openFrameworks/math/ofVec2f.h:150
 */
static int ofVec2f_perpendicular(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    dub_pushudata(L, &self->perpendicular(), "ofVec2f", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "perpendicular: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "perpendicular: Unknown exception");
  }
  return dub_error(L);
}

/** float ofVec2f::length() const
 * api/openFrameworks/math/ofVec2f.h:155
 */
static int ofVec2f_length(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    lua_pushnumber(L, self->length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "length: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "length: Unknown exception");
  }
  return dub_error(L);
}

/** float ofVec2f::lengthSquared() const
 * api/openFrameworks/math/ofVec2f.h:156
 */
static int ofVec2f_lengthSquared(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    lua_pushnumber(L, self->lengthSquared());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "lengthSquared: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "lengthSquared: Unknown exception");
  }
  return dub_error(L);
}

/** float ofVec2f::angleRad(const ofVec2f &vec) const
 * api/openFrameworks/math/ofVec2f.h:164
 */
static int ofVec2f_angleRad(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    lua_pushnumber(L, self->angleRad(*vec));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "angleRad: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "angleRad: Unknown exception");
  }
  return dub_error(L);
}

/** float ofVec2f::dot(const ofVec2f &vec) const
 * api/openFrameworks/math/ofVec2f.h:170
 */
static int ofVec2f_dot(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    ofVec2f *vec = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    lua_pushnumber(L, self->dot(*vec));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "dot: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "dot: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::rescaled(const float length) const
 * api/openFrameworks/math/ofVec2f.h:178
 */
static int ofVec2f_rescaled(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    const float length = dub_checknumber(L, 2);
    dub_pushudata(L, new ofVec2f(self->rescaled(length)), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "rescaled: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rescaled: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f& ofVec2f::rescale(const float length)
 * api/openFrameworks/math/ofVec2f.h:181
 */
static int ofVec2f_rescale(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    const float length = dub_checknumber(L, 2);
    dub_pushudata(L, &self->rescale(length), "ofVec2f", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "rescale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rescale: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::rotated(float angle) const
 * api/openFrameworks/math/ofVec2f.h:184
 */
static int ofVec2f_rotated(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float angle = dub_checknumber(L, 2);
      ofVec2f *pivot = *((ofVec2f **)dub_checksdata(L, 3, "ofVec2f"));
      dub_pushudata(L, new ofVec2f(self->rotated(angle, *pivot)), "ofVec2f", true);
      return 1;
    } else {
      float angle = dub_checknumber(L, 2);
      dub_pushudata(L, new ofVec2f(self->rotated(angle)), "ofVec2f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotated: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotated: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::normalized() const
 * api/openFrameworks/math/ofVec2f.h:187
 */
static int ofVec2f_normalized(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    dub_pushudata(L, new ofVec2f(self->normalized()), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "normalized: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "normalized: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::limited(float max) const
 * api/openFrameworks/math/ofVec2f.h:190
 */
static int ofVec2f_limited(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    float max = dub_checknumber(L, 2);
    dub_pushudata(L, new ofVec2f(self->limited(max)), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "limited: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "limited: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::perpendiculared() const
 * api/openFrameworks/math/ofVec2f.h:193
 */
static int ofVec2f_perpendiculared(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    dub_pushudata(L, new ofVec2f(self->perpendiculared()), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "perpendiculared: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "perpendiculared: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::interpolated(const ofVec2f &pnt, float p) const
 * api/openFrameworks/math/ofVec2f.h:196
 */
static int ofVec2f_interpolated(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    ofVec2f *pnt = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    float p = dub_checknumber(L, 3);
    dub_pushudata(L, new ofVec2f(self->interpolated(*pnt, p)), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "interpolated: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "interpolated: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::middled(const ofVec2f &pnt) const
 * api/openFrameworks/math/ofVec2f.h:199
 */
static int ofVec2f_middled(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    ofVec2f *pnt = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    dub_pushudata(L, new ofVec2f(self->middled(*pnt)), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "middled: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "middled: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofVec2f::mapped(const ofVec2f &origin, const ofVec2f &vx, const ofVec2f &vy) const
 * api/openFrameworks/math/ofVec2f.h:202
 */
static int ofVec2f_mapped(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    ofVec2f *origin = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    ofVec2f *vx = *((ofVec2f **)dub_checksdata(L, 3, "ofVec2f"));
    ofVec2f *vy = *((ofVec2f **)dub_checksdata(L, 4, "ofVec2f"));
    dub_pushudata(L, new ofVec2f(self->mapped(*origin, *vx, *vy)), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "mapped: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mapped: Unknown exception");
  }
  return dub_error(L);
}

/** float ofVec2f::distanceSquared(const ofVec2f &pnt) const
 * api/openFrameworks/math/ofVec2f.h:205
 */
static int ofVec2f_distanceSquared(lua_State *L) {
  try {
    ofVec2f *self = *((ofVec2f **)dub_checksdata(L, 1, "ofVec2f"));
    ofVec2f *pnt = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    lua_pushnumber(L, self->distanceSquared(*pnt));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "distanceSquared: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "distanceSquared: Unknown exception");
  }
  return dub_error(L);
}

/** static ofVec2f ofVec2f::zero()
 * api/openFrameworks/math/ofVec2f.h:211
 */
static int ofVec2f_zero(lua_State *L) {
  try {
    dub_pushudata(L, new ofVec2f(ofVec2f::zero()), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "zero: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "zero: Unknown exception");
  }
  return dub_error(L);
}

/** static ofVec2f ofVec2f::one()
 * api/openFrameworks/math/ofVec2f.h:214
 */
static int ofVec2f_one(lua_State *L) {
  try {
    dub_pushudata(L, new ofVec2f(ofVec2f::one()), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "one: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "one: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofVec2f___tostring(lua_State *L) {
  ofVec2f *self = *((ofVec2f **)dub_checksdata_n(L, 1, "ofVec2f"));
  lua_pushfstring(L, "ofVec2f: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofVec2f_member_methods[] = {
  { "__gc"         , ofVec2f__ofVec2f     },
  { "__newindex"   , ofVec2f__set_        },
  { "new"          , ofVec2f_ofVec2f      },
  { "getPtr"       , ofVec2f_getPtr       },
  { "__index"      , ofVec2f__get_        },
  { "set"          , ofVec2f_set          },
  { "__eq"         , ofVec2f_operator_eq  },
  { "match"        , ofVec2f_match        },
  { "isAligned"    , ofVec2f_isAligned    },
  { "isAlignedRad" , ofVec2f_isAlignedRad },
  { "align"        , ofVec2f_align        },
  { "alignRad"     , ofVec2f_alignRad     },
  { "__add"        , ofVec2f_operator_add },
  { "add"          , ofVec2f_operator_adde },
  { "__sub"        , ofVec2f_operator_sub },
  { "sub"          , ofVec2f_operator_sube },
  { "__mul"        , ofVec2f_operator_mul },
  { "mul"          , ofVec2f_operator_mule },
  { "__div"        , ofVec2f_operator_div },
  { "div"          , ofVec2f_operator_dive },
  { "__unm"        , ofVec2f_operator_unm },
  { "getScaled"    , ofVec2f_getScaled    },
  { "scale"        , ofVec2f_scale        },
  { "getRotated"   , ofVec2f_getRotated   },
  { "getRotatedRad", ofVec2f_getRotatedRad },
  { "rotate"       , ofVec2f_rotate       },
  { "rotateRad"    , ofVec2f_rotateRad    },
  { "getMapped"    , ofVec2f_getMapped    },
  { "map"          , ofVec2f_map          },
  { "distance"     , ofVec2f_distance     },
  { "squareDistance", ofVec2f_squareDistance },
  { "getInterpolated", ofVec2f_getInterpolated },
  { "interpolate"  , ofVec2f_interpolate  },
  { "getMiddle"    , ofVec2f_getMiddle    },
  { "middle"       , ofVec2f_middle       },
  { "average"      , ofVec2f_average      },
  { "getNormalized", ofVec2f_getNormalized },
  { "normalize"    , ofVec2f_normalize    },
  { "getLimited"   , ofVec2f_getLimited   },
  { "limit"        , ofVec2f_limit        },
  { "getPerpendicular", ofVec2f_getPerpendicular },
  { "perpendicular", ofVec2f_perpendicular },
  { "length"       , ofVec2f_length       },
  { "lengthSquared", ofVec2f_lengthSquared },
  { "angleRad"     , ofVec2f_angleRad     },
  { "dot"          , ofVec2f_dot          },
  { "rescaled"     , ofVec2f_rescaled     },
  { "rescale"      , ofVec2f_rescale      },
  { "rotated"      , ofVec2f_rotated      },
  { "normalized"   , ofVec2f_normalized   },
  { "limited"      , ofVec2f_limited      },
  { "perpendiculared", ofVec2f_perpendiculared },
  { "interpolated" , ofVec2f_interpolated },
  { "middled"      , ofVec2f_middled      },
  { "mapped"       , ofVec2f_mapped       },
  { "distanceSquared", ofVec2f_distanceSquared },
  { "zero"         , ofVec2f_zero         },
  { "one"          , ofVec2f_one          },
  { "__tostring"   , ofVec2f___tostring   },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofVec2f(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofVec2f");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofVec2f_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofVec2f", "ofVec2f");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
