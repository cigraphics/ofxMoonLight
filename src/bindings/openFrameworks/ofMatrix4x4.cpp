/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofMatrix4x4
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "math/ofMatrix4x4.h"


/** Read _mat(size_t i)
 * 
 */
static int ofMatrix4x4__mat(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      size_t i = dub_checkint(L, 2);
      ofVec4f *v = *((ofVec4f **)dub_checksdata(L, 3, "ofVec4f"));
      if (!i || i > 4) return 0;
      self->_mat[i-1] = *v;
      return 0;
    } else {
      size_t i = dub_checkint(L, 2);
      if (!i || i > 4) return 0;
      dub_pushudata(L, new ofVec4f(self->_mat[i-1]), "ofVec4f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "_mat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "_mat: Unknown exception");
  }
  return dub_error(L);
}

/** ofMatrix4x4::ofMatrix4x4()
 * api/openFrameworks/math/ofMatrix4x4.h:35
 */
static int ofMatrix4x4_ofMatrix4x4(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 16) {
      float a00 = dub_checknumber(L, 1);
      float a01 = dub_checknumber(L, 2);
      float a02 = dub_checknumber(L, 3);
      float a03 = dub_checknumber(L, 4);
      float a10 = dub_checknumber(L, 5);
      float a11 = dub_checknumber(L, 6);
      float a12 = dub_checknumber(L, 7);
      float a13 = dub_checknumber(L, 8);
      float a20 = dub_checknumber(L, 9);
      float a21 = dub_checknumber(L, 10);
      float a22 = dub_checknumber(L, 11);
      float a23 = dub_checknumber(L, 12);
      float a30 = dub_checknumber(L, 13);
      float a31 = dub_checknumber(L, 14);
      float a32 = dub_checknumber(L, 15);
      float a33 = dub_checknumber(L, 16);
      ofMatrix4x4 *retval__ = new ofMatrix4x4(a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33);
      dub_pushudata(L, retval__, "ofMatrix4x4", true);
      return 1;
    } else if (top__ >= 1) {
      int type__ = lua_type(L, 1);
      void **ptr1__;
      if ( (ptr1__ = dub_issdata(L, 1, "ofQuaternion", type__)) ) {
        ofQuaternion *quat = *((ofQuaternion **)ptr1__);
        ofMatrix4x4 *retval__ = new ofMatrix4x4(*quat);
        dub_pushudata(L, retval__, "ofMatrix4x4", true);
        return 1;
      } else {
        ofMatrix4x4 *mat = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
        ofMatrix4x4 *retval__ = new ofMatrix4x4(*mat);
        dub_pushudata(L, retval__, "ofMatrix4x4", true);
        return 1;
      }
    } else {
      ofMatrix4x4 *retval__ = new ofMatrix4x4();
      dub_pushudata(L, retval__, "ofMatrix4x4", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** ofMatrix4x4::~ofMatrix4x4()
 * api/openFrameworks/math/ofMatrix4x4.h:52
 */
static int ofMatrix4x4__ofMatrix4x4(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofMatrix4x4"));
    if (userdata->gc) {
      ofMatrix4x4 *self = (ofMatrix4x4 *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** float& ofMatrix4x4::operator()(int row, int col)
 * api/openFrameworks/math/ofMatrix4x4.h:62
 */
static int ofMatrix4x4_operator_call(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int row = dub_checkint(L, 2);
    int col = dub_checkint(L, 3);
    lua_pushnumber(L, self->operator()(row, col));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__call: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__call: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofMatrix4x4::getRowAsVec3f(int i) const
 * api/openFrameworks/math/ofMatrix4x4.h:73
 */
static int ofMatrix4x4_getRowAsVec3f(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int i = dub_checkint(L, 2);
    dub_pushudata(L, new ofVec3f(self->getRowAsVec3f(i)), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRowAsVec3f: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRowAsVec3f: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec4f ofMatrix4x4::getRowAsVec4f(int i) const
 * api/openFrameworks/math/ofMatrix4x4.h:78
 */
static int ofMatrix4x4_getRowAsVec4f(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int i = dub_checkint(L, 2);
    dub_pushudata(L, new ofVec4f(self->getRowAsVec4f(i)), "ofVec4f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRowAsVec4f: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRowAsVec4f: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMatrix4x4::isValid() const
 * api/openFrameworks/math/ofMatrix4x4.h:87
 */
static int ofMatrix4x4_isValid(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    lua_pushboolean(L, self->isValid());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isValid: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isValid: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMatrix4x4::isNaN() const
 * api/openFrameworks/math/ofMatrix4x4.h:91
 */
static int ofMatrix4x4_isNaN(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    lua_pushboolean(L, self->isNaN());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isNaN: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isNaN: Unknown exception");
  }
  return dub_error(L);
}

/** ofMatrix4x4& ofMatrix4x4::operator=(const ofMatrix4x4 &rhs)
 * api/openFrameworks/math/ofMatrix4x4.h:95
 */
static int ofMatrix4x4_operator_sete(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    ofMatrix4x4 *rhs = *((ofMatrix4x4 **)dub_checksdata(L, 2, "ofMatrix4x4"));
    dub_pushudata(L, &self->operator=(*rhs), "ofMatrix4x4", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::set(const ofMatrix4x4 &rhs)
 * api/openFrameworks/math/ofMatrix4x4.h:99
 */
static int ofMatrix4x4_set(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int top__ = lua_gettop(L);
    if (top__ >= 17) {
      float a00 = dub_checknumber(L, 2);
      float a01 = dub_checknumber(L, 3);
      float a02 = dub_checknumber(L, 4);
      float a03 = dub_checknumber(L, 5);
      float a10 = dub_checknumber(L, 6);
      float a11 = dub_checknumber(L, 7);
      float a12 = dub_checknumber(L, 8);
      float a13 = dub_checknumber(L, 9);
      float a20 = dub_checknumber(L, 10);
      float a21 = dub_checknumber(L, 11);
      float a22 = dub_checknumber(L, 12);
      float a23 = dub_checknumber(L, 13);
      float a30 = dub_checknumber(L, 14);
      float a31 = dub_checknumber(L, 15);
      float a32 = dub_checknumber(L, 16);
      float a33 = dub_checknumber(L, 17);
      self->set(a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33);
      return 0;
    } else {
      ofMatrix4x4 *rhs = *((ofMatrix4x4 **)dub_checksdata(L, 2, "ofMatrix4x4"));
      self->set(*rhs);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub_error(L);
}

/** float* ofMatrix4x4::getPtr()
 * api/openFrameworks/math/ofMatrix4x4.h:108
 */
static int ofMatrix4x4_getPtr(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    lua_pushlightuserdata(L, (void *)self->getPtr());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPtr: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPtr: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMatrix4x4::isIdentity() const
 * api/openFrameworks/math/ofMatrix4x4.h:117
 */
static int ofMatrix4x4_isIdentity(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    lua_pushboolean(L, self->isIdentity());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isIdentity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isIdentity: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::makeIdentityMatrix()
 * api/openFrameworks/math/ofMatrix4x4.h:123
 */
static int ofMatrix4x4_makeIdentityMatrix(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    self->makeIdentityMatrix();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "makeIdentityMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "makeIdentityMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::makeScaleMatrix(const ofVec3f &)
 * api/openFrameworks/math/ofMatrix4x4.h:125
 */
static int ofMatrix4x4_makeScaleMatrix(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float p1 = dub_checknumber(L, 2);
      float p2 = dub_checknumber(L, 3);
      float p3 = dub_checknumber(L, 4);
      self->makeScaleMatrix(p1, p2, p3);
      return 0;
    } else {
      ofVec3f *p1 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->makeScaleMatrix(*p1);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "makeScaleMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "makeScaleMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::makeTranslationMatrix(const ofVec3f &)
 * api/openFrameworks/math/ofMatrix4x4.h:128
 */
static int ofMatrix4x4_makeTranslationMatrix(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float p1 = dub_checknumber(L, 2);
      float p2 = dub_checknumber(L, 3);
      float p3 = dub_checknumber(L, 4);
      self->makeTranslationMatrix(p1, p2, p3);
      return 0;
    } else {
      ofVec3f *p1 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->makeTranslationMatrix(*p1);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "makeTranslationMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "makeTranslationMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::makeRotationMatrix(const ofVec3f &from, const ofVec3f &to)
 * api/openFrameworks/math/ofMatrix4x4.h:131
 */
static int ofMatrix4x4_makeRotationMatrix(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int top__ = lua_gettop(L);
    if (top__ >= 7) {
      float angle1 = dub_checknumber(L, 2);
      ofVec3f *axis1 = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      float angle2 = dub_checknumber(L, 4);
      ofVec3f *axis2 = *((ofVec3f **)dub_checksdata(L, 5, "ofVec3f"));
      float angle3 = dub_checknumber(L, 6);
      ofVec3f *axis3 = *((ofVec3f **)dub_checksdata(L, 7, "ofVec3f"));
      self->makeRotationMatrix(angle1, *axis1, angle2, *axis2, angle3, *axis3);
      return 0;
    } else if (top__ >= 5) {
      float angle = dub_checknumber(L, 2);
      float x = dub_checknumber(L, 3);
      float y = dub_checknumber(L, 4);
      float z = dub_checknumber(L, 5);
      self->makeRotationMatrix(angle, x, y, z);
      return 0;
    } else if (top__ >= 3) {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float angle = dub_checknumber(L, 2);
        ofVec3f *axis = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
        self->makeRotationMatrix(angle, *axis);
        return 0;
      } else {
        ofVec3f *from = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
        ofVec3f *to = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
        self->makeRotationMatrix(*from, *to);
        return 0;
      }
    } else {
      ofQuaternion *p1 = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
      self->makeRotationMatrix(*p1);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "makeRotationMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "makeRotationMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMatrix4x4::makeInvertOf(const ofMatrix4x4 &rhs)
 * api/openFrameworks/math/ofMatrix4x4.h:141
 */
static int ofMatrix4x4_makeInvertOf(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    ofMatrix4x4 *rhs = *((ofMatrix4x4 **)dub_checksdata(L, 2, "ofMatrix4x4"));
    lua_pushboolean(L, self->makeInvertOf(*rhs));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "makeInvertOf: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "makeInvertOf: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::makeOrthoNormalOf(const ofMatrix4x4 &rhs)
 * api/openFrameworks/math/ofMatrix4x4.h:142
 */
static int ofMatrix4x4_makeOrthoNormalOf(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    ofMatrix4x4 *rhs = *((ofMatrix4x4 **)dub_checksdata(L, 2, "ofMatrix4x4"));
    self->makeOrthoNormalOf(*rhs);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "makeOrthoNormalOf: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "makeOrthoNormalOf: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::makeFromMultiplicationOf(const ofMatrix4x4 &, const ofMatrix4x4 &)
 * api/openFrameworks/math/ofMatrix4x4.h:143
 */
static int ofMatrix4x4_makeFromMultiplicationOf(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    ofMatrix4x4 *p1 = *((ofMatrix4x4 **)dub_checksdata(L, 2, "ofMatrix4x4"));
    ofMatrix4x4 *p2 = *((ofMatrix4x4 **)dub_checksdata(L, 3, "ofMatrix4x4"));
    self->makeFromMultiplicationOf(*p1, *p2);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "makeFromMultiplicationOf: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "makeFromMultiplicationOf: Unknown exception");
  }
  return dub_error(L);
}

/** ofMatrix4x4 ofMatrix4x4::getInverse()
 * api/openFrameworks/math/ofMatrix4x4.h:145
 */
static int ofMatrix4x4_getInverse(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    dub_pushudata(L, new ofMatrix4x4(self->getInverse()), "ofMatrix4x4", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getInverse: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getInverse: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::makeOrthoMatrix(double left, double right, double bottom, double top, double zNear, double zFar)
 * api/openFrameworks/math/ofMatrix4x4.h:155
 */
static int ofMatrix4x4_makeOrthoMatrix(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    double left = dub_checknumber(L, 2);
    double right = dub_checknumber(L, 3);
    double bottom = dub_checknumber(L, 4);
    double top = dub_checknumber(L, 5);
    double zNear = dub_checknumber(L, 6);
    double zFar = dub_checknumber(L, 7);
    self->makeOrthoMatrix(left, right, bottom, top, zNear, zFar);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "makeOrthoMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "makeOrthoMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::makeOrtho2DMatrix(double left, double right, double bottom, double top)
 * api/openFrameworks/math/ofMatrix4x4.h:159
 */
static int ofMatrix4x4_makeOrtho2DMatrix(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    double left = dub_checknumber(L, 2);
    double right = dub_checknumber(L, 3);
    double bottom = dub_checknumber(L, 4);
    double top = dub_checknumber(L, 5);
    self->makeOrtho2DMatrix(left, right, bottom, top);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "makeOrtho2DMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "makeOrtho2DMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::makeFrustumMatrix(double left, double right, double bottom, double top, double zNear, double zFar)
 * api/openFrameworks/math/ofMatrix4x4.h:164
 */
static int ofMatrix4x4_makeFrustumMatrix(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    double left = dub_checknumber(L, 2);
    double right = dub_checknumber(L, 3);
    double bottom = dub_checknumber(L, 4);
    double top = dub_checknumber(L, 5);
    double zNear = dub_checknumber(L, 6);
    double zFar = dub_checknumber(L, 7);
    self->makeFrustumMatrix(left, right, bottom, top, zNear, zFar);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "makeFrustumMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "makeFrustumMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::makePerspectiveMatrix(double fovy, double aspectRatio, double zNear, double zFar)
 * api/openFrameworks/math/ofMatrix4x4.h:169
 */
static int ofMatrix4x4_makePerspectiveMatrix(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    double fovy = dub_checknumber(L, 2);
    double aspectRatio = dub_checknumber(L, 3);
    double zNear = dub_checknumber(L, 4);
    double zFar = dub_checknumber(L, 5);
    self->makePerspectiveMatrix(fovy, aspectRatio, zNear, zFar);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "makePerspectiveMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "makePerspectiveMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::makeLookAtMatrix(const ofVec3f &eye, const ofVec3f &center, const ofVec3f &up)
 * api/openFrameworks/math/ofMatrix4x4.h:176
 */
static int ofMatrix4x4_makeLookAtMatrix(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    ofVec3f *eye = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
    ofVec3f *center = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
    ofVec3f *up = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
    self->makeLookAtMatrix(*eye, *center, *up);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "makeLookAtMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "makeLookAtMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::makeLookAtViewMatrix(const ofVec3f &eye, const ofVec3f &center, const ofVec3f &up)
 * api/openFrameworks/math/ofMatrix4x4.h:184
 */
static int ofMatrix4x4_makeLookAtViewMatrix(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    ofVec3f *eye = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
    ofVec3f *center = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
    ofVec3f *up = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
    self->makeLookAtViewMatrix(*eye, *center, *up);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "makeLookAtViewMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "makeLookAtViewMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMatrix4x4::getOrtho(double &left, double &right, double &bottom, double &top, double &zNear, double &zFar) const
 * api/openFrameworks/math/ofMatrix4x4.h:193
 */
static int ofMatrix4x4_getOrtho(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    double left = dub_checknumber(L, 2);
    double right = dub_checknumber(L, 3);
    double bottom = dub_checknumber(L, 4);
    double top = dub_checknumber(L, 5);
    double zNear = dub_checknumber(L, 6);
    double zFar = dub_checknumber(L, 7);
    lua_pushboolean(L, self->getOrtho(left, right, bottom, top, zNear, zFar));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getOrtho: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getOrtho: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMatrix4x4::getFrustum(double &left, double &right, double &bottom, double &top, double &zNear, double &zFar) const
 * api/openFrameworks/math/ofMatrix4x4.h:197
 */
static int ofMatrix4x4_getFrustum(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    double left = dub_checknumber(L, 2);
    double right = dub_checknumber(L, 3);
    double bottom = dub_checknumber(L, 4);
    double top = dub_checknumber(L, 5);
    double zNear = dub_checknumber(L, 6);
    double zFar = dub_checknumber(L, 7);
    lua_pushboolean(L, self->getFrustum(left, right, bottom, top, zNear, zFar));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getFrustum: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getFrustum: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMatrix4x4::getPerspective(double &fovy, double &aspectRatio, double &zNear, double &zFar) const
 * api/openFrameworks/math/ofMatrix4x4.h:210
 */
static int ofMatrix4x4_getPerspective(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    double fovy = dub_checknumber(L, 2);
    double aspectRatio = dub_checknumber(L, 3);
    double zNear = dub_checknumber(L, 4);
    double zFar = dub_checknumber(L, 5);
    lua_pushboolean(L, self->getPerspective(fovy, aspectRatio, zNear, zFar));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPerspective: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPerspective: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::getLookAt(ofVec3f &eye, ofVec3f &center, ofVec3f &up, float lookDistance=1.0f) const
 * api/openFrameworks/math/ofMatrix4x4.h:214
 */
static int ofMatrix4x4_getLookAt(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      ofVec3f *eye = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofVec3f *center = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      ofVec3f *up = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
      float lookDistance = dub_checknumber(L, 5);
      self->getLookAt(*eye, *center, *up, lookDistance);
      return 0;
    } else {
      ofVec3f *eye = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofVec3f *center = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      ofVec3f *up = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
      self->getLookAt(*eye, *center, *up);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLookAt: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLookAt: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::decompose(ofVec3f &translation, ofQuaternion &rotation, ofVec3f &scale, ofQuaternion &so) const
 * api/openFrameworks/math/ofMatrix4x4.h:224
 */
static int ofMatrix4x4_decompose(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    ofVec3f *translation = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
    ofQuaternion *rotation = *((ofQuaternion **)dub_checksdata(L, 3, "ofQuaternion"));
    ofVec3f *scale = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
    ofQuaternion *so = *((ofQuaternion **)dub_checksdata(L, 5, "ofQuaternion"));
    self->decompose(*translation, *rotation, *scale, *so);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "decompose: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "decompose: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofMatrix4x4::postMult(const ofVec3f &v) const
 * api/openFrameworks/math/ofMatrix4x4.h:303
 */
static int ofMatrix4x4_postMult(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
      ofVec3f *v = *((ofVec3f **)ptr2__);
      dub_pushudata(L, new ofVec3f(self->postMult(*v)), "ofVec3f", true);
      return 1;
    } else if ( (ptr2__ = dub_issdata(L, 2, "ofMatrix4x4", type__)) ) {
      ofMatrix4x4 *p1 = *((ofMatrix4x4 **)ptr2__);
      self->postMult(*p1);
      return 0;
    } else {
      ofVec4f *v = *((ofVec4f **)dub_checksdata(L, 2, "ofVec4f"));
      dub_pushudata(L, new ofVec4f(self->postMult(*v)), "ofVec4f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "postMult: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "postMult: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofMatrix4x4::operator*(const ofVec3f &v) const
 * api/openFrameworks/math/ofMatrix4x4.h:304
 */
static int ofMatrix4x4_operator_mul(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
      ofVec3f *v = *((ofVec3f **)ptr2__);
      dub_pushudata(L, new ofVec3f(self->operator*(*v)), "ofVec3f", true);
      return 1;
    } else if ( (ptr2__ = dub_issdata(L, 2, "ofMatrix4x4", type__)) ) {
      ofMatrix4x4 *m = *((ofMatrix4x4 **)ptr2__);
      dub_pushudata(L, new ofMatrix4x4(self->operator*(*m)), "ofMatrix4x4", true);
      return 1;
    } else {
      ofVec4f *v = *((ofVec4f **)dub_checksdata(L, 2, "ofVec4f"));
      dub_pushudata(L, new ofVec4f(self->operator*(*v)), "ofVec4f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "__mul: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__mul: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofMatrix4x4::preMult(const ofVec3f &v) const
 * api/openFrameworks/math/ofMatrix4x4.h:313
 */
static int ofMatrix4x4_preMult(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
      ofVec3f *v = *((ofVec3f **)ptr2__);
      dub_pushudata(L, new ofVec3f(self->preMult(*v)), "ofVec3f", true);
      return 1;
    } else if ( (ptr2__ = dub_issdata(L, 2, "ofMatrix4x4", type__)) ) {
      ofMatrix4x4 *p1 = *((ofMatrix4x4 **)ptr2__);
      self->preMult(*p1);
      return 0;
    } else {
      ofVec4f *v = *((ofVec4f **)dub_checksdata(L, 2, "ofVec4f"));
      dub_pushudata(L, new ofVec4f(self->preMult(*v)), "ofVec4f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "preMult: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "preMult: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::setRotate(const ofQuaternion &q)
 * api/openFrameworks/math/ofMatrix4x4.h:320
 */
static int ofMatrix4x4_setRotate(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    ofQuaternion *q = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
    self->setRotate(*q);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setRotate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setRotate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::setTranslation(float tx, float ty, float tz)
 * api/openFrameworks/math/ofMatrix4x4.h:321
 */
static int ofMatrix4x4_setTranslation(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float tx = dub_checknumber(L, 2);
      float ty = dub_checknumber(L, 3);
      float tz = dub_checknumber(L, 4);
      self->setTranslation(tx, ty, tz);
      return 0;
    } else {
      ofVec3f *v = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->setTranslation(*v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setTranslation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setTranslation: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::rotate(float angle, float x, float y, float z)
 * api/openFrameworks/math/ofMatrix4x4.h:329
 */
static int ofMatrix4x4_rotate(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float angle = dub_checknumber(L, 2);
      float x = dub_checknumber(L, 3);
      float y = dub_checknumber(L, 4);
      float z = dub_checknumber(L, 5);
      self->rotate(angle, x, y, z);
      return 0;
    } else {
      ofQuaternion *q = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
      self->rotate(*q);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::rotateRad(float angle, float x, float y, float z)
 * api/openFrameworks/math/ofMatrix4x4.h:330
 */
static int ofMatrix4x4_rotateRad(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    float angle = dub_checknumber(L, 2);
    float x = dub_checknumber(L, 3);
    float y = dub_checknumber(L, 4);
    float z = dub_checknumber(L, 5);
    self->rotateRad(angle, x, y, z);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotateRad: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotateRad: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::translate(float tx, float ty, float tz)
 * api/openFrameworks/math/ofMatrix4x4.h:332
 */
static int ofMatrix4x4_translate(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float tx = dub_checknumber(L, 2);
      float ty = dub_checknumber(L, 3);
      float tz = dub_checknumber(L, 4);
      self->translate(tx, ty, tz);
      return 0;
    } else {
      ofVec3f *v = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->translate(*v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "translate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "translate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::scale(float x, float y, float z)
 * api/openFrameworks/math/ofMatrix4x4.h:334
 */
static int ofMatrix4x4_scale(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      self->scale(x, y, z);
      return 0;
    } else {
      ofVec3f *v = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->scale(*v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "scale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "scale: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::glRotate(float angle, float x, float y, float z)
 * api/openFrameworks/math/ofMatrix4x4.h:341
 */
static int ofMatrix4x4_glRotate(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float angle = dub_checknumber(L, 2);
      float x = dub_checknumber(L, 3);
      float y = dub_checknumber(L, 4);
      float z = dub_checknumber(L, 5);
      self->glRotate(angle, x, y, z);
      return 0;
    } else {
      ofQuaternion *q = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
      self->glRotate(*q);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "glRotate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "glRotate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::glRotateRad(float angle, float x, float y, float z)
 * api/openFrameworks/math/ofMatrix4x4.h:342
 */
static int ofMatrix4x4_glRotateRad(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    float angle = dub_checknumber(L, 2);
    float x = dub_checknumber(L, 3);
    float y = dub_checknumber(L, 4);
    float z = dub_checknumber(L, 5);
    self->glRotateRad(angle, x, y, z);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "glRotateRad: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "glRotateRad: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::glTranslate(float tx, float ty, float tz)
 * api/openFrameworks/math/ofMatrix4x4.h:344
 */
static int ofMatrix4x4_glTranslate(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float tx = dub_checknumber(L, 2);
      float ty = dub_checknumber(L, 3);
      float tz = dub_checknumber(L, 4);
      self->glTranslate(tx, ty, tz);
      return 0;
    } else {
      ofVec3f *v = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->glTranslate(*v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "glTranslate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "glTranslate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::glScale(float x, float y, float z)
 * api/openFrameworks/math/ofMatrix4x4.h:346
 */
static int ofMatrix4x4_glScale(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      self->glScale(x, y, z);
      return 0;
    } else {
      ofVec3f *v = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->glScale(*v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "glScale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "glScale: Unknown exception");
  }
  return dub_error(L);
}

/** ofQuaternion ofMatrix4x4::getRotate() const
 * api/openFrameworks/math/ofMatrix4x4.h:354
 */
static int ofMatrix4x4_getRotate(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    dub_pushudata(L, new ofQuaternion(self->getRotate()), "ofQuaternion", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRotate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRotate: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofMatrix4x4::getTranslation() const
 * api/openFrameworks/math/ofMatrix4x4.h:355
 */
static int ofMatrix4x4_getTranslation(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    dub_pushudata(L, new ofVec3f(self->getTranslation()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getTranslation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getTranslation: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofMatrix4x4::getScale() const
 * api/openFrameworks/math/ofMatrix4x4.h:356
 */
static int ofMatrix4x4_getScale(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    dub_pushudata(L, new ofVec3f(self->getScale()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getScale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getScale: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::operator*=(const ofMatrix4x4 &other)
 * api/openFrameworks/math/ofMatrix4x4.h:370
 */
static int ofMatrix4x4_operator_mule(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    ofMatrix4x4 *other = *((ofMatrix4x4 **)dub_checksdata(L, 2, "ofMatrix4x4"));
    self->operator*=(*other);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "mul: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mul: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::postMultTranslate(const ofVec3f &v)
 * api/openFrameworks/math/ofMatrix4x4.h:393
 */
static int ofMatrix4x4_postMultTranslate(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      self->postMultTranslate(x, y, z);
      return 0;
    } else {
      ofVec3f *v = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->postMultTranslate(*v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "postMultTranslate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "postMultTranslate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::postMultScale(const ofVec3f &v)
 * api/openFrameworks/math/ofMatrix4x4.h:395
 */
static int ofMatrix4x4_postMultScale(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      self->postMultScale(x, y, z);
      return 0;
    } else {
      ofVec3f *v = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->postMultScale(*v);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "postMultScale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "postMultScale: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::postMultRotate(const ofQuaternion &q)
 * api/openFrameworks/math/ofMatrix4x4.h:397
 */
static int ofMatrix4x4_postMultRotate(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float angle = dub_checknumber(L, 2);
      float x = dub_checknumber(L, 3);
      float y = dub_checknumber(L, 4);
      float z = dub_checknumber(L, 5);
      self->postMultRotate(angle, x, y, z);
      return 0;
    } else {
      ofQuaternion *q = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
      self->postMultRotate(*q);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "postMultRotate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "postMultRotate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::preMultScale(const ofVec3f &v)
 * api/openFrameworks/math/ofMatrix4x4.h:407
 */
static int ofMatrix4x4_preMultScale(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    ofVec3f *v = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
    self->preMultScale(*v);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "preMultScale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "preMultScale: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::preMultTranslate(const ofVec3f &v)
 * api/openFrameworks/math/ofMatrix4x4.h:409
 */
static int ofMatrix4x4_preMultTranslate(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    ofVec3f *v = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
    self->preMultTranslate(*v);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "preMultTranslate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "preMultTranslate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMatrix4x4::preMultRotate(const ofQuaternion &q)
 * api/openFrameworks/math/ofMatrix4x4.h:411
 */
static int ofMatrix4x4_preMultRotate(lua_State *L) {
  try {
    ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    ofQuaternion *q = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
    self->preMultRotate(*q);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "preMultRotate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "preMultRotate: Unknown exception");
  }
  return dub_error(L);
}

/** static ofMatrix4x4 ofMatrix4x4::newIdentityMatrix(void)
 * api/openFrameworks/math/ofMatrix4x4.h:229
 */
static int ofMatrix4x4_newIdentityMatrix(lua_State *L) {
  try {
    dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::newIdentityMatrix()), "ofMatrix4x4", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "newIdentityMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "newIdentityMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** static ofMatrix4x4 ofMatrix4x4::newScaleMatrix(const ofVec3f &sv)
 * api/openFrameworks/math/ofMatrix4x4.h:230
 */
static int ofMatrix4x4_newScaleMatrix(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float sx = dub_checknumber(L, 1);
      float sy = dub_checknumber(L, 2);
      float sz = dub_checknumber(L, 3);
      dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::newScaleMatrix(sx, sy, sz)), "ofMatrix4x4", true);
      return 1;
    } else {
      ofVec3f *sv = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::newScaleMatrix(*sv)), "ofMatrix4x4", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "newScaleMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "newScaleMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** static ofMatrix4x4 ofMatrix4x4::newTranslationMatrix(const ofVec3f &dv)
 * api/openFrameworks/math/ofMatrix4x4.h:232
 */
static int ofMatrix4x4_newTranslationMatrix(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float z = dub_checknumber(L, 3);
      dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::newTranslationMatrix(x, y, z)), "ofMatrix4x4", true);
      return 1;
    } else {
      ofVec3f *dv = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
      dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::newTranslationMatrix(*dv)), "ofMatrix4x4", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "newTranslationMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "newTranslationMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** static ofMatrix4x4 ofMatrix4x4::newRotationMatrix(const ofVec3f &from, const ofVec3f &to)
 * api/openFrameworks/math/ofMatrix4x4.h:234
 */
static int ofMatrix4x4_newRotationMatrix(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      float angle1 = dub_checknumber(L, 1);
      ofVec3f *axis1 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      float angle2 = dub_checknumber(L, 3);
      ofVec3f *axis2 = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
      float angle3 = dub_checknumber(L, 5);
      ofVec3f *axis3 = *((ofVec3f **)dub_checksdata(L, 6, "ofVec3f"));
      dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::newRotationMatrix(angle1, *axis1, angle2, *axis2, angle3, *axis3)), "ofMatrix4x4", true);
      return 1;
    } else if (top__ >= 4) {
      float angle = dub_checknumber(L, 1);
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::newRotationMatrix(angle, x, y, z)), "ofMatrix4x4", true);
      return 1;
    } else if (top__ >= 2) {
      int type__ = lua_type(L, 1);
      if (type__ == LUA_TNUMBER) {
        float angle = dub_checknumber(L, 1);
        ofVec3f *axis = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
        dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::newRotationMatrix(angle, *axis)), "ofMatrix4x4", true);
        return 1;
      } else {
        ofVec3f *from = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
        ofVec3f *to = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
        dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::newRotationMatrix(*from, *to)), "ofMatrix4x4", true);
        return 1;
      }
    } else {
      ofQuaternion *quat = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
      dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::newRotationMatrix(*quat)), "ofMatrix4x4", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "newRotationMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "newRotationMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** static ofMatrix4x4 ofMatrix4x4::getInverseOf(const ofMatrix4x4 &matrix)
 * api/openFrameworks/math/ofMatrix4x4.h:244
 */
static int ofMatrix4x4_getInverseOf(lua_State *L) {
  try {
    ofMatrix4x4 *matrix = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::getInverseOf(*matrix)), "ofMatrix4x4", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getInverseOf: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getInverseOf: Unknown exception");
  }
  return dub_error(L);
}

/** static ofMatrix4x4 ofMatrix4x4::getTransposedOf(const ofMatrix4x4 &matrix)
 * api/openFrameworks/math/ofMatrix4x4.h:245
 */
static int ofMatrix4x4_getTransposedOf(lua_State *L) {
  try {
    ofMatrix4x4 *matrix = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::getTransposedOf(*matrix)), "ofMatrix4x4", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getTransposedOf: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getTransposedOf: Unknown exception");
  }
  return dub_error(L);
}

/** static ofMatrix4x4 ofMatrix4x4::getOrthoNormalOf(const ofMatrix4x4 &matrix)
 * api/openFrameworks/math/ofMatrix4x4.h:246
 */
static int ofMatrix4x4_getOrthoNormalOf(lua_State *L) {
  try {
    ofMatrix4x4 *matrix = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
    dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::getOrthoNormalOf(*matrix)), "ofMatrix4x4", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getOrthoNormalOf: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getOrthoNormalOf: Unknown exception");
  }
  return dub_error(L);
}

/** static ofMatrix4x4 ofMatrix4x4::newOrthoMatrix(double left, double right, double bottom, double top, double zNear, double zFar)
 * api/openFrameworks/math/ofMatrix4x4.h:254
 */
static int ofMatrix4x4_newOrthoMatrix(lua_State *L) {
  try {
    double left = dub_checknumber(L, 1);
    double right = dub_checknumber(L, 2);
    double bottom = dub_checknumber(L, 3);
    double top = dub_checknumber(L, 4);
    double zNear = dub_checknumber(L, 5);
    double zFar = dub_checknumber(L, 6);
    dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::newOrthoMatrix(left, right, bottom, top, zNear, zFar)), "ofMatrix4x4", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "newOrthoMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "newOrthoMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** static ofMatrix4x4 ofMatrix4x4::newOrtho2DMatrix(double left, double right, double bottom, double top)
 * api/openFrameworks/math/ofMatrix4x4.h:258
 */
static int ofMatrix4x4_newOrtho2DMatrix(lua_State *L) {
  try {
    double left = dub_checknumber(L, 1);
    double right = dub_checknumber(L, 2);
    double bottom = dub_checknumber(L, 3);
    double top = dub_checknumber(L, 4);
    dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::newOrtho2DMatrix(left, right, bottom, top)), "ofMatrix4x4", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "newOrtho2DMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "newOrtho2DMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** static ofMatrix4x4 ofMatrix4x4::newFrustumMatrix(double left, double right, double bottom, double top, double zNear, double zFar)
 * api/openFrameworks/math/ofMatrix4x4.h:263
 */
static int ofMatrix4x4_newFrustumMatrix(lua_State *L) {
  try {
    double left = dub_checknumber(L, 1);
    double right = dub_checknumber(L, 2);
    double bottom = dub_checknumber(L, 3);
    double top = dub_checknumber(L, 4);
    double zNear = dub_checknumber(L, 5);
    double zFar = dub_checknumber(L, 6);
    dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::newFrustumMatrix(left, right, bottom, top, zNear, zFar)), "ofMatrix4x4", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "newFrustumMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "newFrustumMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** static ofMatrix4x4 ofMatrix4x4::newPerspectiveMatrix(double fovy, double aspectRatio, double zNear, double zFar)
 * api/openFrameworks/math/ofMatrix4x4.h:267
 */
static int ofMatrix4x4_newPerspectiveMatrix(lua_State *L) {
  try {
    double fovy = dub_checknumber(L, 1);
    double aspectRatio = dub_checknumber(L, 2);
    double zNear = dub_checknumber(L, 3);
    double zFar = dub_checknumber(L, 4);
    dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::newPerspectiveMatrix(fovy, aspectRatio, zNear, zFar)), "ofMatrix4x4", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "newPerspectiveMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "newPerspectiveMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** static ofMatrix4x4 ofMatrix4x4::newLookAtMatrix(const ofVec3f &eye, const ofVec3f &center, const ofVec3f &up)
 * api/openFrameworks/math/ofMatrix4x4.h:272
 */
static int ofMatrix4x4_newLookAtMatrix(lua_State *L) {
  try {
    ofVec3f *eye = *((ofVec3f **)dub_checksdata(L, 1, "ofVec3f"));
    ofVec3f *center = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
    ofVec3f *up = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
    dub_pushudata(L, new ofMatrix4x4(ofMatrix4x4::newLookAtMatrix(*eye, *center, *up)), "ofMatrix4x4", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "newLookAtMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "newLookAtMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** static ofVec3f ofMatrix4x4::transform3x3(const ofVec3f &v, const ofMatrix4x4 &m)
 * api/openFrameworks/math/ofMatrix4x4.h:361
 */
static int ofMatrix4x4_transform3x3(lua_State *L) {
  try {
    int type__ = lua_type(L, 1);
    void **ptr1__;
    if ( (ptr1__ = dub_issdata(L, 1, "ofVec3f", type__)) ) {
      ofVec3f *v = *((ofVec3f **)ptr1__);
      ofMatrix4x4 *m = *((ofMatrix4x4 **)dub_checksdata(L, 2, "ofMatrix4x4"));
      dub_pushudata(L, new ofVec3f(ofMatrix4x4::transform3x3(*v, *m)), "ofVec3f", true);
      return 1;
    } else {
      ofMatrix4x4 *m = *((ofMatrix4x4 **)dub_checksdata(L, 1, "ofMatrix4x4"));
      ofVec3f *v = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      dub_pushudata(L, new ofVec3f(ofMatrix4x4::transform3x3(*m, *v)), "ofVec3f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "transform3x3: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "transform3x3: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofMatrix4x4___tostring(lua_State *L) {
  ofMatrix4x4 *self = *((ofMatrix4x4 **)dub_checksdata_n(L, 1, "ofMatrix4x4"));
  lua_pushfstring(L, "ofMatrix4x4: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofMatrix4x4_member_methods[] = {
  { "_mat"         , ofMatrix4x4__mat     },
  { "new"          , ofMatrix4x4_ofMatrix4x4 },
  { "__gc"         , ofMatrix4x4__ofMatrix4x4 },
  { "__call"       , ofMatrix4x4_operator_call },
  { "getRowAsVec3f", ofMatrix4x4_getRowAsVec3f },
  { "getRowAsVec4f", ofMatrix4x4_getRowAsVec4f },
  { "isValid"      , ofMatrix4x4_isValid  },
  { "isNaN"        , ofMatrix4x4_isNaN    },
  { "set"          , ofMatrix4x4_operator_sete },
  { "set"          , ofMatrix4x4_set      },
  { "getPtr"       , ofMatrix4x4_getPtr   },
  { "isIdentity"   , ofMatrix4x4_isIdentity },
  { "makeIdentityMatrix", ofMatrix4x4_makeIdentityMatrix },
  { "makeScaleMatrix", ofMatrix4x4_makeScaleMatrix },
  { "makeTranslationMatrix", ofMatrix4x4_makeTranslationMatrix },
  { "makeRotationMatrix", ofMatrix4x4_makeRotationMatrix },
  { "makeInvertOf" , ofMatrix4x4_makeInvertOf },
  { "makeOrthoNormalOf", ofMatrix4x4_makeOrthoNormalOf },
  { "makeFromMultiplicationOf", ofMatrix4x4_makeFromMultiplicationOf },
  { "getInverse"   , ofMatrix4x4_getInverse },
  { "makeOrthoMatrix", ofMatrix4x4_makeOrthoMatrix },
  { "makeOrtho2DMatrix", ofMatrix4x4_makeOrtho2DMatrix },
  { "makeFrustumMatrix", ofMatrix4x4_makeFrustumMatrix },
  { "makePerspectiveMatrix", ofMatrix4x4_makePerspectiveMatrix },
  { "makeLookAtMatrix", ofMatrix4x4_makeLookAtMatrix },
  { "makeLookAtViewMatrix", ofMatrix4x4_makeLookAtViewMatrix },
  { "getOrtho"     , ofMatrix4x4_getOrtho },
  { "getFrustum"   , ofMatrix4x4_getFrustum },
  { "getPerspective", ofMatrix4x4_getPerspective },
  { "getLookAt"    , ofMatrix4x4_getLookAt },
  { "decompose"    , ofMatrix4x4_decompose },
  { "postMult"     , ofMatrix4x4_postMult },
  { "__mul"        , ofMatrix4x4_operator_mul },
  { "preMult"      , ofMatrix4x4_preMult  },
  { "setRotate"    , ofMatrix4x4_setRotate },
  { "setTranslation", ofMatrix4x4_setTranslation },
  { "rotate"       , ofMatrix4x4_rotate   },
  { "rotateRad"    , ofMatrix4x4_rotateRad },
  { "translate"    , ofMatrix4x4_translate },
  { "scale"        , ofMatrix4x4_scale    },
  { "glRotate"     , ofMatrix4x4_glRotate },
  { "glRotateRad"  , ofMatrix4x4_glRotateRad },
  { "glTranslate"  , ofMatrix4x4_glTranslate },
  { "glScale"      , ofMatrix4x4_glScale  },
  { "getRotate"    , ofMatrix4x4_getRotate },
  { "getTranslation", ofMatrix4x4_getTranslation },
  { "getScale"     , ofMatrix4x4_getScale },
  { "mul"          , ofMatrix4x4_operator_mule },
  { "postMultTranslate", ofMatrix4x4_postMultTranslate },
  { "postMultScale", ofMatrix4x4_postMultScale },
  { "postMultRotate", ofMatrix4x4_postMultRotate },
  { "preMultScale" , ofMatrix4x4_preMultScale },
  { "preMultTranslate", ofMatrix4x4_preMultTranslate },
  { "preMultRotate", ofMatrix4x4_preMultRotate },
  { "newIdentityMatrix", ofMatrix4x4_newIdentityMatrix },
  { "newScaleMatrix", ofMatrix4x4_newScaleMatrix },
  { "newTranslationMatrix", ofMatrix4x4_newTranslationMatrix },
  { "newRotationMatrix", ofMatrix4x4_newRotationMatrix },
  { "getInverseOf" , ofMatrix4x4_getInverseOf },
  { "getTransposedOf", ofMatrix4x4_getTransposedOf },
  { "getOrthoNormalOf", ofMatrix4x4_getOrthoNormalOf },
  { "newOrthoMatrix", ofMatrix4x4_newOrthoMatrix },
  { "newOrtho2DMatrix", ofMatrix4x4_newOrtho2DMatrix },
  { "newFrustumMatrix", ofMatrix4x4_newFrustumMatrix },
  { "newPerspectiveMatrix", ofMatrix4x4_newPerspectiveMatrix },
  { "newLookAtMatrix", ofMatrix4x4_newLookAtMatrix },
  { "transform3x3" , ofMatrix4x4_transform3x3 },
  { "__tostring"   , ofMatrix4x4___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofMatrix4x4(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofMatrix4x4");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofMatrix4x4_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofMatrix4x4", "ofMatrix4x4");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
