/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofAbstractHasPixels
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/types/ofBaseTypes.h"


/** ofAbstractHasPixels()
 * 
 */
static int ofAbstractHasPixels_ofAbstractHasPixels(lua_State *L) {
  try {
    ofAbstractHasPixels *retval__ = new ofAbstractHasPixels();
    dub_pushudata(L, retval__, "ofAbstractHasPixels", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofAbstractHasPixels::~ofAbstractHasPixels()
 * api/openFrameworks/types/ofBaseTypes.h:90
 */
static int ofAbstractHasPixels__ofAbstractHasPixels(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofAbstractHasPixels"));
    if (userdata->gc) {
      ofAbstractHasPixels *self = (ofAbstractHasPixels *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofAbstractHasPixels___tostring(lua_State *L) {
  ofAbstractHasPixels *self = *((ofAbstractHasPixels **)dub_checksdata_n(L, 1, "ofAbstractHasPixels"));
  lua_pushfstring(L, "ofAbstractHasPixels: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofAbstractHasPixels_member_methods[] = {
  { "new"          , ofAbstractHasPixels_ofAbstractHasPixels },
  { "__gc"         , ofAbstractHasPixels__ofAbstractHasPixels },
  { "__tostring"   , ofAbstractHasPixels___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofAbstractHasPixels(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofAbstractHasPixels");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofAbstractHasPixels_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofAbstractHasPixels", "ofAbstractHasPixels");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
