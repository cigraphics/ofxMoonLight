/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofMesh
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/3d/ofMesh.h"


/** ofMesh::ofMesh()
 * api/openFrameworks/3d/ofMesh.h:13
 */
static int ofMesh_ofMesh(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      ofPrimitiveMode mode = (ofPrimitiveMode)dub_checkint(L, 1);
      vector< ofVec3f > *verts = *((vector< ofVec3f > **)dub_checksdata(L, 2, "vector< ofVec3f >"));
      ofMesh *retval__ = new ofMesh(mode, *verts);
      dub_pushudata(L, retval__, "ofMesh", true);
      return 1;
    } else {
      ofMesh *retval__ = new ofMesh();
      dub_pushudata(L, retval__, "ofMesh", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofMesh::~ofMesh()
 * api/openFrameworks/3d/ofMesh.h:15
 */
static int ofMesh__ofMesh(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofMesh"));
    if (userdata->gc) {
      ofMesh *self = (ofMesh *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::setMode(ofPrimitiveMode mode)
 * api/openFrameworks/3d/ofMesh.h:17
 */
static int ofMesh_setMode(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofPrimitiveMode mode = (ofPrimitiveMode)dub_checkint(L, 2);
    self->setMode(mode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setMode: Unknown exception");
  }
  return dub_error(L);
}

/** ofPrimitiveMode ofMesh::getMode() const
 * api/openFrameworks/3d/ofMesh.h:18
 */
static int ofMesh_getMode(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushnumber(L, self->getMode());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getMode: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::clear()
 * api/openFrameworks/3d/ofMesh.h:20
 */
static int ofMesh_clear(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->clear();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clear: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clear: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::setupIndicesAuto()
 * api/openFrameworks/3d/ofMesh.h:22
 */
static int ofMesh_setupIndicesAuto(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->setupIndicesAuto();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setupIndicesAuto: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setupIndicesAuto: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofMesh::getVertex(ofIndexType i) const
 * api/openFrameworks/3d/ofMesh.h:24
 */
static int ofMesh_getVertex(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *i = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    dub_pushudata(L, new ofVec3f(self->getVertex(*i)), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getVertex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getVertex: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::addVertex(const ofVec3f &v)
 * api/openFrameworks/3d/ofMesh.h:25
 */
static int ofMesh_addVertex(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofVec3f *v = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
    self->addVertex(*v);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addVertex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addVertex: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::addVertices(const vector< ofVec3f > &verts)
 * api/openFrameworks/3d/ofMesh.h:26
 */
static int ofMesh_addVertices(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofVec3f *verts = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      int amt = dub_checkint(L, 3);
      self->addVertices(verts, amt);
      return 0;
    } else {
      vector< ofVec3f > *verts = *((vector< ofVec3f > **)dub_checksdata(L, 2, "vector< ofVec3f >"));
      self->addVertices(*verts);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addVertices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addVertices: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::removeVertex(ofIndexType index)
 * api/openFrameworks/3d/ofMesh.h:28
 */
static int ofMesh_removeVertex(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *index = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    self->removeVertex(*index);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeVertex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeVertex: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::setVertex(ofIndexType index, const ofVec3f &v)
 * api/openFrameworks/3d/ofMesh.h:29
 */
static int ofMesh_setVertex(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *index = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    ofVec3f *v = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
    self->setVertex(*index, *v);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setVertex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setVertex: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::clearVertices()
 * api/openFrameworks/3d/ofMesh.h:30
 */
static int ofMesh_clearVertices(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->clearVertices();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearVertices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearVertices: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofMesh::getNormal(ofIndexType i) const
 * api/openFrameworks/3d/ofMesh.h:32
 */
static int ofMesh_getNormal(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *i = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    dub_pushudata(L, new ofVec3f(self->getNormal(*i)), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNormal: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNormal: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::addNormal(const ofVec3f &n)
 * api/openFrameworks/3d/ofMesh.h:33
 */
static int ofMesh_addNormal(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofVec3f *n = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
    self->addNormal(*n);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addNormal: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addNormal: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::addNormals(const vector< ofVec3f > &norms)
 * api/openFrameworks/3d/ofMesh.h:34
 */
static int ofMesh_addNormals(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofVec3f *norms = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      int amt = dub_checkint(L, 3);
      self->addNormals(norms, amt);
      return 0;
    } else {
      vector< ofVec3f > *norms = *((vector< ofVec3f > **)dub_checksdata(L, 2, "vector< ofVec3f >"));
      self->addNormals(*norms);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addNormals: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addNormals: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::removeNormal(ofIndexType index)
 * api/openFrameworks/3d/ofMesh.h:36
 */
static int ofMesh_removeNormal(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *index = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    self->removeNormal(*index);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeNormal: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeNormal: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::setNormal(ofIndexType index, const ofVec3f &n)
 * api/openFrameworks/3d/ofMesh.h:37
 */
static int ofMesh_setNormal(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *index = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    ofVec3f *n = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
    self->setNormal(*index, *n);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setNormal: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setNormal: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::clearNormals()
 * api/openFrameworks/3d/ofMesh.h:38
 */
static int ofMesh_clearNormals(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->clearNormals();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearNormals: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearNormals: Unknown exception");
  }
  return dub_error(L);
}

/** ofFloatColor ofMesh::getColor(ofIndexType i) const
 * api/openFrameworks/3d/ofMesh.h:40
 */
static int ofMesh_getColor(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *i = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    dub_pushudata(L, new ofFloatColor(self->getColor(*i)), "ofFloatColor", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getColor: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::addColor(const ofFloatColor &c)
 * api/openFrameworks/3d/ofMesh.h:41
 */
static int ofMesh_addColor(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofFloatColor *c = *((ofFloatColor **)dub_checksdata(L, 2, "ofFloatColor"));
    self->addColor(*c);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addColor: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::addColors(const vector< ofFloatColor > &cols)
 * api/openFrameworks/3d/ofMesh.h:42
 */
static int ofMesh_addColors(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofFloatColor *cols = *((ofFloatColor **)dub_checksdata(L, 2, "ofFloatColor"));
      int amt = dub_checkint(L, 3);
      self->addColors(cols, amt);
      return 0;
    } else {
      vector< ofFloatColor > *cols = *((vector< ofFloatColor > **)dub_checksdata(L, 2, "vector< ofFloatColor >"));
      self->addColors(*cols);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addColors: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addColors: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::removeColor(ofIndexType index)
 * api/openFrameworks/3d/ofMesh.h:44
 */
static int ofMesh_removeColor(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *index = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    self->removeColor(*index);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeColor: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::setColor(ofIndexType index, const ofFloatColor &c)
 * api/openFrameworks/3d/ofMesh.h:45
 */
static int ofMesh_setColor(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *index = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    ofFloatColor *c = *((ofFloatColor **)dub_checksdata(L, 3, "ofFloatColor"));
    self->setColor(*index, *c);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setColor: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::clearColors()
 * api/openFrameworks/3d/ofMesh.h:46
 */
static int ofMesh_clearColors(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->clearColors();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearColors: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearColors: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofMesh::getTexCoord(ofIndexType i) const
 * api/openFrameworks/3d/ofMesh.h:48
 */
static int ofMesh_getTexCoord(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *i = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    dub_pushudata(L, new ofVec2f(self->getTexCoord(*i)), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getTexCoord: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getTexCoord: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::addTexCoord(const ofVec2f &t)
 * api/openFrameworks/3d/ofMesh.h:49
 */
static int ofMesh_addTexCoord(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofVec2f *t = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    self->addTexCoord(*t);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addTexCoord: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addTexCoord: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::addTexCoords(const vector< ofVec2f > &tCoords)
 * api/openFrameworks/3d/ofMesh.h:50
 */
static int ofMesh_addTexCoords(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofVec2f *tCoords = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
      int amt = dub_checkint(L, 3);
      self->addTexCoords(tCoords, amt);
      return 0;
    } else {
      vector< ofVec2f > *tCoords = *((vector< ofVec2f > **)dub_checksdata(L, 2, "vector< ofVec2f >"));
      self->addTexCoords(*tCoords);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addTexCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addTexCoords: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::removeTexCoord(ofIndexType index)
 * api/openFrameworks/3d/ofMesh.h:52
 */
static int ofMesh_removeTexCoord(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *index = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    self->removeTexCoord(*index);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeTexCoord: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeTexCoord: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::setTexCoord(ofIndexType index, const ofVec2f &t)
 * api/openFrameworks/3d/ofMesh.h:53
 */
static int ofMesh_setTexCoord(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *index = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    ofVec2f *t = *((ofVec2f **)dub_checksdata(L, 3, "ofVec2f"));
    self->setTexCoord(*index, *t);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setTexCoord: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setTexCoord: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::clearTexCoords()
 * api/openFrameworks/3d/ofMesh.h:54
 */
static int ofMesh_clearTexCoords(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->clearTexCoords();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearTexCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearTexCoords: Unknown exception");
  }
  return dub_error(L);
}

/** ofIndexType ofMesh::getIndex(ofIndexType i) const
 * api/openFrameworks/3d/ofMesh.h:56
 */
static int ofMesh_getIndex(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *i = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    dub_pushudata(L, new ofIndexType(self->getIndex(*i)), "ofIndexType", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getIndex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getIndex: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::addIndex(ofIndexType i)
 * api/openFrameworks/3d/ofMesh.h:57
 */
static int ofMesh_addIndex(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *i = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    self->addIndex(*i);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addIndex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addIndex: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::addIndices(const vector< ofIndexType > &inds)
 * api/openFrameworks/3d/ofMesh.h:58
 */
static int ofMesh_addIndices(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofIndexType *inds = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
      int amt = dub_checkint(L, 3);
      self->addIndices(inds, amt);
      return 0;
    } else {
      vector< ofIndexType > *inds = *((vector< ofIndexType > **)dub_checksdata(L, 2, "vector< ofIndexType >"));
      self->addIndices(*inds);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addIndices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addIndices: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::removeIndex(ofIndexType index)
 * api/openFrameworks/3d/ofMesh.h:60
 */
static int ofMesh_removeIndex(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *index = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    self->removeIndex(*index);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeIndex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeIndex: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::setIndex(ofIndexType index, ofIndexType val)
 * api/openFrameworks/3d/ofMesh.h:61
 */
static int ofMesh_setIndex(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *index = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    ofIndexType *val = *((ofIndexType **)dub_checksdata(L, 3, "ofIndexType"));
    self->setIndex(*index, *val);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setIndex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setIndex: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::clearIndices()
 * api/openFrameworks/3d/ofMesh.h:62
 */
static int ofMesh_clearIndices(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->clearIndices();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearIndices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearIndices: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::addTriangle(ofIndexType index1, ofIndexType index2, ofIndexType index3)
 * api/openFrameworks/3d/ofMesh.h:64
 */
static int ofMesh_addTriangle(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *index1 = *((ofIndexType **)dub_checksdata(L, 2, "ofIndexType"));
    ofIndexType *index2 = *((ofIndexType **)dub_checksdata(L, 3, "ofIndexType"));
    ofIndexType *index3 = *((ofIndexType **)dub_checksdata(L, 4, "ofIndexType"));
    self->addTriangle(*index1, *index2, *index3);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addTriangle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addTriangle: Unknown exception");
  }
  return dub_error(L);
}

/** int ofMesh::getNumVertices() const
 * api/openFrameworks/3d/ofMesh.h:66
 */
static int ofMesh_getNumVertices(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushnumber(L, self->getNumVertices());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNumVertices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNumVertices: Unknown exception");
  }
  return dub_error(L);
}

/** int ofMesh::getNumColors() const
 * api/openFrameworks/3d/ofMesh.h:67
 */
static int ofMesh_getNumColors(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushnumber(L, self->getNumColors());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNumColors: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNumColors: Unknown exception");
  }
  return dub_error(L);
}

/** int ofMesh::getNumNormals() const
 * api/openFrameworks/3d/ofMesh.h:68
 */
static int ofMesh_getNumNormals(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushnumber(L, self->getNumNormals());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNumNormals: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNumNormals: Unknown exception");
  }
  return dub_error(L);
}

/** int ofMesh::getNumTexCoords() const
 * api/openFrameworks/3d/ofMesh.h:69
 */
static int ofMesh_getNumTexCoords(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushnumber(L, self->getNumTexCoords());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNumTexCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNumTexCoords: Unknown exception");
  }
  return dub_error(L);
}

/** int ofMesh::getNumIndices() const
 * api/openFrameworks/3d/ofMesh.h:70
 */
static int ofMesh_getNumIndices(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushnumber(L, self->getNumIndices());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNumIndices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNumIndices: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f* ofMesh::getVerticesPointer()
 * api/openFrameworks/3d/ofMesh.h:72
 */
static int ofMesh_getVerticesPointer(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofVec3f *retval__ = self->getVerticesPointer();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "ofVec3f", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getVerticesPointer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getVerticesPointer: Unknown exception");
  }
  return dub_error(L);
}

/** ofFloatColor* ofMesh::getColorsPointer()
 * api/openFrameworks/3d/ofMesh.h:73
 */
static int ofMesh_getColorsPointer(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofFloatColor *retval__ = self->getColorsPointer();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "ofFloatColor", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getColorsPointer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getColorsPointer: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f* ofMesh::getNormalsPointer()
 * api/openFrameworks/3d/ofMesh.h:74
 */
static int ofMesh_getNormalsPointer(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofVec3f *retval__ = self->getNormalsPointer();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "ofVec3f", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNormalsPointer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNormalsPointer: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f* ofMesh::getTexCoordsPointer()
 * api/openFrameworks/3d/ofMesh.h:75
 */
static int ofMesh_getTexCoordsPointer(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofVec2f *retval__ = self->getTexCoordsPointer();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "ofVec2f", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getTexCoordsPointer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getTexCoordsPointer: Unknown exception");
  }
  return dub_error(L);
}

/** ofIndexType* ofMesh::getIndexPointer()
 * api/openFrameworks/3d/ofMesh.h:76
 */
static int ofMesh_getIndexPointer(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    ofIndexType *retval__ = self->getIndexPointer();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "ofIndexType", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getIndexPointer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getIndexPointer: Unknown exception");
  }
  return dub_error(L);
}

/** vector<ofVec3f>& ofMesh::getVertices()
 * api/openFrameworks/3d/ofMesh.h:84
 */
static int ofMesh_getVertices(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    dub_pushudata(L, &self->getVertices(), "vector< ofVec3f >", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getVertices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getVertices: Unknown exception");
  }
  return dub_error(L);
}

/** vector<ofFloatColor>& ofMesh::getColors()
 * api/openFrameworks/3d/ofMesh.h:85
 */
static int ofMesh_getColors(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    dub_pushudata(L, &self->getColors(), "vector< ofFloatColor >", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getColors: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getColors: Unknown exception");
  }
  return dub_error(L);
}

/** vector<ofVec3f>& ofMesh::getNormals()
 * api/openFrameworks/3d/ofMesh.h:86
 */
static int ofMesh_getNormals(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    dub_pushudata(L, &self->getNormals(), "vector< ofVec3f >", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNormals: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNormals: Unknown exception");
  }
  return dub_error(L);
}

/** vector<ofVec2f>& ofMesh::getTexCoords()
 * api/openFrameworks/3d/ofMesh.h:87
 */
static int ofMesh_getTexCoords(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    dub_pushudata(L, &self->getTexCoords(), "vector< ofVec2f >", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getTexCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getTexCoords: Unknown exception");
  }
  return dub_error(L);
}

/** vector<ofIndexType>& ofMesh::getIndices()
 * api/openFrameworks/3d/ofMesh.h:88
 */
static int ofMesh_getIndices(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    dub_pushudata(L, &self->getIndices(), "vector< ofIndexType >", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getIndices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getIndices: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofMesh::getCentroid() const
 * api/openFrameworks/3d/ofMesh.h:98
 */
static int ofMesh_getCentroid(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    dub_pushudata(L, new ofVec3f(self->getCentroid()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCentroid: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCentroid: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::setName(string name_)
 * api/openFrameworks/3d/ofMesh.h:100
 */
static int ofMesh_setName(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    string *name_ = *((string **)dub_checksdata(L, 2, "string"));
    self->setName(*name_);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setName: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setName: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMesh::haveVertsChanged()
 * api/openFrameworks/3d/ofMesh.h:102
 */
static int ofMesh_haveVertsChanged(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushboolean(L, self->haveVertsChanged());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "haveVertsChanged: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "haveVertsChanged: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMesh::haveColorsChanged()
 * api/openFrameworks/3d/ofMesh.h:103
 */
static int ofMesh_haveColorsChanged(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushboolean(L, self->haveColorsChanged());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "haveColorsChanged: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "haveColorsChanged: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMesh::haveNormalsChanged()
 * api/openFrameworks/3d/ofMesh.h:104
 */
static int ofMesh_haveNormalsChanged(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushboolean(L, self->haveNormalsChanged());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "haveNormalsChanged: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "haveNormalsChanged: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMesh::haveTexCoordsChanged()
 * api/openFrameworks/3d/ofMesh.h:105
 */
static int ofMesh_haveTexCoordsChanged(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushboolean(L, self->haveTexCoordsChanged());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "haveTexCoordsChanged: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "haveTexCoordsChanged: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMesh::haveIndicesChanged()
 * api/openFrameworks/3d/ofMesh.h:106
 */
static int ofMesh_haveIndicesChanged(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushboolean(L, self->haveIndicesChanged());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "haveIndicesChanged: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "haveIndicesChanged: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMesh::hasVertices()
 * api/openFrameworks/3d/ofMesh.h:108
 */
static int ofMesh_hasVertices(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushboolean(L, self->hasVertices());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "hasVertices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "hasVertices: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMesh::hasColors()
 * api/openFrameworks/3d/ofMesh.h:109
 */
static int ofMesh_hasColors(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushboolean(L, self->hasColors());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "hasColors: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "hasColors: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMesh::hasNormals()
 * api/openFrameworks/3d/ofMesh.h:110
 */
static int ofMesh_hasNormals(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushboolean(L, self->hasNormals());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "hasNormals: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "hasNormals: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMesh::hasTexCoords()
 * api/openFrameworks/3d/ofMesh.h:111
 */
static int ofMesh_hasTexCoords(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushboolean(L, self->hasTexCoords());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "hasTexCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "hasTexCoords: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofMesh::hasIndices()
 * api/openFrameworks/3d/ofMesh.h:112
 */
static int ofMesh_hasIndices(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushboolean(L, self->hasIndices());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "hasIndices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "hasIndices: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::drawVertices()
 * api/openFrameworks/3d/ofMesh.h:114
 */
static int ofMesh_drawVertices(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->drawVertices();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawVertices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawVertices: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::drawWireframe()
 * api/openFrameworks/3d/ofMesh.h:115
 */
static int ofMesh_drawWireframe(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->drawWireframe();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawWireframe: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawWireframe: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::drawFaces()
 * api/openFrameworks/3d/ofMesh.h:116
 */
static int ofMesh_drawFaces(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->drawFaces();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawFaces: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawFaces: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::draw()
 * api/openFrameworks/3d/ofMesh.h:117
 */
static int ofMesh_draw(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->draw();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "draw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "draw: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::load(string path)
 * api/openFrameworks/3d/ofMesh.h:119
 */
static int ofMesh_load(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    string *path = *((string **)dub_checksdata(L, 2, "string"));
    self->load(*path);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "load: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "load: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMesh::save(string path, bool useBinary=false)
 * api/openFrameworks/3d/ofMesh.h:120
 */
static int ofMesh_save(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      string *path = *((string **)dub_checksdata(L, 2, "string"));
      bool useBinary = dub_checkboolean(L, 3);
      self->save(*path, useBinary);
      return 0;
    } else {
      string *path = *((string **)dub_checksdata(L, 2, "string"));
      self->save(*path);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "save: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "save: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofMesh::enableColors()
 * api/openFrameworks/3d/ofMesh.h:122
 */
static int ofMesh_enableColors(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->enableColors();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableColors: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableColors: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofMesh::enableTextures()
 * api/openFrameworks/3d/ofMesh.h:123
 */
static int ofMesh_enableTextures(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->enableTextures();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableTextures: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableTextures: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofMesh::enableNormals()
 * api/openFrameworks/3d/ofMesh.h:124
 */
static int ofMesh_enableNormals(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->enableNormals();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableNormals: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableNormals: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofMesh::enableIndices()
 * api/openFrameworks/3d/ofMesh.h:125
 */
static int ofMesh_enableIndices(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->enableIndices();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableIndices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableIndices: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofMesh::disableColors()
 * api/openFrameworks/3d/ofMesh.h:127
 */
static int ofMesh_disableColors(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->disableColors();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disableColors: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disableColors: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofMesh::disableTextures()
 * api/openFrameworks/3d/ofMesh.h:128
 */
static int ofMesh_disableTextures(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->disableTextures();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disableTextures: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disableTextures: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofMesh::disableNormals()
 * api/openFrameworks/3d/ofMesh.h:129
 */
static int ofMesh_disableNormals(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->disableNormals();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disableNormals: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disableNormals: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofMesh::disableIndices()
 * api/openFrameworks/3d/ofMesh.h:130
 */
static int ofMesh_disableIndices(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    self->disableIndices();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disableIndices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disableIndices: Unknown exception");
  }
  return dub_error(L);
}

/** virtual bool ofMesh::usingColors()
 * api/openFrameworks/3d/ofMesh.h:132
 */
static int ofMesh_usingColors(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushboolean(L, self->usingColors());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "usingColors: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "usingColors: Unknown exception");
  }
  return dub_error(L);
}

/** virtual bool ofMesh::usingTextures()
 * api/openFrameworks/3d/ofMesh.h:133
 */
static int ofMesh_usingTextures(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushboolean(L, self->usingTextures());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "usingTextures: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "usingTextures: Unknown exception");
  }
  return dub_error(L);
}

/** virtual bool ofMesh::usingNormals()
 * api/openFrameworks/3d/ofMesh.h:134
 */
static int ofMesh_usingNormals(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushboolean(L, self->usingNormals());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "usingNormals: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "usingNormals: Unknown exception");
  }
  return dub_error(L);
}

/** virtual bool ofMesh::usingIndices()
 * api/openFrameworks/3d/ofMesh.h:135
 */
static int ofMesh_usingIndices(lua_State *L) {
  try {
    ofMesh *self = *((ofMesh **)dub_checksdata(L, 1, "ofMesh"));
    lua_pushboolean(L, self->usingIndices());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "usingIndices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "usingIndices: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofMesh___tostring(lua_State *L) {
  ofMesh *self = *((ofMesh **)dub_checksdata_n(L, 1, "ofMesh"));
  lua_pushfstring(L, "ofMesh: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofMesh_member_methods[] = {
  { "new"          , ofMesh_ofMesh        },
  { "__gc"         , ofMesh__ofMesh       },
  { "setMode"      , ofMesh_setMode       },
  { "getMode"      , ofMesh_getMode       },
  { "clear"        , ofMesh_clear         },
  { "setupIndicesAuto", ofMesh_setupIndicesAuto },
  { "getVertex"    , ofMesh_getVertex     },
  { "addVertex"    , ofMesh_addVertex     },
  { "addVertices"  , ofMesh_addVertices   },
  { "removeVertex" , ofMesh_removeVertex  },
  { "setVertex"    , ofMesh_setVertex     },
  { "clearVertices", ofMesh_clearVertices },
  { "getNormal"    , ofMesh_getNormal     },
  { "addNormal"    , ofMesh_addNormal     },
  { "addNormals"   , ofMesh_addNormals    },
  { "removeNormal" , ofMesh_removeNormal  },
  { "setNormal"    , ofMesh_setNormal     },
  { "clearNormals" , ofMesh_clearNormals  },
  { "getColor"     , ofMesh_getColor      },
  { "addColor"     , ofMesh_addColor      },
  { "addColors"    , ofMesh_addColors     },
  { "removeColor"  , ofMesh_removeColor   },
  { "setColor"     , ofMesh_setColor      },
  { "clearColors"  , ofMesh_clearColors   },
  { "getTexCoord"  , ofMesh_getTexCoord   },
  { "addTexCoord"  , ofMesh_addTexCoord   },
  { "addTexCoords" , ofMesh_addTexCoords  },
  { "removeTexCoord", ofMesh_removeTexCoord },
  { "setTexCoord"  , ofMesh_setTexCoord   },
  { "clearTexCoords", ofMesh_clearTexCoords },
  { "getIndex"     , ofMesh_getIndex      },
  { "addIndex"     , ofMesh_addIndex      },
  { "addIndices"   , ofMesh_addIndices    },
  { "removeIndex"  , ofMesh_removeIndex   },
  { "setIndex"     , ofMesh_setIndex      },
  { "clearIndices" , ofMesh_clearIndices  },
  { "addTriangle"  , ofMesh_addTriangle   },
  { "getNumVertices", ofMesh_getNumVertices },
  { "getNumColors" , ofMesh_getNumColors  },
  { "getNumNormals", ofMesh_getNumNormals },
  { "getNumTexCoords", ofMesh_getNumTexCoords },
  { "getNumIndices", ofMesh_getNumIndices },
  { "getVerticesPointer", ofMesh_getVerticesPointer },
  { "getColorsPointer", ofMesh_getColorsPointer },
  { "getNormalsPointer", ofMesh_getNormalsPointer },
  { "getTexCoordsPointer", ofMesh_getTexCoordsPointer },
  { "getIndexPointer", ofMesh_getIndexPointer },
  { "getVertices"  , ofMesh_getVertices   },
  { "getColors"    , ofMesh_getColors     },
  { "getNormals"   , ofMesh_getNormals    },
  { "getTexCoords" , ofMesh_getTexCoords  },
  { "getIndices"   , ofMesh_getIndices    },
  { "getCentroid"  , ofMesh_getCentroid   },
  { "setName"      , ofMesh_setName       },
  { "haveVertsChanged", ofMesh_haveVertsChanged },
  { "haveColorsChanged", ofMesh_haveColorsChanged },
  { "haveNormalsChanged", ofMesh_haveNormalsChanged },
  { "haveTexCoordsChanged", ofMesh_haveTexCoordsChanged },
  { "haveIndicesChanged", ofMesh_haveIndicesChanged },
  { "hasVertices"  , ofMesh_hasVertices   },
  { "hasColors"    , ofMesh_hasColors     },
  { "hasNormals"   , ofMesh_hasNormals    },
  { "hasTexCoords" , ofMesh_hasTexCoords  },
  { "hasIndices"   , ofMesh_hasIndices    },
  { "drawVertices" , ofMesh_drawVertices  },
  { "drawWireframe", ofMesh_drawWireframe },
  { "drawFaces"    , ofMesh_drawFaces     },
  { "draw"         , ofMesh_draw          },
  { "load"         , ofMesh_load          },
  { "save"         , ofMesh_save          },
  { "enableColors" , ofMesh_enableColors  },
  { "enableTextures", ofMesh_enableTextures },
  { "enableNormals", ofMesh_enableNormals },
  { "enableIndices", ofMesh_enableIndices },
  { "disableColors", ofMesh_disableColors },
  { "disableTextures", ofMesh_disableTextures },
  { "disableNormals", ofMesh_disableNormals },
  { "disableIndices", ofMesh_disableIndices },
  { "usingColors"  , ofMesh_usingColors   },
  { "usingTextures", ofMesh_usingTextures },
  { "usingNormals" , ofMesh_usingNormals  },
  { "usingIndices" , ofMesh_usingIndices  },
  { "__tostring"   , ofMesh___tostring    },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofMesh(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofMesh");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofMesh_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofMesh", "ofMesh");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
