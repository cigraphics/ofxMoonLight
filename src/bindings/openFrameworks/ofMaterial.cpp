/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofMaterial
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "gl/ofMaterial.h"


/** ~ofMaterial()
 * 
 */
static int ofMaterial__ofMaterial(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofMaterial"));
    if (userdata->gc) {
      ofMaterial *self = (ofMaterial *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** ofMaterial::ofMaterial()
 * api/openFrameworks/gl/ofMaterial.h:20
 */
static int ofMaterial_ofMaterial(lua_State *L) {
  try {
    ofMaterial *retval__ = new ofMaterial();
    dub_pushudata(L, retval__, "ofMaterial", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMaterial::setColors(ofFloatColor oDiffuse, ofFloatColor oAmbient, ofFloatColor oSpecular, ofFloatColor emissive)
 * api/openFrameworks/gl/ofMaterial.h:23
 */
static int ofMaterial_setColors(lua_State *L) {
  try {
    ofMaterial *self = *((ofMaterial **)dub_checksdata(L, 1, "ofMaterial"));
    ofFloatColor *oDiffuse = *((ofFloatColor **)dub_checksdata(L, 2, "ofFloatColor"));
    ofFloatColor *oAmbient = *((ofFloatColor **)dub_checksdata(L, 3, "ofFloatColor"));
    ofFloatColor *oSpecular = *((ofFloatColor **)dub_checksdata(L, 4, "ofFloatColor"));
    ofFloatColor *emissive = *((ofFloatColor **)dub_checksdata(L, 5, "ofFloatColor"));
    self->setColors(*oDiffuse, *oAmbient, *oSpecular, *emissive);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setColors: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setColors: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMaterial::setDiffuseColor(ofFloatColor oDiffuse)
 * api/openFrameworks/gl/ofMaterial.h:24
 */
static int ofMaterial_setDiffuseColor(lua_State *L) {
  try {
    ofMaterial *self = *((ofMaterial **)dub_checksdata(L, 1, "ofMaterial"));
    ofFloatColor *oDiffuse = *((ofFloatColor **)dub_checksdata(L, 2, "ofFloatColor"));
    self->setDiffuseColor(*oDiffuse);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDiffuseColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDiffuseColor: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMaterial::setAmbientColor(ofFloatColor oAmbient)
 * api/openFrameworks/gl/ofMaterial.h:25
 */
static int ofMaterial_setAmbientColor(lua_State *L) {
  try {
    ofMaterial *self = *((ofMaterial **)dub_checksdata(L, 1, "ofMaterial"));
    ofFloatColor *oAmbient = *((ofFloatColor **)dub_checksdata(L, 2, "ofFloatColor"));
    self->setAmbientColor(*oAmbient);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAmbientColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAmbientColor: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMaterial::setSpecularColor(ofFloatColor oSpecular)
 * api/openFrameworks/gl/ofMaterial.h:26
 */
static int ofMaterial_setSpecularColor(lua_State *L) {
  try {
    ofMaterial *self = *((ofMaterial **)dub_checksdata(L, 1, "ofMaterial"));
    ofFloatColor *oSpecular = *((ofFloatColor **)dub_checksdata(L, 2, "ofFloatColor"));
    self->setSpecularColor(*oSpecular);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSpecularColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSpecularColor: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMaterial::setEmissiveColor(ofFloatColor oEmmisive)
 * api/openFrameworks/gl/ofMaterial.h:27
 */
static int ofMaterial_setEmissiveColor(lua_State *L) {
  try {
    ofMaterial *self = *((ofMaterial **)dub_checksdata(L, 1, "ofMaterial"));
    ofFloatColor *oEmmisive = *((ofFloatColor **)dub_checksdata(L, 2, "ofFloatColor"));
    self->setEmissiveColor(*oEmmisive);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setEmissiveColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setEmissiveColor: Unknown exception");
  }
  return dub_error(L);
}

/** void ofMaterial::setShininess(float nShininess)
 * api/openFrameworks/gl/ofMaterial.h:28
 */
static int ofMaterial_setShininess(lua_State *L) {
  try {
    ofMaterial *self = *((ofMaterial **)dub_checksdata(L, 1, "ofMaterial"));
    float nShininess = dub_checknumber(L, 2);
    self->setShininess(nShininess);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setShininess: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setShininess: Unknown exception");
  }
  return dub_error(L);
}

/** ofFloatColor ofMaterial::getDiffuseColor()
 * api/openFrameworks/gl/ofMaterial.h:30
 */
static int ofMaterial_getDiffuseColor(lua_State *L) {
  try {
    ofMaterial *self = *((ofMaterial **)dub_checksdata(L, 1, "ofMaterial"));
    dub_pushudata(L, new ofFloatColor(self->getDiffuseColor()), "ofFloatColor", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getDiffuseColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getDiffuseColor: Unknown exception");
  }
  return dub_error(L);
}

/** ofFloatColor ofMaterial::getAmbientColor()
 * api/openFrameworks/gl/ofMaterial.h:31
 */
static int ofMaterial_getAmbientColor(lua_State *L) {
  try {
    ofMaterial *self = *((ofMaterial **)dub_checksdata(L, 1, "ofMaterial"));
    dub_pushudata(L, new ofFloatColor(self->getAmbientColor()), "ofFloatColor", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAmbientColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAmbientColor: Unknown exception");
  }
  return dub_error(L);
}

/** ofFloatColor ofMaterial::getSpecularColor()
 * api/openFrameworks/gl/ofMaterial.h:32
 */
static int ofMaterial_getSpecularColor(lua_State *L) {
  try {
    ofMaterial *self = *((ofMaterial **)dub_checksdata(L, 1, "ofMaterial"));
    dub_pushudata(L, new ofFloatColor(self->getSpecularColor()), "ofFloatColor", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSpecularColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSpecularColor: Unknown exception");
  }
  return dub_error(L);
}

/** ofFloatColor ofMaterial::getEmissiveColor()
 * api/openFrameworks/gl/ofMaterial.h:33
 */
static int ofMaterial_getEmissiveColor(lua_State *L) {
  try {
    ofMaterial *self = *((ofMaterial **)dub_checksdata(L, 1, "ofMaterial"));
    dub_pushudata(L, new ofFloatColor(self->getEmissiveColor()), "ofFloatColor", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getEmissiveColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getEmissiveColor: Unknown exception");
  }
  return dub_error(L);
}

/** float ofMaterial::getShininess()
 * api/openFrameworks/gl/ofMaterial.h:34
 */
static int ofMaterial_getShininess(lua_State *L) {
  try {
    ofMaterial *self = *((ofMaterial **)dub_checksdata(L, 1, "ofMaterial"));
    lua_pushnumber(L, self->getShininess());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getShininess: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getShininess: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofMaterial::begin()
 * api/openFrameworks/gl/ofMaterial.h:37
 */
static int ofMaterial_begin(lua_State *L) {
  try {
    ofMaterial *self = *((ofMaterial **)dub_checksdata(L, 1, "ofMaterial"));
    self->begin();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "begin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "begin: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofMaterial::end()
 * api/openFrameworks/gl/ofMaterial.h:38
 */
static int ofMaterial_end(lua_State *L) {
  try {
    ofMaterial *self = *((ofMaterial **)dub_checksdata(L, 1, "ofMaterial"));
    self->end();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "end: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "end: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofMaterial___tostring(lua_State *L) {
  ofMaterial *self = *((ofMaterial **)dub_checksdata_n(L, 1, "ofMaterial"));
  lua_pushfstring(L, "ofMaterial: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofMaterial_member_methods[] = {
  { "__gc"         , ofMaterial__ofMaterial },
  { "new"          , ofMaterial_ofMaterial },
  { "setColors"    , ofMaterial_setColors },
  { "setDiffuseColor", ofMaterial_setDiffuseColor },
  { "setAmbientColor", ofMaterial_setAmbientColor },
  { "setSpecularColor", ofMaterial_setSpecularColor },
  { "setEmissiveColor", ofMaterial_setEmissiveColor },
  { "setShininess" , ofMaterial_setShininess },
  { "getDiffuseColor", ofMaterial_getDiffuseColor },
  { "getAmbientColor", ofMaterial_getAmbientColor },
  { "getSpecularColor", ofMaterial_getSpecularColor },
  { "getEmissiveColor", ofMaterial_getEmissiveColor },
  { "getShininess" , ofMaterial_getShininess },
  { "begin"        , ofMaterial_begin     },
  { "end"          , ofMaterial_end       },
  { "__tostring"   , ofMaterial___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofMaterial(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofMaterial");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofMaterial_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofMaterial", "ofMaterial");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
