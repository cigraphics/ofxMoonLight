/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofQuaternion
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/math/ofQuaternion.h"


/** ~ofQuaternion()
 * 
 */
static int ofQuaternion__ofQuaternion(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofQuaternion"));
    if (userdata->gc) {
      ofQuaternion *self = (ofQuaternion *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** Set attributes (key, value)
 * 
 */
static int ofQuaternion__set_(lua_State *L) {

  ofQuaternion *self = *((ofQuaternion **)dub_checksdata_n(L, 1, "ofQuaternion"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "_v")) break;
      self->_v = **((ofVec4f **)dub_checksdata_n(L, 3, "ofVec4f"));
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** ofQuaternion::ofQuaternion()
 * api/openFrameworks/math/ofQuaternion.h:30
 */
static int ofQuaternion_ofQuaternion(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      float angle1 = dub_checknumber(L, 1);
      ofVec3f *axis1 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      float angle2 = dub_checknumber(L, 3);
      ofVec3f *axis2 = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
      float angle3 = dub_checknumber(L, 5);
      ofVec3f *axis3 = *((ofVec3f **)dub_checksdata(L, 6, "ofVec3f"));
      ofQuaternion *retval__ = new ofQuaternion(angle1, *axis1, angle2, *axis2, angle3, *axis3);
      dub_pushudata(L, retval__, "ofQuaternion", true);
      return 1;
    } else if (top__ >= 4) {
      float x = dub_checknumber(L, 1);
      float y = dub_checknumber(L, 2);
      float z = dub_checknumber(L, 3);
      float w = dub_checknumber(L, 4);
      ofQuaternion *retval__ = new ofQuaternion(x, y, z, w);
      dub_pushudata(L, retval__, "ofQuaternion", true);
      return 1;
    } else if (top__ >= 2) {
      float angle = dub_checknumber(L, 1);
      ofVec3f *axis = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofQuaternion *retval__ = new ofQuaternion(angle, *axis);
      dub_pushudata(L, retval__, "ofQuaternion", true);
      return 1;
    } else if (top__ >= 1) {
      ofVec4f *v = *((ofVec4f **)dub_checksdata(L, 1, "ofVec4f"));
      ofQuaternion *retval__ = new ofQuaternion(*v);
      dub_pushudata(L, retval__, "ofQuaternion", true);
      return 1;
    } else {
      ofQuaternion *retval__ = new ofQuaternion();
      dub_pushudata(L, retval__, "ofQuaternion", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** ofQuaternion & ofQuaternion::operator=(const ofQuaternion &q)
 * api/openFrameworks/math/ofQuaternion.h:36
 */
static int ofQuaternion_operator_sete(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    ofQuaternion *q = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
    dub_pushudata(L, &self->operator=(*q), "ofQuaternion", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofQuaternion::operator==(const ofQuaternion &q) const
 * api/openFrameworks/math/ofQuaternion.h:37
 */
static int ofQuaternion_operator_eq(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    ofQuaternion *q = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
    lua_pushboolean(L, self->operator==(*q));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__eq: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__eq: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec4f ofQuaternion::asVec4() const
 * api/openFrameworks/math/ofQuaternion.h:44
 */
static int ofQuaternion_asVec4(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    dub_pushudata(L, new ofVec4f(self->asVec4()), "ofVec4f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "asVec4: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "asVec4: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofQuaternion::asVec3() const
 * api/openFrameworks/math/ofQuaternion.h:45
 */
static int ofQuaternion_asVec3(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    dub_pushudata(L, new ofVec3f(self->asVec3()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "asVec3: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "asVec3: Unknown exception");
  }
  return dub_error(L);
}

/** void ofQuaternion::set(float x, float y, float z, float w)
 * api/openFrameworks/math/ofQuaternion.h:48
 */
static int ofQuaternion_set(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      float w = dub_checknumber(L, 5);
      self->set(x, y, z, w);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofMatrix4x4", type__)) ) {
        ofMatrix4x4 *matrix = *((ofMatrix4x4 **)ptr2__);
        self->set(*matrix);
        return 0;
      } else {
        ofVec4f *v = *((ofVec4f **)dub_checksdata(L, 2, "ofVec4f"));
        self->set(*v);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub_error(L);
}

/** void ofQuaternion::get(ofMatrix4x4 &matrix) const
 * api/openFrameworks/math/ofQuaternion.h:52
 */
static int ofQuaternion_get(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    ofMatrix4x4 *matrix = *((ofMatrix4x4 **)dub_checksdata(L, 2, "ofMatrix4x4"));
    self->get(*matrix);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "get: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "get: Unknown exception");
  }
  return dub_error(L);
}

/** float & ofQuaternion::operator[](int i)
 * api/openFrameworks/math/ofQuaternion.h:54
 */
static int ofQuaternion__get_(lua_State *L) {

  ofQuaternion *self = *((ofQuaternion **)dub_checksdata_n(L, 1, "ofQuaternion", true));
  if (lua_type(L, 2) != LUA_TSTRING) {
    int i = luaL_checkint(L, 2);
    lua_pushnumber(L, self->operator[](i));
    return 1;
  }
  
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "_v")) break;
      dub_pushudata(L, &self->_v, "ofVec4f", false);
      return 1;
    }
  }
  return 0;
}

/** float & ofQuaternion::x()
 * api/openFrameworks/math/ofQuaternion.h:57
 */
static int ofQuaternion_x(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    lua_pushnumber(L, self->x());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "x: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "x: Unknown exception");
  }
  return dub_error(L);
}

/** float & ofQuaternion::y()
 * api/openFrameworks/math/ofQuaternion.h:58
 */
static int ofQuaternion_y(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    lua_pushnumber(L, self->y());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "y: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "y: Unknown exception");
  }
  return dub_error(L);
}

/** float & ofQuaternion::z()
 * api/openFrameworks/math/ofQuaternion.h:59
 */
static int ofQuaternion_z(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    lua_pushnumber(L, self->z());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "z: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "z: Unknown exception");
  }
  return dub_error(L);
}

/** float & ofQuaternion::w()
 * api/openFrameworks/math/ofQuaternion.h:60
 */
static int ofQuaternion_w(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    lua_pushnumber(L, self->w());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "w: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "w: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofQuaternion::zeroRotation() const
 * api/openFrameworks/math/ofQuaternion.h:68
 */
static int ofQuaternion_zeroRotation(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    lua_pushboolean(L, self->zeroRotation());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "zeroRotation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "zeroRotation: Unknown exception");
  }
  return dub_error(L);
}

/** const ofQuaternion ofQuaternion::operator*(float rhs) const
 * api/openFrameworks/math/ofQuaternion.h:78
 */
static int ofQuaternion_operator_mul(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if (type__ == LUA_TNUMBER) {
      float rhs = dub_checknumber(L, 2);
      dub_pushudata(L, new ofQuaternion(self->operator*(rhs)), "ofQuaternion", true);
      return 1;
    } else if ( (ptr2__ = dub_issdata(L, 2, "ofQuaternion", type__)) ) {
      ofQuaternion *rhs = *((ofQuaternion **)ptr2__);
      dub_pushudata(L, new ofQuaternion(self->operator*(*rhs)), "ofQuaternion", true);
      return 1;
    } else {
      ofVec3f *v = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      dub_pushudata(L, new ofVec3f(self->operator*(*v)), "ofVec3f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "__mul: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__mul: Unknown exception");
  }
  return dub_error(L);
}

/** ofQuaternion & ofQuaternion::operator*=(float rhs)
 * api/openFrameworks/math/ofQuaternion.h:79
 */
static int ofQuaternion_operator_mule(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TNUMBER) {
      float rhs = dub_checknumber(L, 2);
      dub_pushudata(L, &self->operator*=(rhs), "ofQuaternion", false);
      return 1;
    } else {
      ofQuaternion *rhs = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
      dub_pushudata(L, &self->operator*=(*rhs), "ofQuaternion", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "mul: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mul: Unknown exception");
  }
  return dub_error(L);
}

/** ofQuaternion ofQuaternion::operator/(float rhs) const
 * api/openFrameworks/math/ofQuaternion.h:82
 */
static int ofQuaternion_operator_div(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TNUMBER) {
      float rhs = dub_checknumber(L, 2);
      dub_pushudata(L, new ofQuaternion(self->operator/(rhs)), "ofQuaternion", true);
      return 1;
    } else {
      ofQuaternion *denom = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
      dub_pushudata(L, new ofQuaternion(self->operator/(*denom)), "ofQuaternion", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "__div: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__div: Unknown exception");
  }
  return dub_error(L);
}

/** ofQuaternion & ofQuaternion::operator/=(float rhs)
 * api/openFrameworks/math/ofQuaternion.h:83
 */
static int ofQuaternion_operator_dive(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TNUMBER) {
      float rhs = dub_checknumber(L, 2);
      dub_pushudata(L, &self->operator/=(rhs), "ofQuaternion", false);
      return 1;
    } else {
      ofQuaternion *denom = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
      dub_pushudata(L, &self->operator/=(*denom), "ofQuaternion", false);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "div: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "div: Unknown exception");
  }
  return dub_error(L);
}

/** const ofQuaternion ofQuaternion::operator+(const ofQuaternion &rhs) const
 * api/openFrameworks/math/ofQuaternion.h:86
 */
static int ofQuaternion_operator_add(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    ofQuaternion *rhs = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
    dub_pushudata(L, new ofQuaternion(self->operator+(*rhs)), "ofQuaternion", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__add: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__add: Unknown exception");
  }
  return dub_error(L);
}

/** ofQuaternion & ofQuaternion::operator+=(const ofQuaternion &rhs)
 * api/openFrameworks/math/ofQuaternion.h:87
 */
static int ofQuaternion_operator_adde(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    ofQuaternion *rhs = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
    dub_pushudata(L, &self->operator+=(*rhs), "ofQuaternion", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "add: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "add: Unknown exception");
  }
  return dub_error(L);
}

/** const ofQuaternion ofQuaternion::operator-(const ofQuaternion &rhs) const
 * api/openFrameworks/math/ofQuaternion.h:88
 */
static int ofQuaternion_operator_sub(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    ofQuaternion *rhs = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
    dub_pushudata(L, new ofQuaternion(self->operator-(*rhs)), "ofQuaternion", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__sub: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__sub: Unknown exception");
  }
  return dub_error(L);
}

/** ofQuaternion & ofQuaternion::operator-=(const ofQuaternion &rhs)
 * api/openFrameworks/math/ofQuaternion.h:89
 */
static int ofQuaternion_operator_sube(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    ofQuaternion *rhs = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
    dub_pushudata(L, &self->operator-=(*rhs), "ofQuaternion", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "sub: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "sub: Unknown exception");
  }
  return dub_error(L);
}

/** const ofQuaternion ofQuaternion::operator-() const
 * api/openFrameworks/math/ofQuaternion.h:90
 */
static int ofQuaternion_operator_unm(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    dub_pushudata(L, new ofQuaternion(self->operator- ()), "ofQuaternion", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__unm: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__unm: Unknown exception");
  }
  return dub_error(L);
}

/** float ofQuaternion::length() const
 * api/openFrameworks/math/ofQuaternion.h:95
 */
static int ofQuaternion_length(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    lua_pushnumber(L, self->length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "length: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "length: Unknown exception");
  }
  return dub_error(L);
}

/** float ofQuaternion::length2() const
 * api/openFrameworks/math/ofQuaternion.h:98
 */
static int ofQuaternion_length2(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    lua_pushnumber(L, self->length2());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "length2: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "length2: Unknown exception");
  }
  return dub_error(L);
}

/** ofQuaternion ofQuaternion::conj() const
 * api/openFrameworks/math/ofQuaternion.h:101
 */
static int ofQuaternion_conj(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    dub_pushudata(L, new ofQuaternion(self->conj()), "ofQuaternion", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "conj: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "conj: Unknown exception");
  }
  return dub_error(L);
}

/** const ofQuaternion ofQuaternion::inverse() const
 * api/openFrameworks/math/ofQuaternion.h:104
 */
static int ofQuaternion_inverse(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    dub_pushudata(L, new ofQuaternion(self->inverse()), "ofQuaternion", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "inverse: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "inverse: Unknown exception");
  }
  return dub_error(L);
}

/** void ofQuaternion::makeRotate(float angle, float x, float y, float z)
 * api/openFrameworks/math/ofQuaternion.h:114
 */
static int ofQuaternion_makeRotate(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    int top__ = lua_gettop(L);
    if (top__ >= 7) {
      float angle1 = dub_checknumber(L, 2);
      ofVec3f *axis1 = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      float angle2 = dub_checknumber(L, 4);
      ofVec3f *axis2 = *((ofVec3f **)dub_checksdata(L, 5, "ofVec3f"));
      float angle3 = dub_checknumber(L, 6);
      ofVec3f *axis3 = *((ofVec3f **)dub_checksdata(L, 7, "ofVec3f"));
      self->makeRotate(angle1, *axis1, angle2, *axis2, angle3, *axis3);
      return 0;
    } else if (top__ >= 5) {
      float angle = dub_checknumber(L, 2);
      float x = dub_checknumber(L, 3);
      float y = dub_checknumber(L, 4);
      float z = dub_checknumber(L, 5);
      self->makeRotate(angle, x, y, z);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float angle = dub_checknumber(L, 2);
        ofVec3f *vec = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
        self->makeRotate(angle, *vec);
        return 0;
      } else {
        ofVec3f *vec1 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
        ofVec3f *vec2 = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
        self->makeRotate(*vec1, *vec2);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "makeRotate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "makeRotate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofQuaternion::makeRotate_original(const ofVec3f &vec1, const ofVec3f &vec2)
 * api/openFrameworks/math/ofQuaternion.h:126
 */
static int ofQuaternion_makeRotate_original(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    ofVec3f *vec1 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
    ofVec3f *vec2 = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
    self->makeRotate_original(*vec1, *vec2);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "makeRotate_original: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "makeRotate_original: Unknown exception");
  }
  return dub_error(L);
}

/** void ofQuaternion::getRotate(float &angle, float &x, float &y, float &z) const
 * api/openFrameworks/math/ofQuaternion.h:129
 */
static int ofQuaternion_getRotate(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float angle = dub_checknumber(L, 2);
      float x = dub_checknumber(L, 3);
      float y = dub_checknumber(L, 4);
      float z = dub_checknumber(L, 5);
      self->getRotate(angle, x, y, z);
      return 0;
    } else {
      float angle = dub_checknumber(L, 2);
      ofVec3f *vec = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      self->getRotate(angle, *vec);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRotate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRotate: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofQuaternion::getEuler() const
 * api/openFrameworks/math/ofQuaternion.h:133
 */
static int ofQuaternion_getEuler(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    dub_pushudata(L, new ofVec3f(self->getEuler()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getEuler: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getEuler: Unknown exception");
  }
  return dub_error(L);
}

/** void ofQuaternion::slerp(float t, const ofQuaternion &from, const ofQuaternion &to)
 * api/openFrameworks/math/ofQuaternion.h:138
 */
static int ofQuaternion_slerp(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    float t = dub_checknumber(L, 2);
    ofQuaternion *from = *((ofQuaternion **)dub_checksdata(L, 3, "ofQuaternion"));
    ofQuaternion *to = *((ofQuaternion **)dub_checksdata(L, 4, "ofQuaternion"));
    self->slerp(t, *from, *to);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "slerp: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "slerp: Unknown exception");
  }
  return dub_error(L);
}

/** void ofQuaternion::normalize()
 * api/openFrameworks/math/ofQuaternion.h:140
 */
static int ofQuaternion_normalize(lua_State *L) {
  try {
    ofQuaternion *self = *((ofQuaternion **)dub_checksdata(L, 1, "ofQuaternion"));
    self->normalize();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "normalize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "normalize: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofQuaternion___tostring(lua_State *L) {
  ofQuaternion *self = *((ofQuaternion **)dub_checksdata_n(L, 1, "ofQuaternion"));
  lua_pushfstring(L, "ofQuaternion: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofQuaternion_member_methods[] = {
  { "__gc"         , ofQuaternion__ofQuaternion },
  { "__newindex"   , ofQuaternion__set_   },
  { "new"          , ofQuaternion_ofQuaternion },
  { "set"          , ofQuaternion_operator_sete },
  { "__eq"         , ofQuaternion_operator_eq },
  { "asVec4"       , ofQuaternion_asVec4  },
  { "asVec3"       , ofQuaternion_asVec3  },
  { "set"          , ofQuaternion_set     },
  { "get"          , ofQuaternion_get     },
  { "__index"      , ofQuaternion__get_   },
  { "x"            , ofQuaternion_x       },
  { "y"            , ofQuaternion_y       },
  { "z"            , ofQuaternion_z       },
  { "w"            , ofQuaternion_w       },
  { "zeroRotation" , ofQuaternion_zeroRotation },
  { "__mul"        , ofQuaternion_operator_mul },
  { "mul"          , ofQuaternion_operator_mule },
  { "__div"        , ofQuaternion_operator_div },
  { "div"          , ofQuaternion_operator_dive },
  { "__add"        , ofQuaternion_operator_add },
  { "add"          , ofQuaternion_operator_adde },
  { "__sub"        , ofQuaternion_operator_sub },
  { "sub"          , ofQuaternion_operator_sube },
  { "__unm"        , ofQuaternion_operator_unm },
  { "length"       , ofQuaternion_length  },
  { "length2"      , ofQuaternion_length2 },
  { "conj"         , ofQuaternion_conj    },
  { "inverse"      , ofQuaternion_inverse },
  { "makeRotate"   , ofQuaternion_makeRotate },
  { "makeRotate_original", ofQuaternion_makeRotate_original },
  { "getRotate"    , ofQuaternion_getRotate },
  { "getEuler"     , ofQuaternion_getEuler },
  { "slerp"        , ofQuaternion_slerp   },
  { "normalize"    , ofQuaternion_normalize },
  { "__tostring"   , ofQuaternion___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofQuaternion(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofQuaternion");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofQuaternion_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofQuaternion", "ofQuaternion");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
