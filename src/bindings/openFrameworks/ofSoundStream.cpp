/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofSoundStream
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "sound/ofSoundStream.h"


/** ~ofSoundStream()
 * 
 */
static int ofSoundStream__ofSoundStream(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofSoundStream"));
    if (userdata->gc) {
      ofSoundStream *self = (ofSoundStream *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** ofSoundStream::ofSoundStream()
 * api/openFrameworks/sound/ofSoundStream.h:33
 */
static int ofSoundStream_ofSoundStream(lua_State *L) {
  try {
    ofSoundStream *retval__ = new ofSoundStream();
    dub_pushudata(L, retval__, "ofSoundStream", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundStream::setSoundStream(ofPtr< ofBaseSoundStream > soundStreamPtr)
 * api/openFrameworks/sound/ofSoundStream.h:35
 */
static int ofSoundStream_setSoundStream(lua_State *L) {
  try {
    ofSoundStream *self = *((ofSoundStream **)dub_checksdata(L, 1, "ofSoundStream"));
    ofPtr < ofBaseSoundStream > *soundStreamPtr = *((ofPtr < ofBaseSoundStream > **)dub_checksdata(L, 2, "ofPtr < ofBaseSoundStream >"));
    self->setSoundStream(*soundStreamPtr);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSoundStream: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSoundStream: Unknown exception");
  }
  return dub_error(L);
}

/** ofPtr<ofBaseSoundStream> ofSoundStream::getSoundStream()
 * api/openFrameworks/sound/ofSoundStream.h:36
 */
static int ofSoundStream_getSoundStream(lua_State *L) {
  try {
    ofSoundStream *self = *((ofSoundStream **)dub_checksdata(L, 1, "ofSoundStream"));
    dub_pushudata(L, new ofPtr < ofBaseSoundStream >(self->getSoundStream()), "ofPtr < ofBaseSoundStream >", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSoundStream: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSoundStream: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundStream::listDevices()
 * api/openFrameworks/sound/ofSoundStream.h:38
 */
static int ofSoundStream_listDevices(lua_State *L) {
  try {
    ofSoundStream *self = *((ofSoundStream **)dub_checksdata(L, 1, "ofSoundStream"));
    self->listDevices();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "listDevices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "listDevices: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundStream::setDeviceID(int deviceID)
 * api/openFrameworks/sound/ofSoundStream.h:40
 */
static int ofSoundStream_setDeviceID(lua_State *L) {
  try {
    ofSoundStream *self = *((ofSoundStream **)dub_checksdata(L, 1, "ofSoundStream"));
    int deviceID = dub_checkint(L, 2);
    self->setDeviceID(deviceID);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDeviceID: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDeviceID: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofSoundStream::setup(ofBaseApp *app, int outChannels, int inChannels, int sampleRate, int bufferSize, int nBuffers)
 * api/openFrameworks/sound/ofSoundStream.h:42
 */
static int ofSoundStream_setup(lua_State *L) {
  try {
    ofSoundStream *self = *((ofSoundStream **)dub_checksdata(L, 1, "ofSoundStream"));
    int top__ = lua_gettop(L);
    if (top__ >= 7) {
      ofBaseApp *app = *((ofBaseApp **)dub_checksdata(L, 2, "ofBaseApp"));
      int outChannels = dub_checkint(L, 3);
      int inChannels = dub_checkint(L, 4);
      int sampleRate = dub_checkint(L, 5);
      int bufferSize = dub_checkint(L, 6);
      int nBuffers = dub_checkint(L, 7);
      lua_pushboolean(L, self->setup(app, outChannels, inChannels, sampleRate, bufferSize, nBuffers));
      return 1;
    } else {
      int outChannels = dub_checkint(L, 2);
      int inChannels = dub_checkint(L, 3);
      int sampleRate = dub_checkint(L, 4);
      int bufferSize = dub_checkint(L, 5);
      int nBuffers = dub_checkint(L, 6);
      lua_pushboolean(L, self->setup(outChannels, inChannels, sampleRate, bufferSize, nBuffers));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setup: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setup: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundStream::setInput(ofBaseSoundInput *soundInput)
 * api/openFrameworks/sound/ofSoundStream.h:43
 */
static int ofSoundStream_setInput(lua_State *L) {
  try {
    ofSoundStream *self = *((ofSoundStream **)dub_checksdata(L, 1, "ofSoundStream"));
    ofBaseSoundInput *soundInput = *((ofBaseSoundInput **)dub_checksdata(L, 2, "ofBaseSoundInput"));
    self->setInput(soundInput);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setInput: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setInput: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundStream::setOutput(ofBaseSoundOutput *soundOutput)
 * api/openFrameworks/sound/ofSoundStream.h:44
 */
static int ofSoundStream_setOutput(lua_State *L) {
  try {
    ofSoundStream *self = *((ofSoundStream **)dub_checksdata(L, 1, "ofSoundStream"));
    ofBaseSoundOutput *soundOutput = *((ofBaseSoundOutput **)dub_checksdata(L, 2, "ofBaseSoundOutput"));
    self->setOutput(soundOutput);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setOutput: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setOutput: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundStream::start()
 * api/openFrameworks/sound/ofSoundStream.h:47
 */
static int ofSoundStream_start(lua_State *L) {
  try {
    ofSoundStream *self = *((ofSoundStream **)dub_checksdata(L, 1, "ofSoundStream"));
    self->start();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "start: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "start: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundStream::stop()
 * api/openFrameworks/sound/ofSoundStream.h:48
 */
static int ofSoundStream_stop(lua_State *L) {
  try {
    ofSoundStream *self = *((ofSoundStream **)dub_checksdata(L, 1, "ofSoundStream"));
    self->stop();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "stop: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "stop: Unknown exception");
  }
  return dub_error(L);
}

/** void ofSoundStream::close()
 * api/openFrameworks/sound/ofSoundStream.h:49
 */
static int ofSoundStream_close(lua_State *L) {
  try {
    ofSoundStream *self = *((ofSoundStream **)dub_checksdata(L, 1, "ofSoundStream"));
    self->close();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "close: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "close: Unknown exception");
  }
  return dub_error(L);
}

/** long unsigned long ofSoundStream::getTickCount()
 * api/openFrameworks/sound/ofSoundStream.h:51
 */
static int ofSoundStream_getTickCount(lua_State *L) {
  try {
    ofSoundStream *self = *((ofSoundStream **)dub_checksdata(L, 1, "ofSoundStream"));
    lua_pushnumber(L, self->getTickCount());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getTickCount: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getTickCount: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofSoundStream___tostring(lua_State *L) {
  ofSoundStream *self = *((ofSoundStream **)dub_checksdata_n(L, 1, "ofSoundStream"));
  lua_pushfstring(L, "ofSoundStream: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofSoundStream_member_methods[] = {
  { "__gc"         , ofSoundStream__ofSoundStream },
  { "new"          , ofSoundStream_ofSoundStream },
  { "setSoundStream", ofSoundStream_setSoundStream },
  { "getSoundStream", ofSoundStream_getSoundStream },
  { "listDevices"  , ofSoundStream_listDevices },
  { "setDeviceID"  , ofSoundStream_setDeviceID },
  { "setup"        , ofSoundStream_setup  },
  { "setInput"     , ofSoundStream_setInput },
  { "setOutput"    , ofSoundStream_setOutput },
  { "start"        , ofSoundStream_start  },
  { "stop"         , ofSoundStream_stop   },
  { "close"        , ofSoundStream_close  },
  { "getTickCount" , ofSoundStream_getTickCount },
  { "__tostring"   , ofSoundStream___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofSoundStream(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofSoundStream");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofSoundStream_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofSoundStream", "ofSoundStream");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
