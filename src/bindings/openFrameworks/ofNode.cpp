/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofNode
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "3d/ofNode.h"


/** ofNode::ofNode()
 * api/openFrameworks/3d/ofNode.h:20
 */
static int ofNode_ofNode(lua_State *L) {
  try {
    ofNode *retval__ = new ofNode();
    dub_pushudata(L, retval__, "ofNode", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofNode::~ofNode()
 * api/openFrameworks/3d/ofNode.h:21
 */
static int ofNode__ofNode(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofNode"));
    if (userdata->gc) {
      ofNode *self = (ofNode *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setParent(ofNode &parent)
 * api/openFrameworks/3d/ofNode.h:26
 */
static int ofNode_setParent(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    ofNode *parent = *((ofNode **)dub_checksdata(L, 2, "ofNode"));
    self->setParent(*parent);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setParent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setParent: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::clearParent()
 * api/openFrameworks/3d/ofNode.h:27
 */
static int ofNode_clearParent(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    self->clearParent();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearParent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearParent: Unknown exception");
  }
  return dub_error(L);
}

/** ofNode* ofNode::getParent() const
 * api/openFrameworks/3d/ofNode.h:28
 */
static int ofNode_getParent(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    ofNode *retval__ = self->getParent();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "ofNode", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getParent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getParent: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getPosition() const
 * api/openFrameworks/3d/ofNode.h:34
 */
static int ofNode_getPosition(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    dub_pushudata(L, new ofVec3f(self->getPosition()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPosition: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getX() const
 * api/openFrameworks/3d/ofNode.h:35
 */
static int ofNode_getX(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    lua_pushnumber(L, self->getX());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getX: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getX: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getY() const
 * api/openFrameworks/3d/ofNode.h:36
 */
static int ofNode_getY(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    lua_pushnumber(L, self->getY());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getY: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getY: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getZ() const
 * api/openFrameworks/3d/ofNode.h:37
 */
static int ofNode_getZ(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    lua_pushnumber(L, self->getZ());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getZ: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getZ: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getXAxis() const
 * api/openFrameworks/3d/ofNode.h:39
 */
static int ofNode_getXAxis(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    dub_pushudata(L, new ofVec3f(self->getXAxis()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getXAxis: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getXAxis: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getYAxis() const
 * api/openFrameworks/3d/ofNode.h:40
 */
static int ofNode_getYAxis(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    dub_pushudata(L, new ofVec3f(self->getYAxis()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getYAxis: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getYAxis: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getZAxis() const
 * api/openFrameworks/3d/ofNode.h:41
 */
static int ofNode_getZAxis(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    dub_pushudata(L, new ofVec3f(self->getZAxis()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getZAxis: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getZAxis: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getSideDir() const
 * api/openFrameworks/3d/ofNode.h:43
 */
static int ofNode_getSideDir(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    dub_pushudata(L, new ofVec3f(self->getSideDir()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSideDir: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSideDir: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getLookAtDir() const
 * api/openFrameworks/3d/ofNode.h:44
 */
static int ofNode_getLookAtDir(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    dub_pushudata(L, new ofVec3f(self->getLookAtDir()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLookAtDir: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLookAtDir: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getUpDir() const
 * api/openFrameworks/3d/ofNode.h:45
 */
static int ofNode_getUpDir(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    dub_pushudata(L, new ofVec3f(self->getUpDir()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUpDir: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUpDir: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getPitch() const
 * api/openFrameworks/3d/ofNode.h:47
 */
static int ofNode_getPitch(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    lua_pushnumber(L, self->getPitch());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPitch: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPitch: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getHeading() const
 * api/openFrameworks/3d/ofNode.h:48
 */
static int ofNode_getHeading(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    lua_pushnumber(L, self->getHeading());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getHeading: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getHeading: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getRoll() const
 * api/openFrameworks/3d/ofNode.h:49
 */
static int ofNode_getRoll(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    lua_pushnumber(L, self->getRoll());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRoll: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRoll: Unknown exception");
  }
  return dub_error(L);
}

/** ofQuaternion ofNode::getOrientationQuat() const
 * api/openFrameworks/3d/ofNode.h:51
 */
static int ofNode_getOrientationQuat(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    dub_pushudata(L, new ofQuaternion(self->getOrientationQuat()), "ofQuaternion", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getOrientationQuat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getOrientationQuat: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getOrientationEuler() const
 * api/openFrameworks/3d/ofNode.h:52
 */
static int ofNode_getOrientationEuler(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    dub_pushudata(L, new ofVec3f(self->getOrientationEuler()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getOrientationEuler: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getOrientationEuler: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getScale() const
 * api/openFrameworks/3d/ofNode.h:53
 */
static int ofNode_getScale(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    dub_pushudata(L, new ofVec3f(self->getScale()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getScale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getScale: Unknown exception");
  }
  return dub_error(L);
}

/** const ofMatrix4x4& ofNode::getLocalTransformMatrix() const
 * api/openFrameworks/3d/ofNode.h:55
 */
static int ofNode_getLocalTransformMatrix(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    dub_pushudata(L, const_cast<ofMatrix4x4*>(&self->getLocalTransformMatrix()), "ofMatrix4x4", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLocalTransformMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLocalTransformMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** ofMatrix4x4 ofNode::getGlobalTransformMatrix() const
 * api/openFrameworks/3d/ofNode.h:60
 */
static int ofNode_getGlobalTransformMatrix(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    dub_pushudata(L, new ofMatrix4x4(self->getGlobalTransformMatrix()), "ofMatrix4x4", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGlobalTransformMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGlobalTransformMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getGlobalPosition() const
 * api/openFrameworks/3d/ofNode.h:61
 */
static int ofNode_getGlobalPosition(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    dub_pushudata(L, new ofVec3f(self->getGlobalPosition()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGlobalPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGlobalPosition: Unknown exception");
  }
  return dub_error(L);
}

/** ofQuaternion ofNode::getGlobalOrientation() const
 * api/openFrameworks/3d/ofNode.h:62
 */
static int ofNode_getGlobalOrientation(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    dub_pushudata(L, new ofQuaternion(self->getGlobalOrientation()), "ofQuaternion", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGlobalOrientation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGlobalOrientation: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getGlobalScale() const
 * api/openFrameworks/3d/ofNode.h:63
 */
static int ofNode_getGlobalScale(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    dub_pushudata(L, new ofVec3f(self->getGlobalScale()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGlobalScale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGlobalScale: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setTransformMatrix(const ofMatrix4x4 &m44)
 * api/openFrameworks/3d/ofNode.h:70
 */
static int ofNode_setTransformMatrix(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    ofMatrix4x4 *m44 = *((ofMatrix4x4 **)dub_checksdata(L, 2, "ofMatrix4x4"));
    self->setTransformMatrix(*m44);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setTransformMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setTransformMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setPosition(float px, float py, float pz)
 * api/openFrameworks/3d/ofNode.h:73
 */
static int ofNode_setPosition(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float px = dub_checknumber(L, 2);
      float py = dub_checknumber(L, 3);
      float pz = dub_checknumber(L, 4);
      self->setPosition(px, py, pz);
      return 0;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->setPosition(*p);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setPosition: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setGlobalPosition(float px, float py, float pz)
 * api/openFrameworks/3d/ofNode.h:76
 */
static int ofNode_setGlobalPosition(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float px = dub_checknumber(L, 2);
      float py = dub_checknumber(L, 3);
      float pz = dub_checknumber(L, 4);
      self->setGlobalPosition(px, py, pz);
      return 0;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->setGlobalPosition(*p);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setGlobalPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setGlobalPosition: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setOrientation(const ofQuaternion &q)
 * api/openFrameworks/3d/ofNode.h:81
 */
static int ofNode_setOrientation(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofQuaternion", type__)) ) {
      ofQuaternion *q = *((ofQuaternion **)ptr2__);
      self->setOrientation(*q);
      return 0;
    } else {
      ofVec3f *eulerAngles = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->setOrientation(*eulerAngles);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setOrientation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setOrientation: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setGlobalOrientation(const ofQuaternion &q)
 * api/openFrameworks/3d/ofNode.h:85
 */
static int ofNode_setGlobalOrientation(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    ofQuaternion *q = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
    self->setGlobalOrientation(*q);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setGlobalOrientation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setGlobalOrientation: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setScale(float s)
 * api/openFrameworks/3d/ofNode.h:89
 */
static int ofNode_setScale(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float sx = dub_checknumber(L, 2);
      float sy = dub_checknumber(L, 3);
      float sz = dub_checknumber(L, 4);
      self->setScale(sx, sy, sz);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float s = dub_checknumber(L, 2);
        self->setScale(s);
        return 0;
      } else {
        ofVec3f *s = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
        self->setScale(*s);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setScale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setScale: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::move(float x, float y, float z)
 * api/openFrameworks/3d/ofNode.h:95
 */
static int ofNode_move(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      self->move(x, y, z);
      return 0;
    } else {
      ofVec3f *offset = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->move(*offset);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "move: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "move: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::truck(float amount)
 * api/openFrameworks/3d/ofNode.h:97
 */
static int ofNode_truck(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    float amount = dub_checknumber(L, 2);
    self->truck(amount);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "truck: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "truck: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::boom(float amount)
 * api/openFrameworks/3d/ofNode.h:98
 */
static int ofNode_boom(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    float amount = dub_checknumber(L, 2);
    self->boom(amount);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "boom: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "boom: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::dolly(float amount)
 * api/openFrameworks/3d/ofNode.h:99
 */
static int ofNode_dolly(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    float amount = dub_checknumber(L, 2);
    self->dolly(amount);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "dolly: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "dolly: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::tilt(float degrees)
 * api/openFrameworks/3d/ofNode.h:103
 */
static int ofNode_tilt(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    float degrees = dub_checknumber(L, 2);
    self->tilt(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "tilt: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "tilt: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::pan(float degrees)
 * api/openFrameworks/3d/ofNode.h:104
 */
static int ofNode_pan(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    float degrees = dub_checknumber(L, 2);
    self->pan(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "pan: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "pan: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::roll(float degrees)
 * api/openFrameworks/3d/ofNode.h:105
 */
static int ofNode_roll(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    float degrees = dub_checknumber(L, 2);
    self->roll(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "roll: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "roll: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::rotate(const ofQuaternion &q)
 * api/openFrameworks/3d/ofNode.h:106
 */
static int ofNode_rotate(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float degrees = dub_checknumber(L, 2);
      float vx = dub_checknumber(L, 3);
      float vy = dub_checknumber(L, 4);
      float vz = dub_checknumber(L, 5);
      self->rotate(degrees, vx, vy, vz);
      return 0;
    } else if (top__ >= 3) {
      float degrees = dub_checknumber(L, 2);
      ofVec3f *v = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      self->rotate(degrees, *v);
      return 0;
    } else {
      ofQuaternion *q = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
      self->rotate(*q);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::rotateAround(const ofQuaternion &q, const ofVec3f &point)
 * api/openFrameworks/3d/ofNode.h:110
 */
static int ofNode_rotateAround(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float degrees = dub_checknumber(L, 2);
      ofVec3f *axis = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      ofVec3f *point = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
      self->rotateAround(degrees, *axis, *point);
      return 0;
    } else {
      ofQuaternion *q = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
      ofVec3f *point = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      self->rotateAround(*q, *point);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotateAround: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotateAround: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::lookAt(const ofVec3f &lookAtPosition, ofVec3f upVector=ofVec3f(0, 1, 0))
 * api/openFrameworks/3d/ofNode.h:114
 */
static int ofNode_lookAt(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
        ofVec3f *lookAtPosition = *((ofVec3f **)ptr2__);
        ofVec3f *upVector = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
        self->lookAt(*lookAtPosition, *upVector);
        return 0;
      } else {
        ofNode *lookAtNode = *((ofNode **)dub_checksdata(L, 2, "ofNode"));
        ofVec3f *upVector = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
        self->lookAt(*lookAtNode, *upVector);
        return 0;
      }
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
        ofVec3f *lookAtPosition = *((ofVec3f **)ptr2__);
        self->lookAt(*lookAtPosition);
        return 0;
      } else {
        ofNode *lookAtNode = *((ofNode **)dub_checksdata(L, 2, "ofNode"));
        self->lookAt(*lookAtNode);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "lookAt: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "lookAt: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::orbit(float longitude, float latitude, float radius, const ofVec3f &centerPoint=ofVec3f(0, 0, 0))
 * api/openFrameworks/3d/ofNode.h:119
 */
static int ofNode_orbit(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      int type__ = lua_type(L, 5);
      void **ptr5__;
      if ( (ptr5__ = dub_issdata(L, 5, "ofVec3f", type__)) ) {
        float longitude = dub_checknumber(L, 2);
        float latitude = dub_checknumber(L, 3);
        float radius = dub_checknumber(L, 4);
        ofVec3f *centerPoint = *((ofVec3f **)ptr5__);
        self->orbit(longitude, latitude, radius, *centerPoint);
        return 0;
      } else {
        float longitude = dub_checknumber(L, 2);
        float latitude = dub_checknumber(L, 3);
        float radius = dub_checknumber(L, 4);
        ofNode *centerNode = *((ofNode **)dub_checksdata(L, 5, "ofNode"));
        self->orbit(longitude, latitude, radius, *centerNode);
        return 0;
      }
    } else {
      float longitude = dub_checknumber(L, 2);
      float latitude = dub_checknumber(L, 3);
      float radius = dub_checknumber(L, 4);
      self->orbit(longitude, latitude, radius);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "orbit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "orbit: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::transformGL() const
 * api/openFrameworks/3d/ofNode.h:127
 */
static int ofNode_transformGL(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    self->transformGL();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "transformGL: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "transformGL: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::restoreTransformGL() const
 * api/openFrameworks/3d/ofNode.h:128
 */
static int ofNode_restoreTransformGL(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    self->restoreTransformGL();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "restoreTransformGL: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "restoreTransformGL: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::resetTransform()
 * api/openFrameworks/3d/ofNode.h:132
 */
static int ofNode_resetTransform(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    self->resetTransform();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "resetTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "resetTransform: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofNode::customDraw()
 * api/openFrameworks/3d/ofNode.h:136
 */
static int ofNode_customDraw(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    self->customDraw();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "customDraw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "customDraw: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::draw()
 * api/openFrameworks/3d/ofNode.h:145
 */
static int ofNode_draw(lua_State *L) {
  try {
    ofNode *self = *((ofNode **)dub_checksdata(L, 1, "ofNode"));
    self->draw();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "draw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "draw: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofNode___tostring(lua_State *L) {
  ofNode *self = *((ofNode **)dub_checksdata_n(L, 1, "ofNode"));
  lua_pushfstring(L, "ofNode: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofNode_member_methods[] = {
  { "new"          , ofNode_ofNode        },
  { "__gc"         , ofNode__ofNode       },
  { "setParent"    , ofNode_setParent     },
  { "clearParent"  , ofNode_clearParent   },
  { "getParent"    , ofNode_getParent     },
  { "getPosition"  , ofNode_getPosition   },
  { "getX"         , ofNode_getX          },
  { "getY"         , ofNode_getY          },
  { "getZ"         , ofNode_getZ          },
  { "getXAxis"     , ofNode_getXAxis      },
  { "getYAxis"     , ofNode_getYAxis      },
  { "getZAxis"     , ofNode_getZAxis      },
  { "getSideDir"   , ofNode_getSideDir    },
  { "getLookAtDir" , ofNode_getLookAtDir  },
  { "getUpDir"     , ofNode_getUpDir      },
  { "getPitch"     , ofNode_getPitch      },
  { "getHeading"   , ofNode_getHeading    },
  { "getRoll"      , ofNode_getRoll       },
  { "getOrientationQuat", ofNode_getOrientationQuat },
  { "getOrientationEuler", ofNode_getOrientationEuler },
  { "getScale"     , ofNode_getScale      },
  { "getLocalTransformMatrix", ofNode_getLocalTransformMatrix },
  { "getGlobalTransformMatrix", ofNode_getGlobalTransformMatrix },
  { "getGlobalPosition", ofNode_getGlobalPosition },
  { "getGlobalOrientation", ofNode_getGlobalOrientation },
  { "getGlobalScale", ofNode_getGlobalScale },
  { "setTransformMatrix", ofNode_setTransformMatrix },
  { "setPosition"  , ofNode_setPosition   },
  { "setGlobalPosition", ofNode_setGlobalPosition },
  { "setOrientation", ofNode_setOrientation },
  { "setGlobalOrientation", ofNode_setGlobalOrientation },
  { "setScale"     , ofNode_setScale      },
  { "move"         , ofNode_move          },
  { "truck"        , ofNode_truck         },
  { "boom"         , ofNode_boom          },
  { "dolly"        , ofNode_dolly         },
  { "tilt"         , ofNode_tilt          },
  { "pan"          , ofNode_pan           },
  { "roll"         , ofNode_roll          },
  { "rotate"       , ofNode_rotate        },
  { "rotateAround" , ofNode_rotateAround  },
  { "lookAt"       , ofNode_lookAt        },
  { "orbit"        , ofNode_orbit         },
  { "transformGL"  , ofNode_transformGL   },
  { "restoreTransformGL", ofNode_restoreTransformGL },
  { "resetTransform", ofNode_resetTransform },
  { "customDraw"   , ofNode_customDraw    },
  { "draw"         , ofNode_draw          },
  { "__tostring"   , ofNode___tostring    },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofNode(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofNode");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofNode_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofNode", "ofNode");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
