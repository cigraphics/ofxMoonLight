/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofBaseSoundInput
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/types/ofBaseTypes.h"


/** ofBaseSoundInput()
 * 
 */
static int ofBaseSoundInput_ofBaseSoundInput(lua_State *L) {
  try {
    ofBaseSoundInput *retval__ = new ofBaseSoundInput();
    dub_pushudata(L, retval__, "ofBaseSoundInput", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofBaseSoundInput::~ofBaseSoundInput()
 * api/openFrameworks/types/ofBaseTypes.h:133
 */
static int ofBaseSoundInput__ofBaseSoundInput(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofBaseSoundInput"));
    if (userdata->gc) {
      ofBaseSoundInput *self = (ofBaseSoundInput *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseSoundInput::audioIn(float *input, int bufferSize, int nChannels, int deviceID, long unsigned long tickCount)
 * api/openFrameworks/types/ofBaseTypes.h:135
 */
static int ofBaseSoundInput_audioIn(lua_State *L) {
  try {
    ofBaseSoundInput *self = *((ofBaseSoundInput **)dub_checksdata(L, 1, "ofBaseSoundInput"));
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      float *input = *((float **)dub_checksdata(L, 2, "float"));
      int bufferSize = dub_checkint(L, 3);
      int nChannels = dub_checkint(L, 4);
      int deviceID = dub_checkint(L, 5);
      long unsigned long *tickCount = *((long unsigned long **)dub_checksdata(L, 6, "long unsigned long"));
      self->audioIn(input, bufferSize, nChannels, deviceID, *tickCount);
      return 0;
    } else {
      float *input = *((float **)dub_checksdata(L, 2, "float"));
      int bufferSize = dub_checkint(L, 3);
      int nChannels = dub_checkint(L, 4);
      self->audioIn(input, bufferSize, nChannels);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "audioIn: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "audioIn: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseSoundInput::audioReceived(float *input, int bufferSize, int nChannels)
 * api/openFrameworks/types/ofBaseTypes.h:143
 */
static int ofBaseSoundInput_audioReceived(lua_State *L) {
  try {
    ofBaseSoundInput *self = *((ofBaseSoundInput **)dub_checksdata(L, 1, "ofBaseSoundInput"));
    float *input = *((float **)dub_checksdata(L, 2, "float"));
    int bufferSize = dub_checkint(L, 3);
    int nChannels = dub_checkint(L, 4);
    self->audioReceived(input, bufferSize, nChannels);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "audioReceived: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "audioReceived: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofBaseSoundInput___tostring(lua_State *L) {
  ofBaseSoundInput *self = *((ofBaseSoundInput **)dub_checksdata_n(L, 1, "ofBaseSoundInput"));
  lua_pushfstring(L, "ofBaseSoundInput: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofBaseSoundInput_member_methods[] = {
  { "new"          , ofBaseSoundInput_ofBaseSoundInput },
  { "__gc"         , ofBaseSoundInput__ofBaseSoundInput },
  { "audioIn"      , ofBaseSoundInput_audioIn },
  { "audioReceived", ofBaseSoundInput_audioReceived },
  { "__tostring"   , ofBaseSoundInput___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofBaseSoundInput(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofBaseSoundInput");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofBaseSoundInput_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofBaseSoundInput", "ofBaseSoundInput");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
