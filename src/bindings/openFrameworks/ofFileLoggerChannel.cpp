/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofFileLoggerChannel
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "utils/ofLog.h"


/** Cast (class_name)
 * 
 */
static int ofFileLoggerChannel__cast_(lua_State *L) {

  ofFileLoggerChannel *self = *((ofFileLoggerChannel **)dub_checksdata_n(L, 1, "ofFileLoggerChannel"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "ofBaseLoggerChannel")) break;
      *retval__ = static_cast<ofBaseLoggerChannel *>(self);
      return 1;
    }
  }
  return 0;
}

/** ofFileLoggerChannel::ofFileLoggerChannel()
 * api/openFrameworks/utils/ofLog.h:163
 */
static int ofFileLoggerChannel_ofFileLoggerChannel(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      size_t path_sz_;
      const char *path = dub_checklstring(L, 1, &path_sz_);
      bool append = dub_checkboolean(L, 2);
      ofFileLoggerChannel *retval__ = new ofFileLoggerChannel(std::string(path, path_sz_), append);
      dub_pushudata(L, retval__, "ofFileLoggerChannel", true);
      return 1;
    } else {
      ofFileLoggerChannel *retval__ = new ofFileLoggerChannel();
      dub_pushudata(L, retval__, "ofFileLoggerChannel", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofFileLoggerChannel::~ofFileLoggerChannel()
 * api/openFrameworks/utils/ofLog.h:165
 */
static int ofFileLoggerChannel__ofFileLoggerChannel(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofFileLoggerChannel"));
    if (userdata->gc) {
      ofFileLoggerChannel *self = (ofFileLoggerChannel *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** void ofFileLoggerChannel::setFile(const string &path, bool append=false)
 * api/openFrameworks/utils/ofLog.h:167
 */
static int ofFileLoggerChannel_setFile(lua_State *L) {
  try {
    ofFileLoggerChannel *self = *((ofFileLoggerChannel **)dub_checksdata(L, 1, "ofFileLoggerChannel"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      size_t path_sz_;
      const char *path = dub_checklstring(L, 2, &path_sz_);
      bool append = dub_checkboolean(L, 3);
      self->setFile(std::string(path, path_sz_), append);
      return 0;
    } else {
      size_t path_sz_;
      const char *path = dub_checklstring(L, 2, &path_sz_);
      self->setFile(std::string(path, path_sz_));
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFile: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFile: Unknown exception");
  }
  return dub_error(L);
}

/** void ofFileLoggerChannel::log(ofLogLevel level, const string &module, const string &message)
 * api/openFrameworks/utils/ofLog.h:169
 */
static int ofFileLoggerChannel_log(lua_State *L) {
  try {
    ofFileLoggerChannel *self = *((ofFileLoggerChannel **)dub_checksdata(L, 1, "ofFileLoggerChannel"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      ofLogLevel logLevel = (ofLogLevel)dub_checkint(L, 2);
      size_t module_sz_;
      const char *module = dub_checklstring(L, 3, &module_sz_);
      const char *format = dub_checkstring(L, 4);
      va_list *args = *((va_list **)dub_checksdata(L, 5, "va"));
      self->log(logLevel, std::string(module, module_sz_), format, *args);
      return 0;
    } else {
      ofLogLevel level = (ofLogLevel)dub_checkint(L, 2);
      size_t module_sz_;
      const char *module = dub_checklstring(L, 3, &module_sz_);
      size_t message_sz_;
      const char *message = dub_checklstring(L, 4, &message_sz_);
      self->log(level, std::string(module, module_sz_), std::string(message, message_sz_));
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "log: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "log: Unknown exception");
  }
  return dub_error(L);
}

/** void ofFileLoggerChannel::close()
 * api/openFrameworks/utils/ofLog.h:173
 */
static int ofFileLoggerChannel_close(lua_State *L) {
  try {
    ofFileLoggerChannel *self = *((ofFileLoggerChannel **)dub_checksdata(L, 1, "ofFileLoggerChannel"));
    self->close();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "close: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "close: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofFileLoggerChannel___tostring(lua_State *L) {
  ofFileLoggerChannel *self = *((ofFileLoggerChannel **)dub_checksdata_n(L, 1, "ofFileLoggerChannel"));
  lua_pushfstring(L, "ofFileLoggerChannel: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofFileLoggerChannel_member_methods[] = {
  { "_cast_"       , ofFileLoggerChannel__cast_ },
  { "new"          , ofFileLoggerChannel_ofFileLoggerChannel },
  { "__gc"         , ofFileLoggerChannel__ofFileLoggerChannel },
  { "setFile"      , ofFileLoggerChannel_setFile },
  { "log"          , ofFileLoggerChannel_log },
  { "close"        , ofFileLoggerChannel_close },
  { "__tostring"   , ofFileLoggerChannel___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofFileLoggerChannel(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofFileLoggerChannel");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofFileLoggerChannel_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofFileLoggerChannel", "ofFileLoggerChannel");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
