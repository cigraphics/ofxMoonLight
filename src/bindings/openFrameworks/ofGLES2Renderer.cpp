/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofGLES2Renderer
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "gl/ofGLES2Renderer.h"


/** Cast (class_name)
 * 
 */
static int ofGLES2Renderer__cast_(lua_State *L) {

  ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata_n(L, 1, "ofGLES2Renderer"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "ofBaseGLRenderer")) break;
      *retval__ = static_cast<ofBaseGLRenderer *>(self);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "ofBaseRenderer")) break;
      *retval__ = static_cast<ofBaseRenderer *>(self);
      return 1;
    }
  }
  return 0;
}

/** ofGLES2Renderer::ofGLES2Renderer(string vertexShader="", string fragmentShader="", bool useShapeColor=true)
 * api/openFrameworks/gl/ofGLES2Renderer.h:14
 */
static int ofGLES2Renderer_ofGLES2Renderer(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      size_t vertexShader_sz_;
      const char *vertexShader = dub_checklstring(L, 1, &vertexShader_sz_);
      size_t fragmentShader_sz_;
      const char *fragmentShader = dub_checklstring(L, 2, &fragmentShader_sz_);
      bool useShapeColor = dub_checkboolean(L, 3);
      ofGLES2Renderer *retval__ = new ofGLES2Renderer(std::string(vertexShader, vertexShader_sz_), std::string(fragmentShader, fragmentShader_sz_), useShapeColor);
      dub_pushudata(L, retval__, "ofGLES2Renderer", true);
      return 1;
    } else if (top__ >= 2) {
      size_t vertexShader_sz_;
      const char *vertexShader = dub_checklstring(L, 1, &vertexShader_sz_);
      size_t fragmentShader_sz_;
      const char *fragmentShader = dub_checklstring(L, 2, &fragmentShader_sz_);
      ofGLES2Renderer *retval__ = new ofGLES2Renderer(std::string(vertexShader, vertexShader_sz_), std::string(fragmentShader, fragmentShader_sz_));
      dub_pushudata(L, retval__, "ofGLES2Renderer", true);
      return 1;
    } else if (top__ >= 1) {
      size_t vertexShader_sz_;
      const char *vertexShader = dub_checklstring(L, 1, &vertexShader_sz_);
      ofGLES2Renderer *retval__ = new ofGLES2Renderer(std::string(vertexShader, vertexShader_sz_));
      dub_pushudata(L, retval__, "ofGLES2Renderer", true);
      return 1;
    } else {
      ofGLES2Renderer *retval__ = new ofGLES2Renderer();
      dub_pushudata(L, retval__, "ofGLES2Renderer", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** ofGLES2Renderer::~ofGLES2Renderer()
 * api/openFrameworks/gl/ofGLES2Renderer.h:15
 */
static int ofGLES2Renderer__ofGLES2Renderer(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofGLES2Renderer"));
    if (userdata->gc) {
      ofGLES2Renderer *self = (ofGLES2Renderer *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** string ofGLES2Renderer::getType()
 * api/openFrameworks/gl/ofGLES2Renderer.h:17
 */
static int ofGLES2Renderer_getType(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    lua_pushlstring(L, self->getType().data(), self->getType().length());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getType: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofGLES2Renderer::setup()
 * api/openFrameworks/gl/ofGLES2Renderer.h:19
 */
static int ofGLES2Renderer_setup(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    lua_pushboolean(L, self->setup());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setup: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setup: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::startRender()
 * api/openFrameworks/gl/ofGLES2Renderer.h:20
 */
static int ofGLES2Renderer_startRender(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->startRender();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "startRender: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "startRender: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::finishRender()
 * api/openFrameworks/gl/ofGLES2Renderer.h:21
 */
static int ofGLES2Renderer_finishRender(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->finishRender();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "finishRender: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "finishRender: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setCurrentFBO(ofFbo *fbo)
 * api/openFrameworks/gl/ofGLES2Renderer.h:23
 */
static int ofGLES2Renderer_setCurrentFBO(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    ofFbo *fbo = *((ofFbo **)dub_checksdata(L, 2, "ofFbo"));
    self->setCurrentFBO(fbo);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCurrentFBO: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCurrentFBO: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::update()
 * api/openFrameworks/gl/ofGLES2Renderer.h:25
 */
static int ofGLES2Renderer_update(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->update();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "update: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "update: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::draw(ofMesh &vertexData, bool useColors=true, bool useTextures=true, bool useNormals=true)
 * api/openFrameworks/gl/ofGLES2Renderer.h:26
 */
static int ofGLES2Renderer_draw(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 11) {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofImage", type__)) ) {
        ofImage *image = *((ofImage **)ptr2__);
        float x = dub_checknumber(L, 3);
        float y = dub_checknumber(L, 4);
        float z = dub_checknumber(L, 5);
        float w = dub_checknumber(L, 6);
        float h = dub_checknumber(L, 7);
        float sx = dub_checknumber(L, 8);
        float sy = dub_checknumber(L, 9);
        float sw = dub_checknumber(L, 10);
        float sh = dub_checknumber(L, 11);
        self->draw(*image, x, y, z, w, h, sx, sy, sw, sh);
        return 0;
      } else if ( (ptr2__ = dub_issdata(L, 2, "ofShortImage", type__)) ) {
        ofShortImage *image = *((ofShortImage **)ptr2__);
        float x = dub_checknumber(L, 3);
        float y = dub_checknumber(L, 4);
        float z = dub_checknumber(L, 5);
        float w = dub_checknumber(L, 6);
        float h = dub_checknumber(L, 7);
        float sx = dub_checknumber(L, 8);
        float sy = dub_checknumber(L, 9);
        float sw = dub_checknumber(L, 10);
        float sh = dub_checknumber(L, 11);
        self->draw(*image, x, y, z, w, h, sx, sy, sw, sh);
        return 0;
      } else {
        ofFloatImage *image = *((ofFloatImage **)dub_checksdata(L, 2, "ofFloatImage"));
        float x = dub_checknumber(L, 3);
        float y = dub_checknumber(L, 4);
        float z = dub_checknumber(L, 5);
        float w = dub_checknumber(L, 6);
        float h = dub_checknumber(L, 7);
        float sx = dub_checknumber(L, 8);
        float sy = dub_checknumber(L, 9);
        float sw = dub_checknumber(L, 10);
        float sh = dub_checknumber(L, 11);
        self->draw(*image, x, y, z, w, h, sx, sy, sw, sh);
        return 0;
      }
    } else if (top__ >= 6) {
      ofMesh *vertexData = *((ofMesh **)dub_checksdata(L, 2, "ofMesh"));
      ofPolyRenderMode renderType = (ofPolyRenderMode)dub_checkint(L, 3);
      bool useColors = dub_checkboolean(L, 4);
      bool useTextures = dub_checkboolean(L, 5);
      bool useNormals = dub_checkboolean(L, 6);
      self->draw(*vertexData, renderType, useColors, useTextures, useNormals);
      return 0;
    } else if (top__ >= 5) {
      int type__ = lua_type(L, 3);
      if (type__ == LUA_TBOOLEAN) {
        ofMesh *vertexData = *((ofMesh **)dub_checksdata(L, 2, "ofMesh"));
        bool useColors = dub_checkboolean(L, 3);
        bool useTextures = dub_checkboolean(L, 4);
        bool useNormals = dub_checkboolean(L, 5);
        self->draw(*vertexData, useColors, useTextures, useNormals);
        return 0;
      } else {
        ofMesh *vertexData = *((ofMesh **)dub_checksdata(L, 2, "ofMesh"));
        ofPolyRenderMode renderType = (ofPolyRenderMode)dub_checkint(L, 3);
        bool useColors = dub_checkboolean(L, 4);
        bool useTextures = dub_checkboolean(L, 5);
        self->draw(*vertexData, renderType, useColors, useTextures);
        return 0;
      }
    } else if (top__ >= 4) {
      int type__ = lua_type(L, 3);
      if (type__ == LUA_TBOOLEAN) {
        ofMesh *vertexData = *((ofMesh **)dub_checksdata(L, 2, "ofMesh"));
        bool useColors = dub_checkboolean(L, 3);
        bool useTextures = dub_checkboolean(L, 4);
        self->draw(*vertexData, useColors, useTextures);
        return 0;
      } else {
        ofMesh *vertexData = *((ofMesh **)dub_checksdata(L, 2, "ofMesh"));
        ofPolyRenderMode renderType = (ofPolyRenderMode)dub_checkint(L, 3);
        bool useColors = dub_checkboolean(L, 4);
        self->draw(*vertexData, renderType, useColors);
        return 0;
      }
    } else if (top__ >= 3) {
      int type__ = lua_type(L, 3);
      if (type__ == LUA_TBOOLEAN) {
        ofMesh *vertexData = *((ofMesh **)dub_checksdata(L, 2, "ofMesh"));
        bool useColors = dub_checkboolean(L, 3);
        self->draw(*vertexData, useColors);
        return 0;
      } else {
        int type__ = lua_type(L, 2);
        void **ptr2__;
        if ( (ptr2__ = dub_issdata(L, 2, "ofMesh", type__)) ) {
          ofMesh *vertexData = *((ofMesh **)ptr2__);
          ofPolyRenderMode renderType = (ofPolyRenderMode)dub_checkint(L, 3);
          self->draw(*vertexData, renderType);
          return 0;
        } else {
          vector< ofPoint > *vertexData = *((vector< ofPoint > **)dub_checksdata(L, 2, "vector< ofPoint >"));
          ofPrimitiveMode drawMode = (ofPrimitiveMode)dub_checkint(L, 3);
          self->draw(*vertexData, drawMode);
          return 0;
        }
      }
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofPath", type__)) ) {
        ofPath *path = *((ofPath **)ptr2__);
        self->draw(*path);
        return 0;
      } else if ( (ptr2__ = dub_issdata(L, 2, "ofMesh", type__)) ) {
        ofMesh *vertexData = *((ofMesh **)ptr2__);
        self->draw(*vertexData);
        return 0;
      } else {
        ofPolyline *poly = *((ofPolyline **)dub_checksdata(L, 2, "ofPolyline"));
        self->draw(*poly);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "draw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "draw: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofGLES2Renderer::rendersPathPrimitives()
 * api/openFrameworks/gl/ofGLES2Renderer.h:35
 */
static int ofGLES2Renderer_rendersPathPrimitives(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    lua_pushboolean(L, self->rendersPathPrimitives());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "rendersPathPrimitives: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rendersPathPrimitives: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::pushView()
 * api/openFrameworks/gl/ofGLES2Renderer.h:43
 */
static int ofGLES2Renderer_pushView(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->pushView();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "pushView: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "pushView: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::popView()
 * api/openFrameworks/gl/ofGLES2Renderer.h:44
 */
static int ofGLES2Renderer_popView(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->popView();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "popView: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "popView: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::viewport(ofRectangle viewport)
 * api/openFrameworks/gl/ofGLES2Renderer.h:49
 */
static int ofGLES2Renderer_viewport(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float width = dub_checknumber(L, 4);
      float height = dub_checknumber(L, 5);
      bool invertY = dub_checkboolean(L, 6);
      self->viewport(x, y, width, height, invertY);
      return 0;
    } else if (top__ >= 5) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float width = dub_checknumber(L, 4);
      float height = dub_checknumber(L, 5);
      self->viewport(x, y, width, height);
      return 0;
    } else if (top__ >= 4) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float width = dub_checknumber(L, 4);
      self->viewport(x, y, width);
      return 0;
    } else if (top__ >= 3) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      self->viewport(x, y);
      return 0;
    } else if (top__ >= 2) {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float x = dub_checknumber(L, 2);
        self->viewport(x);
        return 0;
      } else {
        ofRectangle *viewport = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
        self->viewport(*viewport);
        return 0;
      }
    } else {
      self->viewport();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "viewport: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "viewport: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setupScreenPerspective(float width=0, float height=0, ofOrientation orientation=OF_ORIENTATION_UNKNOWN, bool vFlip=true, float fov=60, float nearDist=0, float farDist=0)
 * api/openFrameworks/gl/ofGLES2Renderer.h:51
 */
static int ofGLES2Renderer_setupScreenPerspective(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 8) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      bool vFlip = dub_checkboolean(L, 5);
      float fov = dub_checknumber(L, 6);
      float nearDist = dub_checknumber(L, 7);
      float farDist = dub_checknumber(L, 8);
      self->setupScreenPerspective(width, height, orientation, vFlip, fov, nearDist, farDist);
      return 0;
    } else if (top__ >= 7) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      bool vFlip = dub_checkboolean(L, 5);
      float fov = dub_checknumber(L, 6);
      float nearDist = dub_checknumber(L, 7);
      self->setupScreenPerspective(width, height, orientation, vFlip, fov, nearDist);
      return 0;
    } else if (top__ >= 6) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      bool vFlip = dub_checkboolean(L, 5);
      float fov = dub_checknumber(L, 6);
      self->setupScreenPerspective(width, height, orientation, vFlip, fov);
      return 0;
    } else if (top__ >= 5) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      bool vFlip = dub_checkboolean(L, 5);
      self->setupScreenPerspective(width, height, orientation, vFlip);
      return 0;
    } else if (top__ >= 4) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      self->setupScreenPerspective(width, height, orientation);
      return 0;
    } else if (top__ >= 3) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      self->setupScreenPerspective(width, height);
      return 0;
    } else if (top__ >= 2) {
      float width = dub_checknumber(L, 2);
      self->setupScreenPerspective(width);
      return 0;
    } else {
      self->setupScreenPerspective();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setupScreenPerspective: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setupScreenPerspective: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setupScreenOrtho(float width=0, float height=0, ofOrientation orientation=OF_ORIENTATION_UNKNOWN, bool vFlip=true, float nearDist=-1, float farDist=1)
 * api/openFrameworks/gl/ofGLES2Renderer.h:52
 */
static int ofGLES2Renderer_setupScreenOrtho(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 7) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      bool vFlip = dub_checkboolean(L, 5);
      float nearDist = dub_checknumber(L, 6);
      float farDist = dub_checknumber(L, 7);
      self->setupScreenOrtho(width, height, orientation, vFlip, nearDist, farDist);
      return 0;
    } else if (top__ >= 6) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      bool vFlip = dub_checkboolean(L, 5);
      float nearDist = dub_checknumber(L, 6);
      self->setupScreenOrtho(width, height, orientation, vFlip, nearDist);
      return 0;
    } else if (top__ >= 5) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      bool vFlip = dub_checkboolean(L, 5);
      self->setupScreenOrtho(width, height, orientation, vFlip);
      return 0;
    } else if (top__ >= 4) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      self->setupScreenOrtho(width, height, orientation);
      return 0;
    } else if (top__ >= 3) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      self->setupScreenOrtho(width, height);
      return 0;
    } else if (top__ >= 2) {
      float width = dub_checknumber(L, 2);
      self->setupScreenOrtho(width);
      return 0;
    } else {
      self->setupScreenOrtho();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setupScreenOrtho: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setupScreenOrtho: Unknown exception");
  }
  return dub_error(L);
}

/** ofRectangle ofGLES2Renderer::getCurrentViewport()
 * api/openFrameworks/gl/ofGLES2Renderer.h:53
 */
static int ofGLES2Renderer_getCurrentViewport(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    dub_pushudata(L, new ofRectangle(self->getCurrentViewport()), "ofRectangle", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCurrentViewport: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCurrentViewport: Unknown exception");
  }
  return dub_error(L);
}

/** int ofGLES2Renderer::getViewportWidth()
 * api/openFrameworks/gl/ofGLES2Renderer.h:54
 */
static int ofGLES2Renderer_getViewportWidth(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    lua_pushnumber(L, self->getViewportWidth());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getViewportWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getViewportWidth: Unknown exception");
  }
  return dub_error(L);
}

/** int ofGLES2Renderer::getViewportHeight()
 * api/openFrameworks/gl/ofGLES2Renderer.h:55
 */
static int ofGLES2Renderer_getViewportHeight(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    lua_pushnumber(L, self->getViewportHeight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getViewportHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getViewportHeight: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setCoordHandedness(ofHandednessType handedness)
 * api/openFrameworks/gl/ofGLES2Renderer.h:57
 */
static int ofGLES2Renderer_setCoordHandedness(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    ofHandednessType handedness = (ofHandednessType)dub_checkint(L, 2);
    self->setCoordHandedness(handedness);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCoordHandedness: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCoordHandedness: Unknown exception");
  }
  return dub_error(L);
}

/** ofHandednessType ofGLES2Renderer::getCoordHandedness()
 * api/openFrameworks/gl/ofGLES2Renderer.h:58
 */
static int ofGLES2Renderer_getCoordHandedness(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    lua_pushnumber(L, self->getCoordHandedness());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCoordHandedness: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCoordHandedness: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::pushMatrix()
 * api/openFrameworks/gl/ofGLES2Renderer.h:61
 */
static int ofGLES2Renderer_pushMatrix(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->pushMatrix();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "pushMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "pushMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::popMatrix()
 * api/openFrameworks/gl/ofGLES2Renderer.h:62
 */
static int ofGLES2Renderer_popMatrix(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->popMatrix();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "popMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "popMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::translate(float x, float y, float z=0)
 * api/openFrameworks/gl/ofGLES2Renderer.h:63
 */
static int ofGLES2Renderer_translate(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      self->translate(x, y, z);
      return 0;
    } else if (top__ >= 3) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      self->translate(x, y);
      return 0;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->translate(*p);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "translate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "translate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::scale(float xAmnt, float yAmnt, float zAmnt=1)
 * api/openFrameworks/gl/ofGLES2Renderer.h:65
 */
static int ofGLES2Renderer_scale(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float xAmnt = dub_checknumber(L, 2);
      float yAmnt = dub_checknumber(L, 3);
      float zAmnt = dub_checknumber(L, 4);
      self->scale(xAmnt, yAmnt, zAmnt);
      return 0;
    } else {
      float xAmnt = dub_checknumber(L, 2);
      float yAmnt = dub_checknumber(L, 3);
      self->scale(xAmnt, yAmnt);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "scale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "scale: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::rotate(float degrees, float vecX, float vecY, float vecZ)
 * api/openFrameworks/gl/ofGLES2Renderer.h:66
 */
static int ofGLES2Renderer_rotate(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float degrees = dub_checknumber(L, 2);
      float vecX = dub_checknumber(L, 3);
      float vecY = dub_checknumber(L, 4);
      float vecZ = dub_checknumber(L, 5);
      self->rotate(degrees, vecX, vecY, vecZ);
      return 0;
    } else {
      float degrees = dub_checknumber(L, 2);
      self->rotate(degrees);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::rotateX(float degrees)
 * api/openFrameworks/gl/ofGLES2Renderer.h:67
 */
static int ofGLES2Renderer_rotateX(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    float degrees = dub_checknumber(L, 2);
    self->rotateX(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotateX: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotateX: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::rotateY(float degrees)
 * api/openFrameworks/gl/ofGLES2Renderer.h:68
 */
static int ofGLES2Renderer_rotateY(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    float degrees = dub_checknumber(L, 2);
    self->rotateY(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotateY: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotateY: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::rotateZ(float degrees)
 * api/openFrameworks/gl/ofGLES2Renderer.h:69
 */
static int ofGLES2Renderer_rotateZ(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    float degrees = dub_checknumber(L, 2);
    self->rotateZ(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotateZ: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotateZ: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::matrixMode(ofMatrixMode mode)
 * api/openFrameworks/gl/ofGLES2Renderer.h:71
 */
static int ofGLES2Renderer_matrixMode(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    ofMatrixMode mode = (ofMatrixMode)dub_checkint(L, 2);
    self->matrixMode(mode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "matrixMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "matrixMode: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::loadIdentityMatrix(void)
 * api/openFrameworks/gl/ofGLES2Renderer.h:72
 */
static int ofGLES2Renderer_loadIdentityMatrix(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->loadIdentityMatrix();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "loadIdentityMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "loadIdentityMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::loadMatrix(const ofMatrix4x4 &m)
 * api/openFrameworks/gl/ofGLES2Renderer.h:73
 */
static int ofGLES2Renderer_loadMatrix(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "float *", type__)) ) {
      float * m = (float *) lua_touserdata (L, 2);
      
      self->loadMatrix((float *) m);
      return 0;
    } else {
      ofMatrix4x4 *m = *((ofMatrix4x4 **)dub_checksdata(L, 2, "ofMatrix4x4"));
      self->loadMatrix(*m);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "loadMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "loadMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::multMatrix(const ofMatrix4x4 &m)
 * api/openFrameworks/gl/ofGLES2Renderer.h:75
 */
static int ofGLES2Renderer_multMatrix(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "float *", type__)) ) {
      float * m = (float *) lua_touserdata (L, 2);
      
      self->multMatrix((float *) m);
      return 0;
    } else {
      ofMatrix4x4 *m = *((ofMatrix4x4 **)dub_checksdata(L, 2, "ofMatrix4x4"));
      self->multMatrix(*m);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "multMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "multMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setupGraphicDefaults()
 * api/openFrameworks/gl/ofGLES2Renderer.h:79
 */
static int ofGLES2Renderer_setupGraphicDefaults(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->setupGraphicDefaults();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setupGraphicDefaults: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setupGraphicDefaults: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setupScreen()
 * api/openFrameworks/gl/ofGLES2Renderer.h:80
 */
static int ofGLES2Renderer_setupScreen(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->setupScreen();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setupScreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setupScreen: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setFillMode(ofFillFlag fill)
 * api/openFrameworks/gl/ofGLES2Renderer.h:83
 */
static int ofGLES2Renderer_setFillMode(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    ofFillFlag fill = (ofFillFlag)dub_checkint(L, 2);
    self->setFillMode(fill);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFillMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFillMode: Unknown exception");
  }
  return dub_error(L);
}

/** ofFillFlag ofGLES2Renderer::getFillMode()
 * api/openFrameworks/gl/ofGLES2Renderer.h:84
 */
static int ofGLES2Renderer_getFillMode(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    lua_pushnumber(L, self->getFillMode());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getFillMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getFillMode: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setCircleResolution(int res)
 * api/openFrameworks/gl/ofGLES2Renderer.h:85
 */
static int ofGLES2Renderer_setCircleResolution(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    int res = dub_checkint(L, 2);
    self->setCircleResolution(res);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCircleResolution: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCircleResolution: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setSphereResolution(int res)
 * api/openFrameworks/gl/ofGLES2Renderer.h:86
 */
static int ofGLES2Renderer_setSphereResolution(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    int res = dub_checkint(L, 2);
    self->setSphereResolution(res);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSphereResolution: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSphereResolution: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setRectMode(ofRectMode mode)
 * api/openFrameworks/gl/ofGLES2Renderer.h:87
 */
static int ofGLES2Renderer_setRectMode(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    ofRectMode mode = (ofRectMode)dub_checkint(L, 2);
    self->setRectMode(mode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setRectMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setRectMode: Unknown exception");
  }
  return dub_error(L);
}

/** ofRectMode ofGLES2Renderer::getRectMode()
 * api/openFrameworks/gl/ofGLES2Renderer.h:88
 */
static int ofGLES2Renderer_getRectMode(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    lua_pushnumber(L, self->getRectMode());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRectMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRectMode: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setLineWidth(float lineWidth)
 * api/openFrameworks/gl/ofGLES2Renderer.h:89
 */
static int ofGLES2Renderer_setLineWidth(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    float lineWidth = dub_checknumber(L, 2);
    self->setLineWidth(lineWidth);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setLineWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setLineWidth: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setLineSmoothing(bool smooth)
 * api/openFrameworks/gl/ofGLES2Renderer.h:90
 */
static int ofGLES2Renderer_setLineSmoothing(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    bool smooth = dub_checkboolean(L, 2);
    self->setLineSmoothing(smooth);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setLineSmoothing: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setLineSmoothing: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setBlendMode(ofBlendMode blendMode)
 * api/openFrameworks/gl/ofGLES2Renderer.h:91
 */
static int ofGLES2Renderer_setBlendMode(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    ofBlendMode blendMode = (ofBlendMode)dub_checkint(L, 2);
    self->setBlendMode(blendMode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setBlendMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setBlendMode: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::enablePointSprites()
 * api/openFrameworks/gl/ofGLES2Renderer.h:92
 */
static int ofGLES2Renderer_enablePointSprites(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->enablePointSprites();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enablePointSprites: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enablePointSprites: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::disablePointSprites()
 * api/openFrameworks/gl/ofGLES2Renderer.h:93
 */
static int ofGLES2Renderer_disablePointSprites(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->disablePointSprites();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disablePointSprites: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disablePointSprites: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setColor(int r, int g, int b)
 * api/openFrameworks/gl/ofGLES2Renderer.h:96
 */
static int ofGLES2Renderer_setColor(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      int r = dub_checkint(L, 2);
      int g = dub_checkint(L, 3);
      int b = dub_checkint(L, 4);
      int a = dub_checkint(L, 5);
      self->setColor(r, g, b, a);
      return 0;
    } else if (top__ >= 4) {
      int r = dub_checkint(L, 2);
      int g = dub_checkint(L, 3);
      int b = dub_checkint(L, 4);
      self->setColor(r, g, b);
      return 0;
    } else if (top__ >= 3) {
      ofColor *color = *((ofColor **)dub_checksdata(L, 2, "ofColor"));
      int _a = dub_checkint(L, 3);
      self->setColor(*color, _a);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        int gray = dub_checkint(L, 2);
        self->setColor(gray);
        return 0;
      } else {
        ofColor *color = *((ofColor **)dub_checksdata(L, 2, "ofColor"));
        self->setColor(*color);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setColor: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setHexColor(int hexColor)
 * api/openFrameworks/gl/ofGLES2Renderer.h:101
 */
static int ofGLES2Renderer_setHexColor(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    int hexColor = dub_checkint(L, 2);
    self->setHexColor(hexColor);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setHexColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setHexColor: Unknown exception");
  }
  return dub_error(L);
}

/** ofFloatColor& ofGLES2Renderer::getBgColor()
 * api/openFrameworks/gl/ofGLES2Renderer.h:104
 */
static int ofGLES2Renderer_getBgColor(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    dub_pushudata(L, &self->getBgColor(), "ofFloatColor", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBgColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBgColor: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofGLES2Renderer::bClearBg()
 * api/openFrameworks/gl/ofGLES2Renderer.h:105
 */
static int ofGLES2Renderer_bClearBg(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    lua_pushboolean(L, self->bClearBg());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "bClearBg: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "bClearBg: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::background(const ofColor &c)
 * api/openFrameworks/gl/ofGLES2Renderer.h:106
 */
static int ofGLES2Renderer_background(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      int r = dub_checkint(L, 2);
      int g = dub_checkint(L, 3);
      int b = dub_checkint(L, 4);
      int a = dub_checkint(L, 5);
      self->background(r, g, b, a);
      return 0;
    } else if (top__ >= 4) {
      int r = dub_checkint(L, 2);
      int g = dub_checkint(L, 3);
      int b = dub_checkint(L, 4);
      self->background(r, g, b);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float brightness = dub_checknumber(L, 2);
        self->background(brightness);
        return 0;
      } else {
        ofColor *c = *((ofColor **)dub_checksdata(L, 2, "ofColor"));
        self->background(*c);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "background: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "background: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setBackgroundAuto(bool bManual)
 * api/openFrameworks/gl/ofGLES2Renderer.h:111
 */
static int ofGLES2Renderer_setBackgroundAuto(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    bool bManual = dub_checkboolean(L, 2);
    self->setBackgroundAuto(bManual);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setBackgroundAuto: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setBackgroundAuto: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::clear(float r, float g, float b, float a=0)
 * api/openFrameworks/gl/ofGLES2Renderer.h:113
 */
static int ofGLES2Renderer_clear(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float r = dub_checknumber(L, 2);
      float g = dub_checknumber(L, 3);
      float b = dub_checknumber(L, 4);
      float a = dub_checknumber(L, 5);
      self->clear(r, g, b, a);
      return 0;
    } else if (top__ >= 4) {
      float r = dub_checknumber(L, 2);
      float g = dub_checknumber(L, 3);
      float b = dub_checknumber(L, 4);
      self->clear(r, g, b);
      return 0;
    } else if (top__ >= 3) {
      float brightness = dub_checknumber(L, 2);
      float a = dub_checknumber(L, 3);
      self->clear(brightness, a);
      return 0;
    } else {
      float brightness = dub_checknumber(L, 2);
      self->clear(brightness);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "clear: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clear: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::clearAlpha()
 * api/openFrameworks/gl/ofGLES2Renderer.h:115
 */
static int ofGLES2Renderer_clearAlpha(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->clearAlpha();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearAlpha: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearAlpha: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::drawLine(float x1, float y1, float z1, float x2, float y2, float z2)
 * api/openFrameworks/gl/ofGLES2Renderer.h:119
 */
static int ofGLES2Renderer_drawLine(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    float x1 = dub_checknumber(L, 2);
    float y1 = dub_checknumber(L, 3);
    float z1 = dub_checknumber(L, 4);
    float x2 = dub_checknumber(L, 5);
    float y2 = dub_checknumber(L, 6);
    float z2 = dub_checknumber(L, 7);
    self->drawLine(x1, y1, z1, x2, y2, z2);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawLine: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawLine: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::drawRectangle(float x, float y, float z, float w, float h)
 * api/openFrameworks/gl/ofGLES2Renderer.h:120
 */
static int ofGLES2Renderer_drawRectangle(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    float z = dub_checknumber(L, 4);
    float w = dub_checknumber(L, 5);
    float h = dub_checknumber(L, 6);
    self->drawRectangle(x, y, z, w, h);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawRectangle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawRectangle: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::drawTriangle(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3)
 * api/openFrameworks/gl/ofGLES2Renderer.h:121
 */
static int ofGLES2Renderer_drawTriangle(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    float x1 = dub_checknumber(L, 2);
    float y1 = dub_checknumber(L, 3);
    float z1 = dub_checknumber(L, 4);
    float x2 = dub_checknumber(L, 5);
    float y2 = dub_checknumber(L, 6);
    float z2 = dub_checknumber(L, 7);
    float x3 = dub_checknumber(L, 8);
    float y3 = dub_checknumber(L, 9);
    float z3 = dub_checknumber(L, 10);
    self->drawTriangle(x1, y1, z1, x2, y2, z2, x3, y3, z3);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawTriangle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawTriangle: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::drawCircle(float x, float y, float z, float radius)
 * api/openFrameworks/gl/ofGLES2Renderer.h:122
 */
static int ofGLES2Renderer_drawCircle(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    float z = dub_checknumber(L, 4);
    float radius = dub_checknumber(L, 5);
    self->drawCircle(x, y, z, radius);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawCircle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawCircle: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::drawSphere(float x, float y, float z, float radius)
 * api/openFrameworks/gl/ofGLES2Renderer.h:123
 */
static int ofGLES2Renderer_drawSphere(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    float z = dub_checknumber(L, 4);
    float radius = dub_checknumber(L, 5);
    self->drawSphere(x, y, z, radius);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawSphere: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawSphere: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::drawEllipse(float x, float y, float z, float width, float height)
 * api/openFrameworks/gl/ofGLES2Renderer.h:124
 */
static int ofGLES2Renderer_drawEllipse(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    float z = dub_checknumber(L, 4);
    float width = dub_checknumber(L, 5);
    float height = dub_checknumber(L, 6);
    self->drawEllipse(x, y, z, width, height);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawEllipse: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawEllipse: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::drawString(string text, float x, float y, float z, ofDrawBitmapMode mode)
 * api/openFrameworks/gl/ofGLES2Renderer.h:125
 */
static int ofGLES2Renderer_drawString(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    size_t text_sz_;
    const char *text = dub_checklstring(L, 2, &text_sz_);
    float x = dub_checknumber(L, 3);
    float y = dub_checknumber(L, 4);
    float z = dub_checknumber(L, 5);
    ofDrawBitmapMode mode = (ofDrawBitmapMode)dub_checkint(L, 6);
    self->drawString(std::string(text, text_sz_), x, y, z, mode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawString: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawString: Unknown exception");
  }
  return dub_error(L);
}

/** GLint ofGLES2Renderer::getAttrLocationPosition()
 * api/openFrameworks/gl/ofGLES2Renderer.h:128
 */
static int ofGLES2Renderer_getAttrLocationPosition(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    lua_pushnumber(L, self->getAttrLocationPosition());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAttrLocationPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAttrLocationPosition: Unknown exception");
  }
  return dub_error(L);
}

/** GLint ofGLES2Renderer::getAttrLocationColor()
 * api/openFrameworks/gl/ofGLES2Renderer.h:129
 */
static int ofGLES2Renderer_getAttrLocationColor(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    lua_pushnumber(L, self->getAttrLocationColor());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAttrLocationColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAttrLocationColor: Unknown exception");
  }
  return dub_error(L);
}

/** GLint ofGLES2Renderer::getAttrLocationNormal()
 * api/openFrameworks/gl/ofGLES2Renderer.h:130
 */
static int ofGLES2Renderer_getAttrLocationNormal(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    lua_pushnumber(L, self->getAttrLocationNormal());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAttrLocationNormal: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAttrLocationNormal: Unknown exception");
  }
  return dub_error(L);
}

/** GLint ofGLES2Renderer::getAttrLocationTexCoord()
 * api/openFrameworks/gl/ofGLES2Renderer.h:131
 */
static int ofGLES2Renderer_getAttrLocationTexCoord(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    lua_pushnumber(L, self->getAttrLocationTexCoord());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAttrLocationTexCoord: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAttrLocationTexCoord: Unknown exception");
  }
  return dub_error(L);
}

/** ofShader& ofGLES2Renderer::getCurrentShader()
 * api/openFrameworks/gl/ofGLES2Renderer.h:133
 */
static int ofGLES2Renderer_getCurrentShader(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    dub_pushudata(L, &self->getCurrentShader(), "ofShader", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCurrentShader: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCurrentShader: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::setDefaultShader(ofShader &shader)
 * api/openFrameworks/gl/ofGLES2Renderer.h:134
 */
static int ofGLES2Renderer_setDefaultShader(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    ofShader *shader = *((ofShader **)dub_checksdata(L, 2, "ofShader"));
    self->setDefaultShader(*shader);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDefaultShader: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDefaultShader: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::enableVertices()
 * api/openFrameworks/gl/ofGLES2Renderer.h:136
 */
static int ofGLES2Renderer_enableVertices(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->enableVertices();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableVertices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableVertices: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::enableTexCoords()
 * api/openFrameworks/gl/ofGLES2Renderer.h:137
 */
static int ofGLES2Renderer_enableTexCoords(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->enableTexCoords();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableTexCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableTexCoords: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::enableColors()
 * api/openFrameworks/gl/ofGLES2Renderer.h:138
 */
static int ofGLES2Renderer_enableColors(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->enableColors();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableColors: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableColors: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::enableNormals()
 * api/openFrameworks/gl/ofGLES2Renderer.h:139
 */
static int ofGLES2Renderer_enableNormals(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->enableNormals();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableNormals: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableNormals: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::disableVertices()
 * api/openFrameworks/gl/ofGLES2Renderer.h:140
 */
static int ofGLES2Renderer_disableVertices(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->disableVertices();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disableVertices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disableVertices: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::disableTexCoords()
 * api/openFrameworks/gl/ofGLES2Renderer.h:141
 */
static int ofGLES2Renderer_disableTexCoords(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->disableTexCoords();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disableTexCoords: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disableTexCoords: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::disableColors()
 * api/openFrameworks/gl/ofGLES2Renderer.h:142
 */
static int ofGLES2Renderer_disableColors(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->disableColors();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disableColors: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disableColors: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::disableNormals()
 * api/openFrameworks/gl/ofGLES2Renderer.h:143
 */
static int ofGLES2Renderer_disableNormals(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->disableNormals();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disableNormals: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disableNormals: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::beginCustomShader(ofShader &shader)
 * api/openFrameworks/gl/ofGLES2Renderer.h:145
 */
static int ofGLES2Renderer_beginCustomShader(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    ofShader *shader = *((ofShader **)dub_checksdata(L, 2, "ofShader"));
    self->beginCustomShader(*shader);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "beginCustomShader: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "beginCustomShader: Unknown exception");
  }
  return dub_error(L);
}

/** void ofGLES2Renderer::endCustomShader()
 * api/openFrameworks/gl/ofGLES2Renderer.h:146
 */
static int ofGLES2Renderer_endCustomShader(lua_State *L) {
  try {
    ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata(L, 1, "ofGLES2Renderer"));
    self->endCustomShader();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "endCustomShader: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "endCustomShader: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofGLES2Renderer___tostring(lua_State *L) {
  ofGLES2Renderer *self = *((ofGLES2Renderer **)dub_checksdata_n(L, 1, "ofGLES2Renderer"));
  lua_pushfstring(L, "ofGLES2Renderer: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofGLES2Renderer_member_methods[] = {
  { "_cast_"       , ofGLES2Renderer__cast_ },
  { "new"          , ofGLES2Renderer_ofGLES2Renderer },
  { "__gc"         , ofGLES2Renderer__ofGLES2Renderer },
  { "getType"      , ofGLES2Renderer_getType },
  { "setup"        , ofGLES2Renderer_setup },
  { "startRender"  , ofGLES2Renderer_startRender },
  { "finishRender" , ofGLES2Renderer_finishRender },
  { "setCurrentFBO", ofGLES2Renderer_setCurrentFBO },
  { "update"       , ofGLES2Renderer_update },
  { "draw"         , ofGLES2Renderer_draw },
  { "rendersPathPrimitives", ofGLES2Renderer_rendersPathPrimitives },
  { "pushView"     , ofGLES2Renderer_pushView },
  { "popView"      , ofGLES2Renderer_popView },
  { "viewport"     , ofGLES2Renderer_viewport },
  { "setupScreenPerspective", ofGLES2Renderer_setupScreenPerspective },
  { "setupScreenOrtho", ofGLES2Renderer_setupScreenOrtho },
  { "getCurrentViewport", ofGLES2Renderer_getCurrentViewport },
  { "getViewportWidth", ofGLES2Renderer_getViewportWidth },
  { "getViewportHeight", ofGLES2Renderer_getViewportHeight },
  { "setCoordHandedness", ofGLES2Renderer_setCoordHandedness },
  { "getCoordHandedness", ofGLES2Renderer_getCoordHandedness },
  { "pushMatrix"   , ofGLES2Renderer_pushMatrix },
  { "popMatrix"    , ofGLES2Renderer_popMatrix },
  { "translate"    , ofGLES2Renderer_translate },
  { "scale"        , ofGLES2Renderer_scale },
  { "rotate"       , ofGLES2Renderer_rotate },
  { "rotateX"      , ofGLES2Renderer_rotateX },
  { "rotateY"      , ofGLES2Renderer_rotateY },
  { "rotateZ"      , ofGLES2Renderer_rotateZ },
  { "matrixMode"   , ofGLES2Renderer_matrixMode },
  { "loadIdentityMatrix", ofGLES2Renderer_loadIdentityMatrix },
  { "loadMatrix"   , ofGLES2Renderer_loadMatrix },
  { "multMatrix"   , ofGLES2Renderer_multMatrix },
  { "setupGraphicDefaults", ofGLES2Renderer_setupGraphicDefaults },
  { "setupScreen"  , ofGLES2Renderer_setupScreen },
  { "setFillMode"  , ofGLES2Renderer_setFillMode },
  { "getFillMode"  , ofGLES2Renderer_getFillMode },
  { "setCircleResolution", ofGLES2Renderer_setCircleResolution },
  { "setSphereResolution", ofGLES2Renderer_setSphereResolution },
  { "setRectMode"  , ofGLES2Renderer_setRectMode },
  { "getRectMode"  , ofGLES2Renderer_getRectMode },
  { "setLineWidth" , ofGLES2Renderer_setLineWidth },
  { "setLineSmoothing", ofGLES2Renderer_setLineSmoothing },
  { "setBlendMode" , ofGLES2Renderer_setBlendMode },
  { "enablePointSprites", ofGLES2Renderer_enablePointSprites },
  { "disablePointSprites", ofGLES2Renderer_disablePointSprites },
  { "setColor"     , ofGLES2Renderer_setColor },
  { "setHexColor"  , ofGLES2Renderer_setHexColor },
  { "getBgColor"   , ofGLES2Renderer_getBgColor },
  { "bClearBg"     , ofGLES2Renderer_bClearBg },
  { "background"   , ofGLES2Renderer_background },
  { "setBackgroundAuto", ofGLES2Renderer_setBackgroundAuto },
  { "clear"        , ofGLES2Renderer_clear },
  { "clearAlpha"   , ofGLES2Renderer_clearAlpha },
  { "drawLine"     , ofGLES2Renderer_drawLine },
  { "drawRectangle", ofGLES2Renderer_drawRectangle },
  { "drawTriangle" , ofGLES2Renderer_drawTriangle },
  { "drawCircle"   , ofGLES2Renderer_drawCircle },
  { "drawSphere"   , ofGLES2Renderer_drawSphere },
  { "drawEllipse"  , ofGLES2Renderer_drawEllipse },
  { "drawString"   , ofGLES2Renderer_drawString },
  { "getAttrLocationPosition", ofGLES2Renderer_getAttrLocationPosition },
  { "getAttrLocationColor", ofGLES2Renderer_getAttrLocationColor },
  { "getAttrLocationNormal", ofGLES2Renderer_getAttrLocationNormal },
  { "getAttrLocationTexCoord", ofGLES2Renderer_getAttrLocationTexCoord },
  { "getCurrentShader", ofGLES2Renderer_getCurrentShader },
  { "setDefaultShader", ofGLES2Renderer_setDefaultShader },
  { "enableVertices", ofGLES2Renderer_enableVertices },
  { "enableTexCoords", ofGLES2Renderer_enableTexCoords },
  { "enableColors" , ofGLES2Renderer_enableColors },
  { "enableNormals", ofGLES2Renderer_enableNormals },
  { "disableVertices", ofGLES2Renderer_disableVertices },
  { "disableTexCoords", ofGLES2Renderer_disableTexCoords },
  { "disableColors", ofGLES2Renderer_disableColors },
  { "disableNormals", ofGLES2Renderer_disableNormals },
  { "beginCustomShader", ofGLES2Renderer_beginCustomShader },
  { "endCustomShader", ofGLES2Renderer_endCustomShader },
  { "__tostring"   , ofGLES2Renderer___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofGLES2Renderer(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofGLES2Renderer");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofGLES2Renderer_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofGLES2Renderer", "ofGLES2Renderer");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
