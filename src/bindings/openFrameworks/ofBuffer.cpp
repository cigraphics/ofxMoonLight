/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofBuffer
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/utils/ofFileUtils.h"


/** ofBuffer::ofBuffer()
 * api/openFrameworks/utils/ofFileUtils.h:13
 */
static int ofBuffer_ofBuffer(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      const char *buffer = dub_checkstring(L, 1);
      unsigned int size = dub_checkint(L, 2);
      ofBuffer *retval__ = new ofBuffer(buffer, size);
      dub_pushudata(L, retval__, "ofBuffer", true);
      return 1;
    } else if (top__ >= 1) {
      int type__ = lua_type(L, 1);
      void **ptr1__;
      if ( (ptr1__ = dub_issdata(L, 1, "istream", type__)) ) {
        istream *stream = *((istream **)ptr1__);
        ofBuffer *retval__ = new ofBuffer(*stream);
        dub_pushudata(L, retval__, "ofBuffer", true);
        return 1;
      } else if ( (ptr1__ = dub_issdata(L, 1, "ofBuffer", type__)) ) {
        ofBuffer *buffer_ = *((ofBuffer **)ptr1__);
        ofBuffer *retval__ = new ofBuffer(*buffer_);
        dub_pushudata(L, retval__, "ofBuffer", true);
        return 1;
      } else {
        string *text = *((string **)dub_checksdata(L, 1, "string"));
        ofBuffer *retval__ = new ofBuffer(*text);
        dub_pushudata(L, retval__, "ofBuffer", true);
        return 1;
      }
    } else {
      ofBuffer *retval__ = new ofBuffer();
      dub_pushudata(L, retval__, "ofBuffer", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** ofBuffer::~ofBuffer()
 * api/openFrameworks/utils/ofFileUtils.h:19
 */
static int ofBuffer__ofBuffer(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofBuffer"));
    if (userdata->gc) {
      ofBuffer *self = (ofBuffer *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** void ofBuffer::set(const char *_buffer, unsigned int _size)
 * api/openFrameworks/utils/ofFileUtils.h:21
 */
static int ofBuffer_set(lua_State *L) {
  try {
    ofBuffer *self = *((ofBuffer **)dub_checksdata(L, 1, "ofBuffer"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      const char *_buffer = dub_checkstring(L, 2);
      unsigned int _size = dub_checkint(L, 3);
      self->set(_buffer, _size);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "istream", type__)) ) {
        istream *stream = *((istream **)ptr2__);
        lua_pushboolean(L, self->set(*stream));
        return 1;
      } else {
        string *text = *((string **)dub_checksdata(L, 2, "string"));
        self->set(*text);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub_error(L);
}

/** void ofBuffer::append(const string &_buffer)
 * api/openFrameworks/utils/ofFileUtils.h:24
 */
static int ofBuffer_append(lua_State *L) {
  try {
    ofBuffer *self = *((ofBuffer **)dub_checksdata(L, 1, "ofBuffer"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      const char *_buffer = dub_checkstring(L, 2);
      unsigned int _size = dub_checkint(L, 3);
      self->append(_buffer, _size);
      return 0;
    } else {
      string *_buffer = *((string **)dub_checksdata(L, 2, "string"));
      self->append(*_buffer);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "append: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "append: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofBuffer::writeTo(ostream &stream) const
 * api/openFrameworks/utils/ofFileUtils.h:27
 */
static int ofBuffer_writeTo(lua_State *L) {
  try {
    ofBuffer *self = *((ofBuffer **)dub_checksdata(L, 1, "ofBuffer"));
    ostream *stream = *((ostream **)dub_checksdata(L, 2, "ostream"));
    lua_pushboolean(L, self->writeTo(*stream));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "writeTo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "writeTo: Unknown exception");
  }
  return dub_error(L);
}

/** void ofBuffer::clear()
 * api/openFrameworks/utils/ofFileUtils.h:29
 */
static int ofBuffer_clear(lua_State *L) {
  try {
    ofBuffer *self = *((ofBuffer **)dub_checksdata(L, 1, "ofBuffer"));
    self->clear();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clear: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clear: Unknown exception");
  }
  return dub_error(L);
}

/** void ofBuffer::allocate(long _size)
 * api/openFrameworks/utils/ofFileUtils.h:31
 */
static int ofBuffer_allocate(lua_State *L) {
  try {
    ofBuffer *self = *((ofBuffer **)dub_checksdata(L, 1, "ofBuffer"));
    long *_size = *((long **)dub_checksdata(L, 2, "long"));
    self->allocate(*_size);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "allocate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "allocate: Unknown exception");
  }
  return dub_error(L);
}

/** char* ofBuffer::getBinaryBuffer()
 * api/openFrameworks/utils/ofFileUtils.h:33
 */
static int ofBuffer_getBinaryBuffer(lua_State *L) {
  try {
    ofBuffer *self = *((ofBuffer **)dub_checksdata(L, 1, "ofBuffer"));
    lua_pushstring(L, self->getBinaryBuffer());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBinaryBuffer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBinaryBuffer: Unknown exception");
  }
  return dub_error(L);
}

/** string ofBuffer::getText() const
 * api/openFrameworks/utils/ofFileUtils.h:36
 */
static int ofBuffer_getText(lua_State *L) {
  try {
    ofBuffer *self = *((ofBuffer **)dub_checksdata(L, 1, "ofBuffer"));
    dub_pushudata(L, new string(self->getText()), "string", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getText: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getText: Unknown exception");
  }
  return dub_error(L);
}

/** ofBuffer& ofBuffer::operator=(const string &text)
 * api/openFrameworks/utils/ofFileUtils.h:38
 */
static int ofBuffer_operator_sete(lua_State *L) {
  try {
    ofBuffer *self = *((ofBuffer **)dub_checksdata(L, 1, "ofBuffer"));
    string *text = *((string **)dub_checksdata(L, 2, "string"));
    dub_pushudata(L, &self->operator=(*text), "ofBuffer", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub_error(L);
}

/** long ofBuffer::size() const
 * api/openFrameworks/utils/ofFileUtils.h:40
 */
static int ofBuffer_size(lua_State *L) {
  try {
    ofBuffer *self = *((ofBuffer **)dub_checksdata(L, 1, "ofBuffer"));
    dub_pushudata(L, new long(self->size()), "long", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "size: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "size: Unknown exception");
  }
  return dub_error(L);
}

/** string ofBuffer::getNextLine()
 * api/openFrameworks/utils/ofFileUtils.h:41
 */
static int ofBuffer_getNextLine(lua_State *L) {
  try {
    ofBuffer *self = *((ofBuffer **)dub_checksdata(L, 1, "ofBuffer"));
    dub_pushudata(L, new string(self->getNextLine()), "string", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNextLine: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNextLine: Unknown exception");
  }
  return dub_error(L);
}

/** string ofBuffer::getFirstLine()
 * api/openFrameworks/utils/ofFileUtils.h:42
 */
static int ofBuffer_getFirstLine(lua_State *L) {
  try {
    ofBuffer *self = *((ofBuffer **)dub_checksdata(L, 1, "ofBuffer"));
    dub_pushudata(L, new string(self->getFirstLine()), "string", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getFirstLine: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getFirstLine: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofBuffer::isLastLine()
 * api/openFrameworks/utils/ofFileUtils.h:43
 */
static int ofBuffer_isLastLine(lua_State *L) {
  try {
    ofBuffer *self = *((ofBuffer **)dub_checksdata(L, 1, "ofBuffer"));
    lua_pushboolean(L, self->isLastLine());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isLastLine: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isLastLine: Unknown exception");
  }
  return dub_error(L);
}

/** void ofBuffer::resetLineReader()
 * api/openFrameworks/utils/ofFileUtils.h:44
 */
static int ofBuffer_resetLineReader(lua_State *L) {
  try {
    ofBuffer *self = *((ofBuffer **)dub_checksdata(L, 1, "ofBuffer"));
    self->resetLineReader();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "resetLineReader: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "resetLineReader: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofBuffer___tostring(lua_State *L) {
  ofBuffer *self = *((ofBuffer **)dub_checksdata_n(L, 1, "ofBuffer"));
  lua_pushfstring(L, "ofBuffer: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofBuffer_member_methods[] = {
  { "new"          , ofBuffer_ofBuffer    },
  { "__gc"         , ofBuffer__ofBuffer   },
  { "set"          , ofBuffer_set         },
  { "append"       , ofBuffer_append      },
  { "writeTo"      , ofBuffer_writeTo     },
  { "clear"        , ofBuffer_clear       },
  { "allocate"     , ofBuffer_allocate    },
  { "getBinaryBuffer", ofBuffer_getBinaryBuffer },
  { "getText"      , ofBuffer_getText     },
  { "set"          , ofBuffer_operator_sete },
  { "size"         , ofBuffer_size        },
  { "getNextLine"  , ofBuffer_getNextLine },
  { "getFirstLine" , ofBuffer_getFirstLine },
  { "isLastLine"   , ofBuffer_isLastLine  },
  { "resetLineReader", ofBuffer_resetLineReader },
  { "__tostring"   , ofBuffer___tostring  },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofBuffer(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofBuffer");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofBuffer_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofBuffer", "ofBuffer");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
