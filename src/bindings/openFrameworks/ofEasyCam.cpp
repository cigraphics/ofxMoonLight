/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofEasyCam
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "3d/ofEasyCam.h"


/** Cast (class_name)
 * 
 */
static int ofEasyCam__cast_(lua_State *L) {

  ofEasyCam *self = *((ofEasyCam **)dub_checksdata_n(L, 1, "ofEasyCam"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "ofCamera")) break;
      *retval__ = static_cast<ofCamera *>(self);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "ofNode")) break;
      *retval__ = static_cast<ofNode *>(self);
      return 1;
    }
  }
  return 0;
}

/** ofEasyCam::ofEasyCam()
 * api/openFrameworks/3d/ofEasyCam.h:8
 */
static int ofEasyCam_ofEasyCam(lua_State *L) {
  try {
    ofEasyCam *retval__ = new ofEasyCam();
    dub_pushudata(L, retval__, "ofEasyCam", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** ofEasyCam::~ofEasyCam()
 * api/openFrameworks/3d/ofEasyCam.h:9
 */
static int ofEasyCam__ofEasyCam(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofEasyCam"));
    if (userdata->gc) {
      ofEasyCam *self = (ofEasyCam *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofEasyCam::begin(ofRectangle viewport=ofGetCurrentViewport())
 * api/openFrameworks/3d/ofEasyCam.h:12
 */
static int ofEasyCam_begin(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      ofRectangle *viewport = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
      self->begin(*viewport);
      return 0;
    } else {
      self->begin();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "begin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "begin: Unknown exception");
  }
  return dub_error(L);
}

/** void ofEasyCam::reset()
 * api/openFrameworks/3d/ofEasyCam.h:13
 */
static int ofEasyCam_reset(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    self->reset();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "reset: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "reset: Unknown exception");
  }
  return dub_error(L);
}

/** void ofEasyCam::setTarget(const ofVec3f &target)
 * api/openFrameworks/3d/ofEasyCam.h:18
 */
static int ofEasyCam_setTarget(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
      ofVec3f *target = *((ofVec3f **)ptr2__);
      self->setTarget(*target);
      return 0;
    } else {
      ofNode *target = *((ofNode **)dub_checksdata(L, 2, "ofNode"));
      self->setTarget(*target);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setTarget: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setTarget: Unknown exception");
  }
  return dub_error(L);
}

/** ofNode& ofEasyCam::getTarget()
 * api/openFrameworks/3d/ofEasyCam.h:20
 */
static int ofEasyCam_getTarget(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, &self->getTarget(), "ofNode", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getTarget: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getTarget: Unknown exception");
  }
  return dub_error(L);
}

/** void ofEasyCam::setDistance(float distance)
 * api/openFrameworks/3d/ofEasyCam.h:22
 */
static int ofEasyCam_setDistance(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    float distance = dub_checknumber(L, 2);
    self->setDistance(distance);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDistance: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDistance: Unknown exception");
  }
  return dub_error(L);
}

/** float ofEasyCam::getDistance() const
 * api/openFrameworks/3d/ofEasyCam.h:23
 */
static int ofEasyCam_getDistance(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    lua_pushnumber(L, self->getDistance());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getDistance: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getDistance: Unknown exception");
  }
  return dub_error(L);
}

/** void ofEasyCam::setDrag(float drag)
 * api/openFrameworks/3d/ofEasyCam.h:27
 */
static int ofEasyCam_setDrag(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    float drag = dub_checknumber(L, 2);
    self->setDrag(drag);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDrag: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDrag: Unknown exception");
  }
  return dub_error(L);
}

/** float ofEasyCam::getDrag() const
 * api/openFrameworks/3d/ofEasyCam.h:28
 */
static int ofEasyCam_getDrag(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    lua_pushnumber(L, self->getDrag());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getDrag: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getDrag: Unknown exception");
  }
  return dub_error(L);
}

/** void ofEasyCam::setTranslationKey(char key)
 * api/openFrameworks/3d/ofEasyCam.h:31
 */
static int ofEasyCam_setTranslationKey(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    char key = dub_checkint(L, 2);
    self->setTranslationKey(key);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setTranslationKey: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setTranslationKey: Unknown exception");
  }
  return dub_error(L);
}

/** char ofEasyCam::getTranslationKey()
 * api/openFrameworks/3d/ofEasyCam.h:32
 */
static int ofEasyCam_getTranslationKey(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    lua_pushnumber(L, self->getTranslationKey());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getTranslationKey: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getTranslationKey: Unknown exception");
  }
  return dub_error(L);
}

/** void ofEasyCam::enableMouseInput()
 * api/openFrameworks/3d/ofEasyCam.h:35
 */
static int ofEasyCam_enableMouseInput(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    self->enableMouseInput();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableMouseInput: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableMouseInput: Unknown exception");
  }
  return dub_error(L);
}

/** void ofEasyCam::disableMouseInput()
 * api/openFrameworks/3d/ofEasyCam.h:36
 */
static int ofEasyCam_disableMouseInput(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    self->disableMouseInput();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disableMouseInput: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disableMouseInput: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofEasyCam::getMouseInputEnabled()
 * api/openFrameworks/3d/ofEasyCam.h:37
 */
static int ofEasyCam_getMouseInputEnabled(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    lua_pushboolean(L, self->getMouseInputEnabled());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getMouseInputEnabled: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getMouseInputEnabled: Unknown exception");
  }
  return dub_error(L);
}

/** void ofEasyCam::enableMouseMiddleButton()
 * api/openFrameworks/3d/ofEasyCam.h:39
 */
static int ofEasyCam_enableMouseMiddleButton(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    self->enableMouseMiddleButton();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableMouseMiddleButton: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableMouseMiddleButton: Unknown exception");
  }
  return dub_error(L);
}

/** void ofEasyCam::disableMouseMiddleButton()
 * api/openFrameworks/3d/ofEasyCam.h:40
 */
static int ofEasyCam_disableMouseMiddleButton(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    self->disableMouseMiddleButton();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disableMouseMiddleButton: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disableMouseMiddleButton: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofEasyCam::getMouseMiddleButtonEnabled()
 * api/openFrameworks/3d/ofEasyCam.h:41
 */
static int ofEasyCam_getMouseMiddleButtonEnabled(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    lua_pushboolean(L, self->getMouseMiddleButtonEnabled());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getMouseMiddleButtonEnabled: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getMouseMiddleButtonEnabled: Unknown exception");
  }
  return dub_error(L);
}

/** void ofEasyCam::setAutoDistance(bool bAutoDistance)
 * api/openFrameworks/3d/ofEasyCam.h:43
 */
static int ofEasyCam_setAutoDistance(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    bool bAutoDistance = dub_checkboolean(L, 2);
    self->setAutoDistance(bAutoDistance);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAutoDistance: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAutoDistance: Unknown exception");
  }
  return dub_error(L);
}

/** void ofCamera::setFov(float f)
 * api/openFrameworks/3d/ofCamera.h:23
 */
static int ofEasyCam_setFov(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    float f = dub_checknumber(L, 2);
    self->setFov(f);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFov: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFov: Unknown exception");
  }
  return dub_error(L);
}

/** void ofCamera::setNearClip(float f)
 * api/openFrameworks/3d/ofCamera.h:24
 */
static int ofEasyCam_setNearClip(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    float f = dub_checknumber(L, 2);
    self->setNearClip(f);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setNearClip: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setNearClip: Unknown exception");
  }
  return dub_error(L);
}

/** void ofCamera::setFarClip(float f)
 * api/openFrameworks/3d/ofCamera.h:25
 */
static int ofEasyCam_setFarClip(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    float f = dub_checknumber(L, 2);
    self->setFarClip(f);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFarClip: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFarClip: Unknown exception");
  }
  return dub_error(L);
}

/** void ofCamera::setLensOffset(const ofVec2f &lensOffset)
 * api/openFrameworks/3d/ofCamera.h:26
 */
static int ofEasyCam_setLensOffset(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    ofVec2f *lensOffset = *((ofVec2f **)dub_checksdata(L, 2, "ofVec2f"));
    self->setLensOffset(*lensOffset);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setLensOffset: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setLensOffset: Unknown exception");
  }
  return dub_error(L);
}

/** void ofCamera::setAspectRatio(float aspectRatio)
 * api/openFrameworks/3d/ofCamera.h:27
 */
static int ofEasyCam_setAspectRatio(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    float aspectRatio = dub_checknumber(L, 2);
    self->setAspectRatio(aspectRatio);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAspectRatio: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAspectRatio: Unknown exception");
  }
  return dub_error(L);
}

/** void ofCamera::setForceAspectRatio(bool forceAspectRatio)
 * api/openFrameworks/3d/ofCamera.h:28
 */
static int ofEasyCam_setForceAspectRatio(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    bool forceAspectRatio = dub_checkboolean(L, 2);
    self->setForceAspectRatio(forceAspectRatio);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setForceAspectRatio: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setForceAspectRatio: Unknown exception");
  }
  return dub_error(L);
}

/** float ofCamera::getFov() const
 * api/openFrameworks/3d/ofCamera.h:30
 */
static int ofEasyCam_getFov(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    lua_pushnumber(L, self->getFov());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getFov: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getFov: Unknown exception");
  }
  return dub_error(L);
}

/** float ofCamera::getNearClip() const
 * api/openFrameworks/3d/ofCamera.h:31
 */
static int ofEasyCam_getNearClip(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    lua_pushnumber(L, self->getNearClip());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNearClip: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNearClip: Unknown exception");
  }
  return dub_error(L);
}

/** float ofCamera::getFarClip() const
 * api/openFrameworks/3d/ofCamera.h:32
 */
static int ofEasyCam_getFarClip(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    lua_pushnumber(L, self->getFarClip());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getFarClip: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getFarClip: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec2f ofCamera::getLensOffset() const
 * api/openFrameworks/3d/ofCamera.h:33
 */
static int ofEasyCam_getLensOffset(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, new ofVec2f(self->getLensOffset()), "ofVec2f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLensOffset: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLensOffset: Unknown exception");
  }
  return dub_error(L);
}

/** void ofCamera::setupPerspective(bool vFlip=true, float fov=60, float nearDist=0, float farDist=0, const ofVec2f &lensOffset=ofVec2f(0.0f, 0.0f))
 * api/openFrameworks/3d/ofCamera.h:35
 */
static int ofEasyCam_setupPerspective(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      bool vFlip = dub_checkboolean(L, 2);
      float fov = dub_checknumber(L, 3);
      float nearDist = dub_checknumber(L, 4);
      float farDist = dub_checknumber(L, 5);
      ofVec2f *lensOffset = *((ofVec2f **)dub_checksdata(L, 6, "ofVec2f"));
      self->setupPerspective(vFlip, fov, nearDist, farDist, *lensOffset);
      return 0;
    } else if (top__ >= 5) {
      bool vFlip = dub_checkboolean(L, 2);
      float fov = dub_checknumber(L, 3);
      float nearDist = dub_checknumber(L, 4);
      float farDist = dub_checknumber(L, 5);
      self->setupPerspective(vFlip, fov, nearDist, farDist);
      return 0;
    } else if (top__ >= 4) {
      bool vFlip = dub_checkboolean(L, 2);
      float fov = dub_checknumber(L, 3);
      float nearDist = dub_checknumber(L, 4);
      self->setupPerspective(vFlip, fov, nearDist);
      return 0;
    } else if (top__ >= 3) {
      bool vFlip = dub_checkboolean(L, 2);
      float fov = dub_checknumber(L, 3);
      self->setupPerspective(vFlip, fov);
      return 0;
    } else if (top__ >= 2) {
      bool vFlip = dub_checkboolean(L, 2);
      self->setupPerspective(vFlip);
      return 0;
    } else {
      self->setupPerspective();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setupPerspective: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setupPerspective: Unknown exception");
  }
  return dub_error(L);
}

/** void ofCamera::setupOffAxisViewPortal(const ofVec3f &topLeft, const ofVec3f &bottomLeft, const ofVec3f &bottomRight)
 * api/openFrameworks/3d/ofCamera.h:36
 */
static int ofEasyCam_setupOffAxisViewPortal(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    ofVec3f *topLeft = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
    ofVec3f *bottomLeft = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
    ofVec3f *bottomRight = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
    self->setupOffAxisViewPortal(*topLeft, *bottomLeft, *bottomRight);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setupOffAxisViewPortal: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setupOffAxisViewPortal: Unknown exception");
  }
  return dub_error(L);
}

/** void ofCamera::enableOrtho()
 * api/openFrameworks/3d/ofCamera.h:38
 */
static int ofEasyCam_enableOrtho(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    self->enableOrtho();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableOrtho: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableOrtho: Unknown exception");
  }
  return dub_error(L);
}

/** void ofCamera::disableOrtho()
 * api/openFrameworks/3d/ofCamera.h:39
 */
static int ofEasyCam_disableOrtho(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    self->disableOrtho();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disableOrtho: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disableOrtho: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofCamera::getOrtho() const
 * api/openFrameworks/3d/ofCamera.h:40
 */
static int ofEasyCam_getOrtho(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    lua_pushboolean(L, self->getOrtho());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getOrtho: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getOrtho: Unknown exception");
  }
  return dub_error(L);
}

/** float ofCamera::getImagePlaneDistance(ofRectangle viewport=ofGetCurrentViewport()) const
 * api/openFrameworks/3d/ofCamera.h:42
 */
static int ofEasyCam_getImagePlaneDistance(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      ofRectangle *viewport = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
      lua_pushnumber(L, self->getImagePlaneDistance(*viewport));
      return 1;
    } else {
      lua_pushnumber(L, self->getImagePlaneDistance());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "getImagePlaneDistance: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getImagePlaneDistance: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofCamera::end()
 * api/openFrameworks/3d/ofCamera.h:46
 */
static int ofEasyCam_end(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    self->end();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "end: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "end: Unknown exception");
  }
  return dub_error(L);
}

/** ofMatrix4x4 ofCamera::getProjectionMatrix(ofRectangle viewport=ofGetCurrentViewport())
 * api/openFrameworks/3d/ofCamera.h:49
 */
static int ofEasyCam_getProjectionMatrix(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      ofRectangle *viewport = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
      dub_pushudata(L, new ofMatrix4x4(self->getProjectionMatrix(*viewport)), "ofMatrix4x4", true);
      return 1;
    } else {
      dub_pushudata(L, new ofMatrix4x4(self->getProjectionMatrix()), "ofMatrix4x4", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "getProjectionMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getProjectionMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** ofMatrix4x4 ofCamera::getModelViewMatrix()
 * api/openFrameworks/3d/ofCamera.h:50
 */
static int ofEasyCam_getModelViewMatrix(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, new ofMatrix4x4(self->getModelViewMatrix()), "ofMatrix4x4", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getModelViewMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getModelViewMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** ofMatrix4x4 ofCamera::getModelViewProjectionMatrix(ofRectangle viewport=ofGetCurrentViewport())
 * api/openFrameworks/3d/ofCamera.h:51
 */
static int ofEasyCam_getModelViewProjectionMatrix(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      ofRectangle *viewport = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
      dub_pushudata(L, new ofMatrix4x4(self->getModelViewProjectionMatrix(*viewport)), "ofMatrix4x4", true);
      return 1;
    } else {
      dub_pushudata(L, new ofMatrix4x4(self->getModelViewProjectionMatrix()), "ofMatrix4x4", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "getModelViewProjectionMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getModelViewProjectionMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofCamera::worldToScreen(ofVec3f WorldXYZ, ofRectangle viewport=ofGetCurrentViewport())
 * api/openFrameworks/3d/ofCamera.h:54
 */
static int ofEasyCam_worldToScreen(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofVec3f *WorldXYZ = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofRectangle *viewport = *((ofRectangle **)dub_checksdata(L, 3, "ofRectangle"));
      dub_pushudata(L, new ofVec3f(self->worldToScreen(*WorldXYZ, *viewport)), "ofVec3f", true);
      return 1;
    } else {
      ofVec3f *WorldXYZ = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      dub_pushudata(L, new ofVec3f(self->worldToScreen(*WorldXYZ)), "ofVec3f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "worldToScreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "worldToScreen: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofCamera::screenToWorld(ofVec3f ScreenXYZ, ofRectangle viewport=ofGetCurrentViewport())
 * api/openFrameworks/3d/ofCamera.h:55
 */
static int ofEasyCam_screenToWorld(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofVec3f *ScreenXYZ = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofRectangle *viewport = *((ofRectangle **)dub_checksdata(L, 3, "ofRectangle"));
      dub_pushudata(L, new ofVec3f(self->screenToWorld(*ScreenXYZ, *viewport)), "ofVec3f", true);
      return 1;
    } else {
      ofVec3f *ScreenXYZ = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      dub_pushudata(L, new ofVec3f(self->screenToWorld(*ScreenXYZ)), "ofVec3f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "screenToWorld: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "screenToWorld: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofCamera::worldToCamera(ofVec3f WorldXYZ, ofRectangle viewport=ofGetCurrentViewport())
 * api/openFrameworks/3d/ofCamera.h:56
 */
static int ofEasyCam_worldToCamera(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofVec3f *WorldXYZ = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofRectangle *viewport = *((ofRectangle **)dub_checksdata(L, 3, "ofRectangle"));
      dub_pushudata(L, new ofVec3f(self->worldToCamera(*WorldXYZ, *viewport)), "ofVec3f", true);
      return 1;
    } else {
      ofVec3f *WorldXYZ = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      dub_pushudata(L, new ofVec3f(self->worldToCamera(*WorldXYZ)), "ofVec3f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "worldToCamera: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "worldToCamera: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofCamera::cameraToWorld(ofVec3f CameraXYZ, ofRectangle viewport=ofGetCurrentViewport())
 * api/openFrameworks/3d/ofCamera.h:57
 */
static int ofEasyCam_cameraToWorld(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofVec3f *CameraXYZ = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofRectangle *viewport = *((ofRectangle **)dub_checksdata(L, 3, "ofRectangle"));
      dub_pushudata(L, new ofVec3f(self->cameraToWorld(*CameraXYZ, *viewport)), "ofVec3f", true);
      return 1;
    } else {
      ofVec3f *CameraXYZ = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      dub_pushudata(L, new ofVec3f(self->cameraToWorld(*CameraXYZ)), "ofVec3f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "cameraToWorld: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "cameraToWorld: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setParent(ofNode &parent)
 * api/openFrameworks/3d/ofNode.h:26
 */
static int ofEasyCam_setParent(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    ofNode *parent = *((ofNode **)dub_checksdata(L, 2, "ofNode"));
    self->setParent(*parent);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setParent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setParent: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::clearParent()
 * api/openFrameworks/3d/ofNode.h:27
 */
static int ofEasyCam_clearParent(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    self->clearParent();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearParent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearParent: Unknown exception");
  }
  return dub_error(L);
}

/** ofNode* ofNode::getParent() const
 * api/openFrameworks/3d/ofNode.h:28
 */
static int ofEasyCam_getParent(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    ofNode *retval__ = self->getParent();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "ofNode", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getParent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getParent: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getPosition() const
 * api/openFrameworks/3d/ofNode.h:34
 */
static int ofEasyCam_getPosition(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, new ofVec3f(self->getPosition()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPosition: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getX() const
 * api/openFrameworks/3d/ofNode.h:35
 */
static int ofEasyCam_getX(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    lua_pushnumber(L, self->getX());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getX: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getX: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getY() const
 * api/openFrameworks/3d/ofNode.h:36
 */
static int ofEasyCam_getY(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    lua_pushnumber(L, self->getY());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getY: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getY: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getZ() const
 * api/openFrameworks/3d/ofNode.h:37
 */
static int ofEasyCam_getZ(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    lua_pushnumber(L, self->getZ());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getZ: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getZ: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getXAxis() const
 * api/openFrameworks/3d/ofNode.h:39
 */
static int ofEasyCam_getXAxis(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, new ofVec3f(self->getXAxis()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getXAxis: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getXAxis: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getYAxis() const
 * api/openFrameworks/3d/ofNode.h:40
 */
static int ofEasyCam_getYAxis(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, new ofVec3f(self->getYAxis()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getYAxis: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getYAxis: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getZAxis() const
 * api/openFrameworks/3d/ofNode.h:41
 */
static int ofEasyCam_getZAxis(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, new ofVec3f(self->getZAxis()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getZAxis: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getZAxis: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getSideDir() const
 * api/openFrameworks/3d/ofNode.h:43
 */
static int ofEasyCam_getSideDir(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, new ofVec3f(self->getSideDir()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSideDir: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSideDir: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getLookAtDir() const
 * api/openFrameworks/3d/ofNode.h:44
 */
static int ofEasyCam_getLookAtDir(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, new ofVec3f(self->getLookAtDir()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLookAtDir: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLookAtDir: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getUpDir() const
 * api/openFrameworks/3d/ofNode.h:45
 */
static int ofEasyCam_getUpDir(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, new ofVec3f(self->getUpDir()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUpDir: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUpDir: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getPitch() const
 * api/openFrameworks/3d/ofNode.h:47
 */
static int ofEasyCam_getPitch(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    lua_pushnumber(L, self->getPitch());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPitch: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPitch: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getHeading() const
 * api/openFrameworks/3d/ofNode.h:48
 */
static int ofEasyCam_getHeading(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    lua_pushnumber(L, self->getHeading());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getHeading: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getHeading: Unknown exception");
  }
  return dub_error(L);
}

/** float ofNode::getRoll() const
 * api/openFrameworks/3d/ofNode.h:49
 */
static int ofEasyCam_getRoll(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    lua_pushnumber(L, self->getRoll());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRoll: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRoll: Unknown exception");
  }
  return dub_error(L);
}

/** ofQuaternion ofNode::getOrientationQuat() const
 * api/openFrameworks/3d/ofNode.h:51
 */
static int ofEasyCam_getOrientationQuat(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, new ofQuaternion(self->getOrientationQuat()), "ofQuaternion", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getOrientationQuat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getOrientationQuat: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getOrientationEuler() const
 * api/openFrameworks/3d/ofNode.h:52
 */
static int ofEasyCam_getOrientationEuler(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, new ofVec3f(self->getOrientationEuler()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getOrientationEuler: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getOrientationEuler: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getScale() const
 * api/openFrameworks/3d/ofNode.h:53
 */
static int ofEasyCam_getScale(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, new ofVec3f(self->getScale()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getScale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getScale: Unknown exception");
  }
  return dub_error(L);
}

/** const ofMatrix4x4& ofNode::getLocalTransformMatrix() const
 * api/openFrameworks/3d/ofNode.h:55
 */
static int ofEasyCam_getLocalTransformMatrix(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, const_cast<ofMatrix4x4*>(&self->getLocalTransformMatrix()), "ofMatrix4x4", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLocalTransformMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLocalTransformMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** ofMatrix4x4 ofNode::getGlobalTransformMatrix() const
 * api/openFrameworks/3d/ofNode.h:60
 */
static int ofEasyCam_getGlobalTransformMatrix(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, new ofMatrix4x4(self->getGlobalTransformMatrix()), "ofMatrix4x4", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGlobalTransformMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGlobalTransformMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getGlobalPosition() const
 * api/openFrameworks/3d/ofNode.h:61
 */
static int ofEasyCam_getGlobalPosition(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, new ofVec3f(self->getGlobalPosition()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGlobalPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGlobalPosition: Unknown exception");
  }
  return dub_error(L);
}

/** ofQuaternion ofNode::getGlobalOrientation() const
 * api/openFrameworks/3d/ofNode.h:62
 */
static int ofEasyCam_getGlobalOrientation(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, new ofQuaternion(self->getGlobalOrientation()), "ofQuaternion", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGlobalOrientation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGlobalOrientation: Unknown exception");
  }
  return dub_error(L);
}

/** ofVec3f ofNode::getGlobalScale() const
 * api/openFrameworks/3d/ofNode.h:63
 */
static int ofEasyCam_getGlobalScale(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    dub_pushudata(L, new ofVec3f(self->getGlobalScale()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGlobalScale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGlobalScale: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setTransformMatrix(const ofMatrix4x4 &m44)
 * api/openFrameworks/3d/ofNode.h:70
 */
static int ofEasyCam_setTransformMatrix(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    ofMatrix4x4 *m44 = *((ofMatrix4x4 **)dub_checksdata(L, 2, "ofMatrix4x4"));
    self->setTransformMatrix(*m44);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setTransformMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setTransformMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setPosition(float px, float py, float pz)
 * api/openFrameworks/3d/ofNode.h:73
 */
static int ofEasyCam_setPosition(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float px = dub_checknumber(L, 2);
      float py = dub_checknumber(L, 3);
      float pz = dub_checknumber(L, 4);
      self->setPosition(px, py, pz);
      return 0;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->setPosition(*p);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setPosition: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setGlobalPosition(float px, float py, float pz)
 * api/openFrameworks/3d/ofNode.h:76
 */
static int ofEasyCam_setGlobalPosition(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float px = dub_checknumber(L, 2);
      float py = dub_checknumber(L, 3);
      float pz = dub_checknumber(L, 4);
      self->setGlobalPosition(px, py, pz);
      return 0;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->setGlobalPosition(*p);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setGlobalPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setGlobalPosition: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setOrientation(const ofQuaternion &q)
 * api/openFrameworks/3d/ofNode.h:81
 */
static int ofEasyCam_setOrientation(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofQuaternion", type__)) ) {
      ofQuaternion *q = *((ofQuaternion **)ptr2__);
      self->setOrientation(*q);
      return 0;
    } else {
      ofVec3f *eulerAngles = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->setOrientation(*eulerAngles);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setOrientation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setOrientation: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setGlobalOrientation(const ofQuaternion &q)
 * api/openFrameworks/3d/ofNode.h:85
 */
static int ofEasyCam_setGlobalOrientation(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    ofQuaternion *q = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
    self->setGlobalOrientation(*q);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setGlobalOrientation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setGlobalOrientation: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::setScale(float s)
 * api/openFrameworks/3d/ofNode.h:89
 */
static int ofEasyCam_setScale(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float sx = dub_checknumber(L, 2);
      float sy = dub_checknumber(L, 3);
      float sz = dub_checknumber(L, 4);
      self->setScale(sx, sy, sz);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float s = dub_checknumber(L, 2);
        self->setScale(s);
        return 0;
      } else {
        ofVec3f *s = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
        self->setScale(*s);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setScale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setScale: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::move(float x, float y, float z)
 * api/openFrameworks/3d/ofNode.h:95
 */
static int ofEasyCam_move(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      self->move(x, y, z);
      return 0;
    } else {
      ofVec3f *offset = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->move(*offset);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "move: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "move: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::truck(float amount)
 * api/openFrameworks/3d/ofNode.h:97
 */
static int ofEasyCam_truck(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    float amount = dub_checknumber(L, 2);
    self->truck(amount);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "truck: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "truck: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::boom(float amount)
 * api/openFrameworks/3d/ofNode.h:98
 */
static int ofEasyCam_boom(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    float amount = dub_checknumber(L, 2);
    self->boom(amount);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "boom: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "boom: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::dolly(float amount)
 * api/openFrameworks/3d/ofNode.h:99
 */
static int ofEasyCam_dolly(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    float amount = dub_checknumber(L, 2);
    self->dolly(amount);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "dolly: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "dolly: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::tilt(float degrees)
 * api/openFrameworks/3d/ofNode.h:103
 */
static int ofEasyCam_tilt(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    float degrees = dub_checknumber(L, 2);
    self->tilt(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "tilt: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "tilt: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::pan(float degrees)
 * api/openFrameworks/3d/ofNode.h:104
 */
static int ofEasyCam_pan(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    float degrees = dub_checknumber(L, 2);
    self->pan(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "pan: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "pan: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::roll(float degrees)
 * api/openFrameworks/3d/ofNode.h:105
 */
static int ofEasyCam_roll(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    float degrees = dub_checknumber(L, 2);
    self->roll(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "roll: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "roll: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::rotate(const ofQuaternion &q)
 * api/openFrameworks/3d/ofNode.h:106
 */
static int ofEasyCam_rotate(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float degrees = dub_checknumber(L, 2);
      float vx = dub_checknumber(L, 3);
      float vy = dub_checknumber(L, 4);
      float vz = dub_checknumber(L, 5);
      self->rotate(degrees, vx, vy, vz);
      return 0;
    } else if (top__ >= 3) {
      float degrees = dub_checknumber(L, 2);
      ofVec3f *v = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      self->rotate(degrees, *v);
      return 0;
    } else {
      ofQuaternion *q = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
      self->rotate(*q);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::rotateAround(const ofQuaternion &q, const ofVec3f &point)
 * api/openFrameworks/3d/ofNode.h:110
 */
static int ofEasyCam_rotateAround(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float degrees = dub_checknumber(L, 2);
      ofVec3f *axis = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      ofVec3f *point = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
      self->rotateAround(degrees, *axis, *point);
      return 0;
    } else {
      ofQuaternion *q = *((ofQuaternion **)dub_checksdata(L, 2, "ofQuaternion"));
      ofVec3f *point = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      self->rotateAround(*q, *point);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotateAround: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotateAround: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::lookAt(const ofVec3f &lookAtPosition, ofVec3f upVector=ofVec3f(0, 1, 0))
 * api/openFrameworks/3d/ofNode.h:114
 */
static int ofEasyCam_lookAt(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
        ofVec3f *lookAtPosition = *((ofVec3f **)ptr2__);
        ofVec3f *upVector = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
        self->lookAt(*lookAtPosition, *upVector);
        return 0;
      } else {
        ofNode *lookAtNode = *((ofNode **)dub_checksdata(L, 2, "ofNode"));
        ofVec3f *upVector = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
        self->lookAt(*lookAtNode, *upVector);
        return 0;
      }
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofVec3f", type__)) ) {
        ofVec3f *lookAtPosition = *((ofVec3f **)ptr2__);
        self->lookAt(*lookAtPosition);
        return 0;
      } else {
        ofNode *lookAtNode = *((ofNode **)dub_checksdata(L, 2, "ofNode"));
        self->lookAt(*lookAtNode);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "lookAt: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "lookAt: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::orbit(float longitude, float latitude, float radius, const ofVec3f &centerPoint=ofVec3f(0, 0, 0))
 * api/openFrameworks/3d/ofNode.h:119
 */
static int ofEasyCam_orbit(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      int type__ = lua_type(L, 5);
      void **ptr5__;
      if ( (ptr5__ = dub_issdata(L, 5, "ofVec3f", type__)) ) {
        float longitude = dub_checknumber(L, 2);
        float latitude = dub_checknumber(L, 3);
        float radius = dub_checknumber(L, 4);
        ofVec3f *centerPoint = *((ofVec3f **)ptr5__);
        self->orbit(longitude, latitude, radius, *centerPoint);
        return 0;
      } else {
        float longitude = dub_checknumber(L, 2);
        float latitude = dub_checknumber(L, 3);
        float radius = dub_checknumber(L, 4);
        ofNode *centerNode = *((ofNode **)dub_checksdata(L, 5, "ofNode"));
        self->orbit(longitude, latitude, radius, *centerNode);
        return 0;
      }
    } else {
      float longitude = dub_checknumber(L, 2);
      float latitude = dub_checknumber(L, 3);
      float radius = dub_checknumber(L, 4);
      self->orbit(longitude, latitude, radius);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "orbit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "orbit: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::transformGL() const
 * api/openFrameworks/3d/ofNode.h:127
 */
static int ofEasyCam_transformGL(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    self->transformGL();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "transformGL: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "transformGL: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::restoreTransformGL() const
 * api/openFrameworks/3d/ofNode.h:128
 */
static int ofEasyCam_restoreTransformGL(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    self->restoreTransformGL();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "restoreTransformGL: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "restoreTransformGL: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::resetTransform()
 * api/openFrameworks/3d/ofNode.h:132
 */
static int ofEasyCam_resetTransform(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    self->resetTransform();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "resetTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "resetTransform: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofNode::customDraw()
 * api/openFrameworks/3d/ofNode.h:136
 */
static int ofEasyCam_customDraw(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    self->customDraw();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "customDraw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "customDraw: Unknown exception");
  }
  return dub_error(L);
}

/** void ofNode::draw()
 * api/openFrameworks/3d/ofNode.h:145
 */
static int ofEasyCam_draw(lua_State *L) {
  try {
    ofEasyCam *self = *((ofEasyCam **)dub_checksdata(L, 1, "ofEasyCam"));
    self->draw();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "draw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "draw: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofEasyCam___tostring(lua_State *L) {
  ofEasyCam *self = *((ofEasyCam **)dub_checksdata_n(L, 1, "ofEasyCam"));
  lua_pushfstring(L, "ofEasyCam: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofEasyCam_member_methods[] = {
  { "_cast_"       , ofEasyCam__cast_     },
  { "new"          , ofEasyCam_ofEasyCam  },
  { "__gc"         , ofEasyCam__ofEasyCam },
  { "begin"        , ofEasyCam_begin      },
  { "reset"        , ofEasyCam_reset      },
  { "setTarget"    , ofEasyCam_setTarget  },
  { "getTarget"    , ofEasyCam_getTarget  },
  { "setDistance"  , ofEasyCam_setDistance },
  { "getDistance"  , ofEasyCam_getDistance },
  { "setDrag"      , ofEasyCam_setDrag    },
  { "getDrag"      , ofEasyCam_getDrag    },
  { "setTranslationKey", ofEasyCam_setTranslationKey },
  { "getTranslationKey", ofEasyCam_getTranslationKey },
  { "enableMouseInput", ofEasyCam_enableMouseInput },
  { "disableMouseInput", ofEasyCam_disableMouseInput },
  { "getMouseInputEnabled", ofEasyCam_getMouseInputEnabled },
  { "enableMouseMiddleButton", ofEasyCam_enableMouseMiddleButton },
  { "disableMouseMiddleButton", ofEasyCam_disableMouseMiddleButton },
  { "getMouseMiddleButtonEnabled", ofEasyCam_getMouseMiddleButtonEnabled },
  { "setAutoDistance", ofEasyCam_setAutoDistance },
  { "setFov"       , ofEasyCam_setFov     },
  { "setNearClip"  , ofEasyCam_setNearClip },
  { "setFarClip"   , ofEasyCam_setFarClip },
  { "setLensOffset", ofEasyCam_setLensOffset },
  { "setAspectRatio", ofEasyCam_setAspectRatio },
  { "setForceAspectRatio", ofEasyCam_setForceAspectRatio },
  { "getFov"       , ofEasyCam_getFov     },
  { "getNearClip"  , ofEasyCam_getNearClip },
  { "getFarClip"   , ofEasyCam_getFarClip },
  { "getLensOffset", ofEasyCam_getLensOffset },
  { "setupPerspective", ofEasyCam_setupPerspective },
  { "setupOffAxisViewPortal", ofEasyCam_setupOffAxisViewPortal },
  { "enableOrtho"  , ofEasyCam_enableOrtho },
  { "disableOrtho" , ofEasyCam_disableOrtho },
  { "getOrtho"     , ofEasyCam_getOrtho   },
  { "getImagePlaneDistance", ofEasyCam_getImagePlaneDistance },
  { "finish"          , ofEasyCam_end        },
  { "getProjectionMatrix", ofEasyCam_getProjectionMatrix },
  { "getModelViewMatrix", ofEasyCam_getModelViewMatrix },
  { "getModelViewProjectionMatrix", ofEasyCam_getModelViewProjectionMatrix },
  { "worldToScreen", ofEasyCam_worldToScreen },
  { "screenToWorld", ofEasyCam_screenToWorld },
  { "worldToCamera", ofEasyCam_worldToCamera },
  { "cameraToWorld", ofEasyCam_cameraToWorld },
  { "setParent"    , ofEasyCam_setParent  },
  { "clearParent"  , ofEasyCam_clearParent },
  { "getParent"    , ofEasyCam_getParent  },
  { "getPosition"  , ofEasyCam_getPosition },
  { "getX"         , ofEasyCam_getX       },
  { "getY"         , ofEasyCam_getY       },
  { "getZ"         , ofEasyCam_getZ       },
  { "getXAxis"     , ofEasyCam_getXAxis   },
  { "getYAxis"     , ofEasyCam_getYAxis   },
  { "getZAxis"     , ofEasyCam_getZAxis   },
  { "getSideDir"   , ofEasyCam_getSideDir },
  { "getLookAtDir" , ofEasyCam_getLookAtDir },
  { "getUpDir"     , ofEasyCam_getUpDir   },
  { "getPitch"     , ofEasyCam_getPitch   },
  { "getHeading"   , ofEasyCam_getHeading },
  { "getRoll"      , ofEasyCam_getRoll    },
  { "getOrientationQuat", ofEasyCam_getOrientationQuat },
  { "getOrientationEuler", ofEasyCam_getOrientationEuler },
  { "getScale"     , ofEasyCam_getScale   },
  { "getLocalTransformMatrix", ofEasyCam_getLocalTransformMatrix },
  { "getGlobalTransformMatrix", ofEasyCam_getGlobalTransformMatrix },
  { "getGlobalPosition", ofEasyCam_getGlobalPosition },
  { "getGlobalOrientation", ofEasyCam_getGlobalOrientation },
  { "getGlobalScale", ofEasyCam_getGlobalScale },
  { "setTransformMatrix", ofEasyCam_setTransformMatrix },
  { "setPosition"  , ofEasyCam_setPosition },
  { "setGlobalPosition", ofEasyCam_setGlobalPosition },
  { "setOrientation", ofEasyCam_setOrientation },
  { "setGlobalOrientation", ofEasyCam_setGlobalOrientation },
  { "setScale"     , ofEasyCam_setScale   },
  { "move"         , ofEasyCam_move       },
  { "truck"        , ofEasyCam_truck      },
  { "boom"         , ofEasyCam_boom       },
  { "dolly"        , ofEasyCam_dolly      },
  { "tilt"         , ofEasyCam_tilt       },
  { "pan"          , ofEasyCam_pan        },
  { "roll"         , ofEasyCam_roll       },
  { "rotate"       , ofEasyCam_rotate     },
  { "rotateAround" , ofEasyCam_rotateAround },
  { "lookAt"       , ofEasyCam_lookAt     },
  { "orbit"        , ofEasyCam_orbit      },
  { "transformGL"  , ofEasyCam_transformGL },
  { "restoreTransformGL", ofEasyCam_restoreTransformGL },
  { "resetTransform", ofEasyCam_resetTransform },
  { "customDraw"   , ofEasyCam_customDraw },
  { "draw"         , ofEasyCam_draw       },
  { "__tostring"   , ofEasyCam___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofEasyCam(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofEasyCam");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofEasyCam_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofEasyCam", "ofEasyCam");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
