/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofBaseRenderer
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/types/ofBaseTypes.h"


/** virtual ofBaseRenderer::~ofBaseRenderer()
 * api/openFrameworks/types/ofBaseTypes.h:278
 */
static int ofBaseRenderer__ofBaseRenderer(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofBaseRenderer"));
    if (userdata->gc) {
      ofBaseRenderer *self = (ofBaseRenderer *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** virtual string ofBaseRenderer::getType()=0
 * api/openFrameworks/types/ofBaseTypes.h:280
 */
static int ofBaseRenderer_getType(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    dub_pushudata(L, new string(self->getType()), "string", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getType: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::update()=0
 * api/openFrameworks/types/ofBaseTypes.h:282
 */
static int ofBaseRenderer_update(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    self->update();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "update: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "update: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::draw(ofPolyline &poly)=0
 * api/openFrameworks/types/ofBaseTypes.h:284
 */
static int ofBaseRenderer_draw(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 11) {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofImage", type__)) ) {
        ofImage *image = *((ofImage **)ptr2__);
        float x = dub_checknumber(L, 3);
        float y = dub_checknumber(L, 4);
        float z = dub_checknumber(L, 5);
        float w = dub_checknumber(L, 6);
        float h = dub_checknumber(L, 7);
        float sx = dub_checknumber(L, 8);
        float sy = dub_checknumber(L, 9);
        float sw = dub_checknumber(L, 10);
        float sh = dub_checknumber(L, 11);
        self->draw(*image, x, y, z, w, h, sx, sy, sw, sh);
        return 0;
      } else if ( (ptr2__ = dub_issdata(L, 2, "ofShortImage", type__)) ) {
        ofShortImage *image = *((ofShortImage **)ptr2__);
        float x = dub_checknumber(L, 3);
        float y = dub_checknumber(L, 4);
        float z = dub_checknumber(L, 5);
        float w = dub_checknumber(L, 6);
        float h = dub_checknumber(L, 7);
        float sx = dub_checknumber(L, 8);
        float sy = dub_checknumber(L, 9);
        float sw = dub_checknumber(L, 10);
        float sh = dub_checknumber(L, 11);
        self->draw(*image, x, y, z, w, h, sx, sy, sw, sh);
        return 0;
      } else {
        ofFloatImage *image = *((ofFloatImage **)dub_checksdata(L, 2, "ofFloatImage"));
        float x = dub_checknumber(L, 3);
        float y = dub_checknumber(L, 4);
        float z = dub_checknumber(L, 5);
        float w = dub_checknumber(L, 6);
        float h = dub_checknumber(L, 7);
        float sx = dub_checknumber(L, 8);
        float sy = dub_checknumber(L, 9);
        float sw = dub_checknumber(L, 10);
        float sh = dub_checknumber(L, 11);
        self->draw(*image, x, y, z, w, h, sx, sy, sw, sh);
        return 0;
      }
    } else if (top__ >= 6) {
      ofMesh *vertexData = *((ofMesh **)dub_checksdata(L, 2, "ofMesh"));
      ofPolyRenderMode renderType = (ofPolyRenderMode)dub_checkint(L, 3);
      bool useColors = dub_checkboolean(L, 4);
      bool useTextures = dub_checkboolean(L, 5);
      bool useNormals = dub_checkboolean(L, 6);
      self->draw(*vertexData, renderType, useColors, useTextures, useNormals);
      return 0;
    } else if (top__ >= 5) {
      ofMesh *vertexData = *((ofMesh **)dub_checksdata(L, 2, "ofMesh"));
      bool useColors = dub_checkboolean(L, 3);
      bool useTextures = dub_checkboolean(L, 4);
      bool useNormals = dub_checkboolean(L, 5);
      self->draw(*vertexData, useColors, useTextures, useNormals);
      return 0;
    } else if (top__ >= 3) {
      vector< ofPoint > *vertexData = *((vector< ofPoint > **)dub_checksdata(L, 2, "vector< ofPoint >"));
      ofPrimitiveMode drawMode = (ofPrimitiveMode)dub_checkint(L, 3);
      self->draw(*vertexData, drawMode);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofPath", type__)) ) {
        ofPath *shape = *((ofPath **)ptr2__);
        self->draw(*shape);
        return 0;
      } else {
        ofPolyline *poly = *((ofPolyline **)dub_checksdata(L, 2, "ofPolyline"));
        self->draw(*poly);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "draw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "draw: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::pushView()
 * api/openFrameworks/types/ofBaseTypes.h:295
 */
static int ofBaseRenderer_pushView(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    self->pushView();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "pushView: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "pushView: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::popView()
 * api/openFrameworks/types/ofBaseTypes.h:296
 */
static int ofBaseRenderer_popView(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    self->popView();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "popView: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "popView: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::viewport(ofRectangle viewport)
 * api/openFrameworks/types/ofBaseTypes.h:301
 */
static int ofBaseRenderer_viewport(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float width = dub_checknumber(L, 4);
      float height = dub_checknumber(L, 5);
      bool invertY = dub_checkboolean(L, 6);
      self->viewport(x, y, width, height, invertY);
      return 0;
    } else if (top__ >= 5) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float width = dub_checknumber(L, 4);
      float height = dub_checknumber(L, 5);
      self->viewport(x, y, width, height);
      return 0;
    } else if (top__ >= 4) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float width = dub_checknumber(L, 4);
      self->viewport(x, y, width);
      return 0;
    } else if (top__ >= 3) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      self->viewport(x, y);
      return 0;
    } else if (top__ >= 2) {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float x = dub_checknumber(L, 2);
        self->viewport(x);
        return 0;
      } else {
        ofRectangle *viewport = *((ofRectangle **)dub_checksdata(L, 2, "ofRectangle"));
        self->viewport(*viewport);
        return 0;
      }
    } else {
      self->viewport();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "viewport: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "viewport: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::setupScreenPerspective(float width=0, float height=0, ofOrientation orientation=OF_ORIENTATION_UNKNOWN, bool vFlip=true, float fov=60, float nearDist=0, float farDist=0)
 * api/openFrameworks/types/ofBaseTypes.h:303
 */
static int ofBaseRenderer_setupScreenPerspective(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 8) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      bool vFlip = dub_checkboolean(L, 5);
      float fov = dub_checknumber(L, 6);
      float nearDist = dub_checknumber(L, 7);
      float farDist = dub_checknumber(L, 8);
      self->setupScreenPerspective(width, height, orientation, vFlip, fov, nearDist, farDist);
      return 0;
    } else if (top__ >= 7) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      bool vFlip = dub_checkboolean(L, 5);
      float fov = dub_checknumber(L, 6);
      float nearDist = dub_checknumber(L, 7);
      self->setupScreenPerspective(width, height, orientation, vFlip, fov, nearDist);
      return 0;
    } else if (top__ >= 6) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      bool vFlip = dub_checkboolean(L, 5);
      float fov = dub_checknumber(L, 6);
      self->setupScreenPerspective(width, height, orientation, vFlip, fov);
      return 0;
    } else if (top__ >= 5) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      bool vFlip = dub_checkboolean(L, 5);
      self->setupScreenPerspective(width, height, orientation, vFlip);
      return 0;
    } else if (top__ >= 4) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      self->setupScreenPerspective(width, height, orientation);
      return 0;
    } else if (top__ >= 3) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      self->setupScreenPerspective(width, height);
      return 0;
    } else if (top__ >= 2) {
      float width = dub_checknumber(L, 2);
      self->setupScreenPerspective(width);
      return 0;
    } else {
      self->setupScreenPerspective();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setupScreenPerspective: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setupScreenPerspective: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::setupScreenOrtho(float width=0, float height=0, ofOrientation orientation=OF_ORIENTATION_UNKNOWN, bool vFlip=true, float nearDist=-1, float farDist=1)
 * api/openFrameworks/types/ofBaseTypes.h:304
 */
static int ofBaseRenderer_setupScreenOrtho(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 7) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      bool vFlip = dub_checkboolean(L, 5);
      float nearDist = dub_checknumber(L, 6);
      float farDist = dub_checknumber(L, 7);
      self->setupScreenOrtho(width, height, orientation, vFlip, nearDist, farDist);
      return 0;
    } else if (top__ >= 6) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      bool vFlip = dub_checkboolean(L, 5);
      float nearDist = dub_checknumber(L, 6);
      self->setupScreenOrtho(width, height, orientation, vFlip, nearDist);
      return 0;
    } else if (top__ >= 5) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      bool vFlip = dub_checkboolean(L, 5);
      self->setupScreenOrtho(width, height, orientation, vFlip);
      return 0;
    } else if (top__ >= 4) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      ofOrientation orientation = (ofOrientation)dub_checkint(L, 4);
      self->setupScreenOrtho(width, height, orientation);
      return 0;
    } else if (top__ >= 3) {
      float width = dub_checknumber(L, 2);
      float height = dub_checknumber(L, 3);
      self->setupScreenOrtho(width, height);
      return 0;
    } else if (top__ >= 2) {
      float width = dub_checknumber(L, 2);
      self->setupScreenOrtho(width);
      return 0;
    } else {
      self->setupScreenOrtho();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setupScreenOrtho: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setupScreenOrtho: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofRectangle ofBaseRenderer::getCurrentViewport()
 * api/openFrameworks/types/ofBaseTypes.h:305
 */
static int ofBaseRenderer_getCurrentViewport(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    dub_pushudata(L, new ofRectangle(self->getCurrentViewport()), "ofRectangle", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCurrentViewport: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCurrentViewport: Unknown exception");
  }
  return dub_error(L);
}

/** virtual int ofBaseRenderer::getViewportWidth()
 * api/openFrameworks/types/ofBaseTypes.h:306
 */
static int ofBaseRenderer_getViewportWidth(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    lua_pushnumber(L, self->getViewportWidth());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getViewportWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getViewportWidth: Unknown exception");
  }
  return dub_error(L);
}

/** virtual int ofBaseRenderer::getViewportHeight()
 * api/openFrameworks/types/ofBaseTypes.h:307
 */
static int ofBaseRenderer_getViewportHeight(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    lua_pushnumber(L, self->getViewportHeight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getViewportHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getViewportHeight: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::setCoordHandedness(ofHandednessType handedness)
 * api/openFrameworks/types/ofBaseTypes.h:309
 */
static int ofBaseRenderer_setCoordHandedness(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    ofHandednessType handedness = (ofHandednessType)dub_checkint(L, 2);
    self->setCoordHandedness(handedness);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCoordHandedness: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCoordHandedness: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofHandednessType ofBaseRenderer::getCoordHandedness()
 * api/openFrameworks/types/ofBaseTypes.h:310
 */
static int ofBaseRenderer_getCoordHandedness(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    lua_pushnumber(L, self->getCoordHandedness());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCoordHandedness: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCoordHandedness: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::pushMatrix()
 * api/openFrameworks/types/ofBaseTypes.h:313
 */
static int ofBaseRenderer_pushMatrix(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    self->pushMatrix();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "pushMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "pushMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::popMatrix()
 * api/openFrameworks/types/ofBaseTypes.h:314
 */
static int ofBaseRenderer_popMatrix(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    self->popMatrix();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "popMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "popMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::translate(float x, float y, float z=0)
 * api/openFrameworks/types/ofBaseTypes.h:315
 */
static int ofBaseRenderer_translate(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      self->translate(x, y, z);
      return 0;
    } else if (top__ >= 3) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      self->translate(x, y);
      return 0;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->translate(*p);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "translate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "translate: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::scale(float xAmnt, float yAmnt, float zAmnt=1)
 * api/openFrameworks/types/ofBaseTypes.h:317
 */
static int ofBaseRenderer_scale(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float xAmnt = dub_checknumber(L, 2);
      float yAmnt = dub_checknumber(L, 3);
      float zAmnt = dub_checknumber(L, 4);
      self->scale(xAmnt, yAmnt, zAmnt);
      return 0;
    } else {
      float xAmnt = dub_checknumber(L, 2);
      float yAmnt = dub_checknumber(L, 3);
      self->scale(xAmnt, yAmnt);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "scale: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "scale: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::rotate(float degrees, float vecX, float vecY, float vecZ)
 * api/openFrameworks/types/ofBaseTypes.h:318
 */
static int ofBaseRenderer_rotate(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float degrees = dub_checknumber(L, 2);
      float vecX = dub_checknumber(L, 3);
      float vecY = dub_checknumber(L, 4);
      float vecZ = dub_checknumber(L, 5);
      self->rotate(degrees, vecX, vecY, vecZ);
      return 0;
    } else {
      float degrees = dub_checknumber(L, 2);
      self->rotate(degrees);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotate: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::rotateX(float degrees)
 * api/openFrameworks/types/ofBaseTypes.h:319
 */
static int ofBaseRenderer_rotateX(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    float degrees = dub_checknumber(L, 2);
    self->rotateX(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotateX: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotateX: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::rotateY(float degrees)
 * api/openFrameworks/types/ofBaseTypes.h:320
 */
static int ofBaseRenderer_rotateY(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    float degrees = dub_checknumber(L, 2);
    self->rotateY(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotateY: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotateY: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::rotateZ(float degrees)
 * api/openFrameworks/types/ofBaseTypes.h:321
 */
static int ofBaseRenderer_rotateZ(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    float degrees = dub_checknumber(L, 2);
    self->rotateZ(degrees);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "rotateZ: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rotateZ: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::matrixMode(ofMatrixMode mode)
 * api/openFrameworks/types/ofBaseTypes.h:323
 */
static int ofBaseRenderer_matrixMode(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    ofMatrixMode mode = (ofMatrixMode)dub_checkint(L, 2);
    self->matrixMode(mode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "matrixMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "matrixMode: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::loadIdentityMatrix(void)
 * api/openFrameworks/types/ofBaseTypes.h:324
 */
static int ofBaseRenderer_loadIdentityMatrix(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    self->loadIdentityMatrix();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "loadIdentityMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "loadIdentityMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::loadMatrix(const ofMatrix4x4 &m)
 * api/openFrameworks/types/ofBaseTypes.h:325
 */
static int ofBaseRenderer_loadMatrix(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "float", type__)) ) {
      float *m = *((float **)ptr2__);
      self->loadMatrix(m);
      return 0;
    } else {
      ofMatrix4x4 *m = *((ofMatrix4x4 **)dub_checksdata(L, 2, "ofMatrix4x4"));
      self->loadMatrix(*m);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "loadMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "loadMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::multMatrix(const ofMatrix4x4 &m)
 * api/openFrameworks/types/ofBaseTypes.h:327
 */
static int ofBaseRenderer_multMatrix(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "float", type__)) ) {
      float *m = *((float **)ptr2__);
      self->multMatrix(m);
      return 0;
    } else {
      ofMatrix4x4 *m = *((ofMatrix4x4 **)dub_checksdata(L, 2, "ofMatrix4x4"));
      self->multMatrix(*m);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "multMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "multMatrix: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::setupGraphicDefaults()
 * api/openFrameworks/types/ofBaseTypes.h:331
 */
static int ofBaseRenderer_setupGraphicDefaults(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    self->setupGraphicDefaults();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setupGraphicDefaults: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setupGraphicDefaults: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::setupScreen()
 * api/openFrameworks/types/ofBaseTypes.h:332
 */
static int ofBaseRenderer_setupScreen(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    self->setupScreen();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setupScreen: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setupScreen: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::setRectMode(ofRectMode mode)=0
 * api/openFrameworks/types/ofBaseTypes.h:335
 */
static int ofBaseRenderer_setRectMode(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    ofRectMode mode = (ofRectMode)dub_checkint(L, 2);
    self->setRectMode(mode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setRectMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setRectMode: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofRectMode ofBaseRenderer::getRectMode()=0
 * api/openFrameworks/types/ofBaseTypes.h:336
 */
static int ofBaseRenderer_getRectMode(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    lua_pushnumber(L, self->getRectMode());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRectMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRectMode: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::setFillMode(ofFillFlag fill)=0
 * api/openFrameworks/types/ofBaseTypes.h:337
 */
static int ofBaseRenderer_setFillMode(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    ofFillFlag fill = (ofFillFlag)dub_checkint(L, 2);
    self->setFillMode(fill);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFillMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFillMode: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofFillFlag ofBaseRenderer::getFillMode()=0
 * api/openFrameworks/types/ofBaseTypes.h:338
 */
static int ofBaseRenderer_getFillMode(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    lua_pushnumber(L, self->getFillMode());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getFillMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getFillMode: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::setLineWidth(float lineWidth)=0
 * api/openFrameworks/types/ofBaseTypes.h:339
 */
static int ofBaseRenderer_setLineWidth(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    float lineWidth = dub_checknumber(L, 2);
    self->setLineWidth(lineWidth);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setLineWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setLineWidth: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::setBlendMode(ofBlendMode blendMode)=0
 * api/openFrameworks/types/ofBaseTypes.h:340
 */
static int ofBaseRenderer_setBlendMode(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    ofBlendMode blendMode = (ofBlendMode)dub_checkint(L, 2);
    self->setBlendMode(blendMode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setBlendMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setBlendMode: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::setLineSmoothing(bool smooth)=0
 * api/openFrameworks/types/ofBaseTypes.h:341
 */
static int ofBaseRenderer_setLineSmoothing(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    bool smooth = dub_checkboolean(L, 2);
    self->setLineSmoothing(smooth);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setLineSmoothing: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setLineSmoothing: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::setCircleResolution(int res)
 * api/openFrameworks/types/ofBaseTypes.h:342
 */
static int ofBaseRenderer_setCircleResolution(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    int res = dub_checkint(L, 2);
    self->setCircleResolution(res);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCircleResolution: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCircleResolution: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::setSphereResolution(int res)
 * api/openFrameworks/types/ofBaseTypes.h:343
 */
static int ofBaseRenderer_setSphereResolution(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    int res = dub_checkint(L, 2);
    self->setSphereResolution(res);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSphereResolution: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSphereResolution: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::enablePointSprites()
 * api/openFrameworks/types/ofBaseTypes.h:344
 */
static int ofBaseRenderer_enablePointSprites(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    self->enablePointSprites();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enablePointSprites: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enablePointSprites: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::disablePointSprites()
 * api/openFrameworks/types/ofBaseTypes.h:345
 */
static int ofBaseRenderer_disablePointSprites(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    self->disablePointSprites();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "disablePointSprites: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "disablePointSprites: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::setColor(int r, int g, int b)
 * api/openFrameworks/types/ofBaseTypes.h:348
 */
static int ofBaseRenderer_setColor(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      int r = dub_checkint(L, 2);
      int g = dub_checkint(L, 3);
      int b = dub_checkint(L, 4);
      int a = dub_checkint(L, 5);
      self->setColor(r, g, b, a);
      return 0;
    } else if (top__ >= 4) {
      int r = dub_checkint(L, 2);
      int g = dub_checkint(L, 3);
      int b = dub_checkint(L, 4);
      self->setColor(r, g, b);
      return 0;
    } else if (top__ >= 3) {
      ofColor *color = *((ofColor **)dub_checksdata(L, 2, "ofColor"));
      int _a = dub_checkint(L, 3);
      self->setColor(*color, _a);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        int gray = dub_checkint(L, 2);
        self->setColor(gray);
        return 0;
      } else {
        ofColor *color = *((ofColor **)dub_checksdata(L, 2, "ofColor"));
        self->setColor(*color);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setColor: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::setHexColor(int hexColor)
 * api/openFrameworks/types/ofBaseTypes.h:353
 */
static int ofBaseRenderer_setHexColor(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    int hexColor = dub_checkint(L, 2);
    self->setHexColor(hexColor);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setHexColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setHexColor: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofFloatColor& ofBaseRenderer::getBgColor()=0
 * api/openFrameworks/types/ofBaseTypes.h:356
 */
static int ofBaseRenderer_getBgColor(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    dub_pushudata(L, &self->getBgColor(), "ofFloatColor", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBgColor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBgColor: Unknown exception");
  }
  return dub_error(L);
}

/** virtual bool ofBaseRenderer::bClearBg()
 * api/openFrameworks/types/ofBaseTypes.h:357
 */
static int ofBaseRenderer_bClearBg(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    lua_pushboolean(L, self->bClearBg());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "bClearBg: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "bClearBg: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::background(const ofColor &c)
 * api/openFrameworks/types/ofBaseTypes.h:358
 */
static int ofBaseRenderer_background(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      int r = dub_checkint(L, 2);
      int g = dub_checkint(L, 3);
      int b = dub_checkint(L, 4);
      int a = dub_checkint(L, 5);
      self->background(r, g, b, a);
      return 0;
    } else if (top__ >= 4) {
      int r = dub_checkint(L, 2);
      int g = dub_checkint(L, 3);
      int b = dub_checkint(L, 4);
      self->background(r, g, b);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float brightness = dub_checknumber(L, 2);
        self->background(brightness);
        return 0;
      } else {
        ofColor *c = *((ofColor **)dub_checksdata(L, 2, "ofColor"));
        self->background(*c);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "background: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "background: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::setBackgroundAuto(bool bManual)
 * api/openFrameworks/types/ofBaseTypes.h:363
 */
static int ofBaseRenderer_setBackgroundAuto(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    bool bManual = dub_checkboolean(L, 2);
    self->setBackgroundAuto(bManual);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setBackgroundAuto: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setBackgroundAuto: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::clear(float r, float g, float b, float a=0)
 * api/openFrameworks/types/ofBaseTypes.h:365
 */
static int ofBaseRenderer_clear(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float r = dub_checknumber(L, 2);
      float g = dub_checknumber(L, 3);
      float b = dub_checknumber(L, 4);
      float a = dub_checknumber(L, 5);
      self->clear(r, g, b, a);
      return 0;
    } else if (top__ >= 4) {
      float r = dub_checknumber(L, 2);
      float g = dub_checknumber(L, 3);
      float b = dub_checknumber(L, 4);
      self->clear(r, g, b);
      return 0;
    } else if (top__ >= 3) {
      float brightness = dub_checknumber(L, 2);
      float a = dub_checknumber(L, 3);
      self->clear(brightness, a);
      return 0;
    } else {
      float brightness = dub_checknumber(L, 2);
      self->clear(brightness);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "clear: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clear: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::clearAlpha()
 * api/openFrameworks/types/ofBaseTypes.h:367
 */
static int ofBaseRenderer_clearAlpha(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    self->clearAlpha();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearAlpha: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearAlpha: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::drawLine(float x1, float y1, float z1, float x2, float y2, float z2)=0
 * api/openFrameworks/types/ofBaseTypes.h:370
 */
static int ofBaseRenderer_drawLine(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    float x1 = dub_checknumber(L, 2);
    float y1 = dub_checknumber(L, 3);
    float z1 = dub_checknumber(L, 4);
    float x2 = dub_checknumber(L, 5);
    float y2 = dub_checknumber(L, 6);
    float z2 = dub_checknumber(L, 7);
    self->drawLine(x1, y1, z1, x2, y2, z2);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawLine: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawLine: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::drawRectangle(float x, float y, float z, float w, float h)=0
 * api/openFrameworks/types/ofBaseTypes.h:371
 */
static int ofBaseRenderer_drawRectangle(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    float z = dub_checknumber(L, 4);
    float w = dub_checknumber(L, 5);
    float h = dub_checknumber(L, 6);
    self->drawRectangle(x, y, z, w, h);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawRectangle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawRectangle: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::drawTriangle(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3)=0
 * api/openFrameworks/types/ofBaseTypes.h:372
 */
static int ofBaseRenderer_drawTriangle(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    float x1 = dub_checknumber(L, 2);
    float y1 = dub_checknumber(L, 3);
    float z1 = dub_checknumber(L, 4);
    float x2 = dub_checknumber(L, 5);
    float y2 = dub_checknumber(L, 6);
    float z2 = dub_checknumber(L, 7);
    float x3 = dub_checknumber(L, 8);
    float y3 = dub_checknumber(L, 9);
    float z3 = dub_checknumber(L, 10);
    self->drawTriangle(x1, y1, z1, x2, y2, z2, x3, y3, z3);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawTriangle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawTriangle: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::drawCircle(float x, float y, float z, float radius)=0
 * api/openFrameworks/types/ofBaseTypes.h:373
 */
static int ofBaseRenderer_drawCircle(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    float z = dub_checknumber(L, 4);
    float radius = dub_checknumber(L, 5);
    self->drawCircle(x, y, z, radius);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawCircle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawCircle: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::drawSphere(float x, float y, float z, float radius)=0
 * api/openFrameworks/types/ofBaseTypes.h:374
 */
static int ofBaseRenderer_drawSphere(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    float z = dub_checknumber(L, 4);
    float radius = dub_checknumber(L, 5);
    self->drawSphere(x, y, z, radius);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawSphere: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawSphere: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::drawEllipse(float x, float y, float z, float width, float height)=0
 * api/openFrameworks/types/ofBaseTypes.h:375
 */
static int ofBaseRenderer_drawEllipse(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    float z = dub_checknumber(L, 4);
    float width = dub_checknumber(L, 5);
    float height = dub_checknumber(L, 6);
    self->drawEllipse(x, y, z, width, height);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawEllipse: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawEllipse: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseRenderer::drawString(string text, float x, float y, float z, ofDrawBitmapMode mode)=0
 * api/openFrameworks/types/ofBaseTypes.h:376
 */
static int ofBaseRenderer_drawString(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    string *text = *((string **)dub_checksdata(L, 2, "string"));
    float x = dub_checknumber(L, 3);
    float y = dub_checknumber(L, 4);
    float z = dub_checknumber(L, 5);
    ofDrawBitmapMode mode = (ofDrawBitmapMode)dub_checkint(L, 6);
    self->drawString(*text, x, y, z, mode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawString: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawString: Unknown exception");
  }
  return dub_error(L);
}

/** virtual bool ofBaseRenderer::rendersPathPrimitives()=0
 * api/openFrameworks/types/ofBaseTypes.h:380
 */
static int ofBaseRenderer_rendersPathPrimitives(lua_State *L) {
  try {
    ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata(L, 1, "ofBaseRenderer"));
    lua_pushboolean(L, self->rendersPathPrimitives());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "rendersPathPrimitives: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rendersPathPrimitives: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofBaseRenderer___tostring(lua_State *L) {
  ofBaseRenderer *self = *((ofBaseRenderer **)dub_checksdata_n(L, 1, "ofBaseRenderer"));
  lua_pushfstring(L, "ofBaseRenderer: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofBaseRenderer_member_methods[] = {
  { "__gc"         , ofBaseRenderer__ofBaseRenderer },
  { "getType"      , ofBaseRenderer_getType },
  { "update"       , ofBaseRenderer_update },
  { "draw"         , ofBaseRenderer_draw  },
  { "pushView"     , ofBaseRenderer_pushView },
  { "popView"      , ofBaseRenderer_popView },
  { "viewport"     , ofBaseRenderer_viewport },
  { "setupScreenPerspective", ofBaseRenderer_setupScreenPerspective },
  { "setupScreenOrtho", ofBaseRenderer_setupScreenOrtho },
  { "getCurrentViewport", ofBaseRenderer_getCurrentViewport },
  { "getViewportWidth", ofBaseRenderer_getViewportWidth },
  { "getViewportHeight", ofBaseRenderer_getViewportHeight },
  { "setCoordHandedness", ofBaseRenderer_setCoordHandedness },
  { "getCoordHandedness", ofBaseRenderer_getCoordHandedness },
  { "pushMatrix"   , ofBaseRenderer_pushMatrix },
  { "popMatrix"    , ofBaseRenderer_popMatrix },
  { "translate"    , ofBaseRenderer_translate },
  { "scale"        , ofBaseRenderer_scale },
  { "rotate"       , ofBaseRenderer_rotate },
  { "rotateX"      , ofBaseRenderer_rotateX },
  { "rotateY"      , ofBaseRenderer_rotateY },
  { "rotateZ"      , ofBaseRenderer_rotateZ },
  { "matrixMode"   , ofBaseRenderer_matrixMode },
  { "loadIdentityMatrix", ofBaseRenderer_loadIdentityMatrix },
  { "loadMatrix"   , ofBaseRenderer_loadMatrix },
  { "multMatrix"   , ofBaseRenderer_multMatrix },
  { "setupGraphicDefaults", ofBaseRenderer_setupGraphicDefaults },
  { "setupScreen"  , ofBaseRenderer_setupScreen },
  { "setRectMode"  , ofBaseRenderer_setRectMode },
  { "getRectMode"  , ofBaseRenderer_getRectMode },
  { "setFillMode"  , ofBaseRenderer_setFillMode },
  { "getFillMode"  , ofBaseRenderer_getFillMode },
  { "setLineWidth" , ofBaseRenderer_setLineWidth },
  { "setBlendMode" , ofBaseRenderer_setBlendMode },
  { "setLineSmoothing", ofBaseRenderer_setLineSmoothing },
  { "setCircleResolution", ofBaseRenderer_setCircleResolution },
  { "setSphereResolution", ofBaseRenderer_setSphereResolution },
  { "enablePointSprites", ofBaseRenderer_enablePointSprites },
  { "disablePointSprites", ofBaseRenderer_disablePointSprites },
  { "setColor"     , ofBaseRenderer_setColor },
  { "setHexColor"  , ofBaseRenderer_setHexColor },
  { "getBgColor"   , ofBaseRenderer_getBgColor },
  { "bClearBg"     , ofBaseRenderer_bClearBg },
  { "background"   , ofBaseRenderer_background },
  { "setBackgroundAuto", ofBaseRenderer_setBackgroundAuto },
  { "clear"        , ofBaseRenderer_clear },
  { "clearAlpha"   , ofBaseRenderer_clearAlpha },
  { "drawLine"     , ofBaseRenderer_drawLine },
  { "drawRectangle", ofBaseRenderer_drawRectangle },
  { "drawTriangle" , ofBaseRenderer_drawTriangle },
  { "drawCircle"   , ofBaseRenderer_drawCircle },
  { "drawSphere"   , ofBaseRenderer_drawSphere },
  { "drawEllipse"  , ofBaseRenderer_drawEllipse },
  { "drawString"   , ofBaseRenderer_drawString },
  { "rendersPathPrimitives", ofBaseRenderer_rendersPathPrimitives },
  { "__tostring"   , ofBaseRenderer___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofBaseRenderer(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofBaseRenderer");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofBaseRenderer_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofBaseRenderer", "ofBaseRenderer");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
