/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofPolyline
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "graphics/ofPolyline.h"


/** ~ofPolyline()
 * 
 */
static int ofPolyline__ofPolyline(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofPolyline"));
    if (userdata->gc) {
      ofPolyline *self = (ofPolyline *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** ofPolyline::ofPolyline()
 * api/openFrameworks/graphics/ofPolyline.h:14
 */
static int ofPolyline_ofPolyline(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      vector< ofPoint > *verts = *((vector< ofPoint > **)dub_checksdata(L, 1, "vector< ofPoint >"));
      ofPolyline *retval__ = new ofPolyline(*verts);
      dub_pushudata(L, retval__, "ofPolyline", true);
      return 1;
    } else {
      ofPolyline *retval__ = new ofPolyline();
      dub_pushudata(L, retval__, "ofPolyline", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** void ofPolyline::clear()
 * api/openFrameworks/graphics/ofPolyline.h:20
 */
static int ofPolyline_clear(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    self->clear();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clear: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clear: Unknown exception");
  }
  return dub_error(L);
}

/** void ofPolyline::addVertex(const ofPoint &p)
 * api/openFrameworks/graphics/ofPolyline.h:23
 */
static int ofPolyline_addVertex(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      self->addVertex(x, y, z);
      return 0;
    } else if (top__ >= 3) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      self->addVertex(x, y);
      return 0;
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->addVertex(*p);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addVertex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addVertex: Unknown exception");
  }
  return dub_error(L);
}

/** void ofPolyline::addVertices(const vector< ofPoint > &verts)
 * api/openFrameworks/graphics/ofPolyline.h:25
 */
static int ofPolyline_addVertices(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    vector< ofPoint > *verts = *((vector< ofPoint > **)dub_checksdata(L, 2, "vector< ofPoint >"));
    self->addVertices(*verts);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addVertices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addVertices: Unknown exception");
  }
  return dub_error(L);
}

/** void ofPolyline::lineTo(const ofPoint &to)
 * api/openFrameworks/graphics/ofPolyline.h:31
 */
static int ofPolyline_lineTo(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      self->lineTo(x, y, z);
      return 0;
    } else if (top__ >= 3) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      self->lineTo(x, y);
      return 0;
    } else {
      ofVec3f *to = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->lineTo(*to);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "lineTo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "lineTo: Unknown exception");
  }
  return dub_error(L);
}

/** void ofPolyline::arc(const ofPoint &center, float radiusX, float radiusY, float angleBegin, float angleEnd, bool clockwise, int curveResolution=20)
 * api/openFrameworks/graphics/ofPolyline.h:41
 */
static int ofPolyline_arc(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    int top__ = lua_gettop(L);
    if (top__ >= 8) {
      ofVec3f *center = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      float radiusX = dub_checknumber(L, 3);
      float radiusY = dub_checknumber(L, 4);
      float angleBegin = dub_checknumber(L, 5);
      float angleEnd = dub_checknumber(L, 6);
      bool clockwise = dub_checkboolean(L, 7);
      int curveResolution = dub_checkint(L, 8);
      self->arc(*center, radiusX, radiusY, angleBegin, angleEnd, clockwise, curveResolution);
      return 0;
    } else {
      ofVec3f *center = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      float radiusX = dub_checknumber(L, 3);
      float radiusY = dub_checknumber(L, 4);
      float angleBegin = dub_checknumber(L, 5);
      float angleEnd = dub_checknumber(L, 6);
      bool clockwise = dub_checkboolean(L, 7);
      self->arc(*center, radiusX, radiusY, angleBegin, angleEnd, clockwise);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "arc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "arc: Unknown exception");
  }
  return dub_error(L);
}

/** void ofPolyline::arcNegative(const ofPoint &center, float radiusX, float radiusY, float angleBegin, float angleEnd, int curveResolution=20)
 * api/openFrameworks/graphics/ofPolyline.h:52
 */
static int ofPolyline_arcNegative(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    int top__ = lua_gettop(L);
    if (top__ >= 7) {
      ofVec3f *center = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      float radiusX = dub_checknumber(L, 3);
      float radiusY = dub_checknumber(L, 4);
      float angleBegin = dub_checknumber(L, 5);
      float angleEnd = dub_checknumber(L, 6);
      int curveResolution = dub_checkint(L, 7);
      self->arcNegative(*center, radiusX, radiusY, angleBegin, angleEnd, curveResolution);
      return 0;
    } else {
      ofVec3f *center = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      float radiusX = dub_checknumber(L, 3);
      float radiusY = dub_checknumber(L, 4);
      float angleBegin = dub_checknumber(L, 5);
      float angleEnd = dub_checknumber(L, 6);
      self->arcNegative(*center, radiusX, radiusY, angleBegin, angleEnd);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "arcNegative: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "arcNegative: Unknown exception");
  }
  return dub_error(L);
}

/** void ofPolyline::curveTo(const ofPoint &to, int curveResolution=16)
 * api/openFrameworks/graphics/ofPolyline.h:64
 */
static int ofPolyline_curveTo(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      int curveResolution = dub_checkint(L, 5);
      self->curveTo(x, y, z, curveResolution);
      return 0;
    } else if (top__ >= 4) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      self->curveTo(x, y, z);
      return 0;
    } else if (top__ >= 3) {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float x = dub_checknumber(L, 2);
        float y = dub_checknumber(L, 3);
        self->curveTo(x, y);
        return 0;
      } else {
        ofVec3f *to = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
        int curveResolution = dub_checkint(L, 3);
        self->curveTo(*to, curveResolution);
        return 0;
      }
    } else {
      ofVec3f *to = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      self->curveTo(*to);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "curveTo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "curveTo: Unknown exception");
  }
  return dub_error(L);
}

/** void ofPolyline::bezierTo(const ofPoint &cp1, const ofPoint &cp2, const ofPoint &to, int curveResolution=16)
 * api/openFrameworks/graphics/ofPolyline.h:70
 */
static int ofPolyline_bezierTo(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    int top__ = lua_gettop(L);
    if (top__ >= 11) {
      float cx1 = dub_checknumber(L, 2);
      float cy1 = dub_checknumber(L, 3);
      float cz1 = dub_checknumber(L, 4);
      float cx2 = dub_checknumber(L, 5);
      float cy2 = dub_checknumber(L, 6);
      float cz2 = dub_checknumber(L, 7);
      float x = dub_checknumber(L, 8);
      float y = dub_checknumber(L, 9);
      float z = dub_checknumber(L, 10);
      int curveResolution = dub_checkint(L, 11);
      self->bezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z, curveResolution);
      return 0;
    } else if (top__ >= 10) {
      float cx1 = dub_checknumber(L, 2);
      float cy1 = dub_checknumber(L, 3);
      float cz1 = dub_checknumber(L, 4);
      float cx2 = dub_checknumber(L, 5);
      float cy2 = dub_checknumber(L, 6);
      float cz2 = dub_checknumber(L, 7);
      float x = dub_checknumber(L, 8);
      float y = dub_checknumber(L, 9);
      float z = dub_checknumber(L, 10);
      self->bezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z);
      return 0;
    } else if (top__ >= 8) {
      float cx1 = dub_checknumber(L, 2);
      float cy1 = dub_checknumber(L, 3);
      float cx2 = dub_checknumber(L, 4);
      float cy2 = dub_checknumber(L, 5);
      float x = dub_checknumber(L, 6);
      float y = dub_checknumber(L, 7);
      int curveResolution = dub_checkint(L, 8);
      self->bezierTo(cx1, cy1, cx2, cy2, x, y, curveResolution);
      return 0;
    } else if (top__ >= 7) {
      float cx1 = dub_checknumber(L, 2);
      float cy1 = dub_checknumber(L, 3);
      float cx2 = dub_checknumber(L, 4);
      float cy2 = dub_checknumber(L, 5);
      float x = dub_checknumber(L, 6);
      float y = dub_checknumber(L, 7);
      self->bezierTo(cx1, cy1, cx2, cy2, x, y);
      return 0;
    } else if (top__ >= 5) {
      ofVec3f *cp1 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofVec3f *cp2 = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      ofVec3f *to = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
      int curveResolution = dub_checkint(L, 5);
      self->bezierTo(*cp1, *cp2, *to, curveResolution);
      return 0;
    } else {
      ofVec3f *cp1 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofVec3f *cp2 = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      ofVec3f *to = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
      self->bezierTo(*cp1, *cp2, *to);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "bezierTo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "bezierTo: Unknown exception");
  }
  return dub_error(L);
}

/** void ofPolyline::quadBezierTo(float cx1, float cy1, float cz1, float cx2, float cy2, float cz2, float x, float y, float z, int curveResolution=16)
 * api/openFrameworks/graphics/ofPolyline.h:79
 */
static int ofPolyline_quadBezierTo(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    int top__ = lua_gettop(L);
    if (top__ >= 11) {
      float cx1 = dub_checknumber(L, 2);
      float cy1 = dub_checknumber(L, 3);
      float cz1 = dub_checknumber(L, 4);
      float cx2 = dub_checknumber(L, 5);
      float cy2 = dub_checknumber(L, 6);
      float cz2 = dub_checknumber(L, 7);
      float x = dub_checknumber(L, 8);
      float y = dub_checknumber(L, 9);
      float z = dub_checknumber(L, 10);
      int curveResolution = dub_checkint(L, 11);
      self->quadBezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z, curveResolution);
      return 0;
    } else if (top__ >= 10) {
      float cx1 = dub_checknumber(L, 2);
      float cy1 = dub_checknumber(L, 3);
      float cz1 = dub_checknumber(L, 4);
      float cx2 = dub_checknumber(L, 5);
      float cy2 = dub_checknumber(L, 6);
      float cz2 = dub_checknumber(L, 7);
      float x = dub_checknumber(L, 8);
      float y = dub_checknumber(L, 9);
      float z = dub_checknumber(L, 10);
      self->quadBezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z);
      return 0;
    } else if (top__ >= 8) {
      float cx1 = dub_checknumber(L, 2);
      float cy1 = dub_checknumber(L, 3);
      float cx2 = dub_checknumber(L, 4);
      float cy2 = dub_checknumber(L, 5);
      float x = dub_checknumber(L, 6);
      float y = dub_checknumber(L, 7);
      int curveResolution = dub_checkint(L, 8);
      self->quadBezierTo(cx1, cy1, cx2, cy2, x, y, curveResolution);
      return 0;
    } else if (top__ >= 7) {
      float cx1 = dub_checknumber(L, 2);
      float cy1 = dub_checknumber(L, 3);
      float cx2 = dub_checknumber(L, 4);
      float cy2 = dub_checknumber(L, 5);
      float x = dub_checknumber(L, 6);
      float y = dub_checknumber(L, 7);
      self->quadBezierTo(cx1, cy1, cx2, cy2, x, y);
      return 0;
    } else if (top__ >= 5) {
      ofVec3f *p1 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofVec3f *p2 = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      ofVec3f *p3 = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
      int curveResolution = dub_checkint(L, 5);
      self->quadBezierTo(*p1, *p2, *p3, curveResolution);
      return 0;
    } else {
      ofVec3f *p1 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      ofVec3f *p2 = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
      ofVec3f *p3 = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
      self->quadBezierTo(*p1, *p2, *p3);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "quadBezierTo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "quadBezierTo: Unknown exception");
  }
  return dub_error(L);
}

/** ofPolyline ofPolyline::getSmoothed(int smoothingSize, float smoothingShape=0)
 * api/openFrameworks/graphics/ofPolyline.h:87
 */
static int ofPolyline_getSmoothed(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      int smoothingSize = dub_checkint(L, 2);
      float smoothingShape = dub_checknumber(L, 3);
      dub_pushudata(L, new ofPolyline(self->getSmoothed(smoothingSize, smoothingShape)), "ofPolyline", true);
      return 1;
    } else {
      int smoothingSize = dub_checkint(L, 2);
      dub_pushudata(L, new ofPolyline(self->getSmoothed(smoothingSize)), "ofPolyline", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSmoothed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSmoothed: Unknown exception");
  }
  return dub_error(L);
}

/** ofPolyline ofPolyline::getResampledBySpacing(float spacing)
 * api/openFrameworks/graphics/ofPolyline.h:90
 */
static int ofPolyline_getResampledBySpacing(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    float spacing = dub_checknumber(L, 2);
    dub_pushudata(L, new ofPolyline(self->getResampledBySpacing(spacing)), "ofPolyline", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getResampledBySpacing: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getResampledBySpacing: Unknown exception");
  }
  return dub_error(L);
}

/** ofPolyline ofPolyline::getResampledByCount(int count)
 * api/openFrameworks/graphics/ofPolyline.h:93
 */
static int ofPolyline_getResampledByCount(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    int count = dub_checkint(L, 2);
    dub_pushudata(L, new ofPolyline(self->getResampledByCount(count)), "ofPolyline", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getResampledByCount: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getResampledByCount: Unknown exception");
  }
  return dub_error(L);
}

/** ofRectangle ofPolyline::getBoundingBox() const
 * api/openFrameworks/graphics/ofPolyline.h:96
 */
static int ofPolyline_getBoundingBox(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    dub_pushudata(L, new ofRectangle(self->getBoundingBox()), "ofRectangle", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBoundingBox: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBoundingBox: Unknown exception");
  }
  return dub_error(L);
}

/** ofPoint ofPolyline::getClosestPoint(const ofPoint &target, unsigned int *nearestIndex=NULL)
 * api/openFrameworks/graphics/ofPolyline.h:100
 */
static int ofPolyline_getClosestPoint(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      ofVec3f *target = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      unsigned int * nearestIndex = (unsigned int *) lua_touserdata (L, 3);
      
      dub_pushudata(L, new ofVec3f(self->getClosestPoint(*target, (unsigned int *) nearestIndex)), "ofVec3f", true);
      return 1;
    } else {
      ofVec3f *target = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      dub_pushudata(L, new ofVec3f(self->getClosestPoint(*target)), "ofVec3f", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "getClosestPoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getClosestPoint: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofPolyline::inside(float x, float y)
 * api/openFrameworks/graphics/ofPolyline.h:107
 */
static int ofPolyline_inside(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      ofPolyline *polyline = *((ofPolyline **)dub_checksdata(L, 4, "ofPolyline"));
      lua_pushboolean(L, ofPolyline::inside(x, y, *polyline));
      return 1;
    } else if (top__ >= 3) {
      int type__ = lua_type(L, 2);
      if (type__ == LUA_TNUMBER) {
        float x = dub_checknumber(L, 2);
        float y = dub_checknumber(L, 3);
        lua_pushboolean(L, self->inside(x, y));
        return 1;
      } else {
        ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
        ofPolyline *polyline = *((ofPolyline **)dub_checksdata(L, 3, "ofPolyline"));
        lua_pushboolean(L, ofPolyline::inside(*p, *polyline));
        return 1;
      }
    } else {
      ofVec3f *p = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
      lua_pushboolean(L, self->inside(*p));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "inside: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "inside: Unknown exception");
  }
  return dub_error(L);
}

/** void ofPolyline::simplify(float tolerance=0.3)
 * api/openFrameworks/graphics/ofPolyline.h:110
 */
static int ofPolyline_simplify(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      float tolerance = dub_checknumber(L, 2);
      self->simplify(tolerance);
      return 0;
    } else {
      self->simplify();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "simplify: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "simplify: Unknown exception");
  }
  return dub_error(L);
}

/** size_t ofPolyline::size() const
 * api/openFrameworks/graphics/ofPolyline.h:113
 */
static int ofPolyline_size(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    lua_pushnumber(L, self->size());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "size: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "size: Unknown exception");
  }
  return dub_error(L);
}

/** const ofPoint& ofPolyline::operator[](int index) const
 * api/openFrameworks/graphics/ofPolyline.h:114
 */
static int ofPolyline__get_(lua_State *L) {

  ofPolyline *self = *((ofPolyline **)dub_checksdata_n(L, 1, "ofPolyline", true));
  if (lua_type(L, 2) != LUA_TSTRING) {
    int index = luaL_checkint(L, 2);
    dub_pushudata(L, &self->operator[](index), "ofVec3f", false);
    return 1;
  }
  return 0;
}

/** void ofPolyline::resize(size_t size)
 * api/openFrameworks/graphics/ofPolyline.h:116
 */
static int ofPolyline_resize(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    size_t size = dub_checkint(L, 2);
    self->resize(size);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "resize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "resize: Unknown exception");
  }
  return dub_error(L);
}

/** void ofPolyline::setClosed(bool tf)
 * api/openFrameworks/graphics/ofPolyline.h:119
 */
static int ofPolyline_setClosed(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    bool tf = dub_checkboolean(L, 2);
    self->setClosed(tf);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setClosed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setClosed: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofPolyline::isClosed() const
 * api/openFrameworks/graphics/ofPolyline.h:120
 */
static int ofPolyline_isClosed(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    lua_pushboolean(L, self->isClosed());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isClosed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isClosed: Unknown exception");
  }
  return dub_error(L);
}

/** void ofPolyline::close()
 * api/openFrameworks/graphics/ofPolyline.h:121
 */
static int ofPolyline_close(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    self->close();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "close: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "close: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofPolyline::hasChanged()
 * api/openFrameworks/graphics/ofPolyline.h:123
 */
static int ofPolyline_hasChanged(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    lua_pushboolean(L, self->hasChanged());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "hasChanged: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "hasChanged: Unknown exception");
  }
  return dub_error(L);
}

/** vector<ofPoint>& ofPolyline::getVertices()
 * api/openFrameworks/graphics/ofPolyline.h:125
 */
static int ofPolyline_getVertices(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    dub_pushudata(L, &self->getVertices(), "vector< ofPoint >", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getVertices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getVertices: Unknown exception");
  }
  return dub_error(L);
}

/** float ofPolyline::getPerimeter() const
 * api/openFrameworks/graphics/ofPolyline.h:127
 */
static int ofPolyline_getPerimeter(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    lua_pushnumber(L, self->getPerimeter());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPerimeter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPerimeter: Unknown exception");
  }
  return dub_error(L);
}

/** float ofPolyline::getArea() const
 * api/openFrameworks/graphics/ofPolyline.h:128
 */
static int ofPolyline_getArea(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    lua_pushnumber(L, self->getArea());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getArea: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getArea: Unknown exception");
  }
  return dub_error(L);
}

/** ofPoint ofPolyline::getCentroid2D() const
 * api/openFrameworks/graphics/ofPolyline.h:129
 */
static int ofPolyline_getCentroid2D(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    dub_pushudata(L, new ofVec3f(self->getCentroid2D()), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCentroid2D: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCentroid2D: Unknown exception");
  }
  return dub_error(L);
}

/** void ofPolyline::draw()
 * api/openFrameworks/graphics/ofPolyline.h:131
 */
static int ofPolyline_draw(lua_State *L) {
  try {
    ofPolyline *self = *((ofPolyline **)dub_checksdata(L, 1, "ofPolyline"));
    self->draw();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "draw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "draw: Unknown exception");
  }
  return dub_error(L);
}

/** static ofPolyline ofPolyline::fromRectangle(const ofRectangle &rect)
 * api/openFrameworks/graphics/ofPolyline.h:17
 */
static int ofPolyline_fromRectangle(lua_State *L) {
  try {
    ofRectangle *rect = *((ofRectangle **)dub_checksdata(L, 1, "ofRectangle"));
    dub_pushudata(L, new ofPolyline(ofPolyline::fromRectangle(*rect)), "ofPolyline", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "fromRectangle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "fromRectangle: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofPolyline___tostring(lua_State *L) {
  ofPolyline *self = *((ofPolyline **)dub_checksdata_n(L, 1, "ofPolyline"));
  lua_pushfstring(L, "ofPolyline: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofPolyline_member_methods[] = {
  { "__gc"         , ofPolyline__ofPolyline },
  { "new"          , ofPolyline_ofPolyline },
  { "clear"        , ofPolyline_clear     },
  { "addVertex"    , ofPolyline_addVertex },
  { "addVertices"  , ofPolyline_addVertices },
  { "lineTo"       , ofPolyline_lineTo    },
  { "arc"          , ofPolyline_arc       },
  { "arcNegative"  , ofPolyline_arcNegative },
  { "curveTo"      , ofPolyline_curveTo   },
  { "bezierTo"     , ofPolyline_bezierTo  },
  { "quadBezierTo" , ofPolyline_quadBezierTo },
  { "getSmoothed"  , ofPolyline_getSmoothed },
  { "getResampledBySpacing", ofPolyline_getResampledBySpacing },
  { "getResampledByCount", ofPolyline_getResampledByCount },
  { "getBoundingBox", ofPolyline_getBoundingBox },
  { "getClosestPoint", ofPolyline_getClosestPoint },
  { "inside"       , ofPolyline_inside    },
  { "simplify"     , ofPolyline_simplify  },
  { "size"         , ofPolyline_size      },
  { "__index"      , ofPolyline__get_     },
  { "resize"       , ofPolyline_resize    },
  { "setClosed"    , ofPolyline_setClosed },
  { "isClosed"     , ofPolyline_isClosed  },
  { "close"        , ofPolyline_close     },
  { "hasChanged"   , ofPolyline_hasChanged },
  { "getVertices"  , ofPolyline_getVertices },
  { "getPerimeter" , ofPolyline_getPerimeter },
  { "getArea"      , ofPolyline_getArea   },
  { "getCentroid2D", ofPolyline_getCentroid2D },
  { "draw"         , ofPolyline_draw      },
  { "fromRectangle", ofPolyline_fromRectangle },
  { "__tostring"   , ofPolyline___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofPolyline(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofPolyline");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofPolyline_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofPolyline", "ofPolyline");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
