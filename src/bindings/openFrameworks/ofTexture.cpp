/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofTexture
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "gl/ofTexture.h"


/** Set attributes (key, value)
 * 
 */
static int ofTexture__set_(lua_State *L) {

  ofTexture *self = *((ofTexture **)dub_checksdata_n(L, 1, "ofTexture"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "texData")) break;
      self->texData = **((ofTextureData **)dub_checksdata_n(L, 3, "ofTextureData"));
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int ofTexture__get_(lua_State *L) {

  ofTexture *self = *((ofTexture **)dub_checksdata_n(L, 1, "ofTexture", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "texData")) break;
      dub_pushudata(L, &self->texData, "ofTextureData", false);
      return 1;
    }
  }
  return 0;
}

/** Cast (class_name)
 * 
 */
static int ofTexture__cast_(lua_State *L) {

  ofTexture *self = *((ofTexture **)dub_checksdata_n(L, 1, "ofTexture"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "ofBaseDraws")) break;
      *retval__ = static_cast<ofBaseDraws *>(self);
      return 1;
    }
  }
  return 0;
}

/** ofTexture::ofTexture()
 * api/openFrameworks/gl/ofTexture.h:97
 */
static int ofTexture_ofTexture(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      ofTexture *mom = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
      ofTexture *retval__ = new ofTexture(*mom);
      dub_pushudata(L, retval__, "ofTexture", true);
      return 1;
    } else {
      ofTexture *retval__ = new ofTexture();
      dub_pushudata(L, retval__, "ofTexture", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** ofTexture& ofTexture::operator=(const ofTexture &mom)
 * api/openFrameworks/gl/ofTexture.h:99
 */
static int ofTexture_operator_sete(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    ofTexture *mom = *((ofTexture **)dub_checksdata(L, 2, "ofTexture"));
    dub_pushudata(L, &self->operator=(*mom), "ofTexture", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofTexture::~ofTexture()
 * api/openFrameworks/gl/ofTexture.h:100
 */
static int ofTexture__ofTexture(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofTexture"));
    if (userdata->gc) {
      ofTexture *self = (ofTexture *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofTexture::allocate(const ofTextureData &textureData)
 * api/openFrameworks/gl/ofTexture.h:104
 */
static int ofTexture_allocate(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      int w = dub_checkint(L, 2);
      int h = dub_checkint(L, 3);
      int glInternalFormat = dub_checkint(L, 4);
      bool bUseARBExtention = dub_checkboolean(L, 5);
      self->allocate(w, h, glInternalFormat, bUseARBExtention);
      return 0;
    } else if (top__ >= 4) {
      int w = dub_checkint(L, 2);
      int h = dub_checkint(L, 3);
      int glInternalFormat = dub_checkint(L, 4);
      self->allocate(w, h, glInternalFormat);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofTextureData", type__)) ) {
        ofTextureData *textureData = *((ofTextureData **)ptr2__);
        self->allocate(*textureData);
        return 0;
      } else {
        ofPixels *pix = *((ofPixels **)dub_checksdata(L, 2, "ofPixels"));
        self->allocate(*pix);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "allocate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "allocate: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTexture::clear()
 * api/openFrameworks/gl/ofTexture.h:108
 */
static int ofTexture_clear(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    self->clear();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clear: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clear: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTexture::setUseExternalTextureID(GLuint externTexID)
 * api/openFrameworks/gl/ofTexture.h:110
 */
static int ofTexture_setUseExternalTextureID(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    GLuint externTexID = dub_checkint(L, 2);
    self->setUseExternalTextureID(externTexID);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUseExternalTextureID: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUseExternalTextureID: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTexture::loadData(const float *data, int w, int h, int glFormat)
 * api/openFrameworks/gl/ofTexture.h:115
 */
static int ofTexture_loadData(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      float * data = (float *) lua_touserdata (L, 2);
      
      int w = dub_checkint(L, 3);
      int h = dub_checkint(L, 4);
      int glFormat = dub_checkint(L, 5);
      self->loadData((float *) data, w, h, glFormat);
      return 0;
    } else {
      int type__ = lua_type(L, 2);
      void **ptr2__;
      if ( (ptr2__ = dub_issdata(L, 2, "ofShortPixels", type__)) ) {
        ofShortPixels *pix = *((ofShortPixels **)ptr2__);
        self->loadData(*pix);
        return 0;
      } else if ( (ptr2__ = dub_issdata(L, 2, "ofPixels", type__)) ) {
        ofPixels *pix = *((ofPixels **)ptr2__);
        self->loadData(*pix);
        return 0;
      } else {
        ofFloatPixels *pix = *((ofFloatPixels **)dub_checksdata(L, 2, "ofFloatPixels"));
        self->loadData(*pix);
        return 0;
      }
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "loadData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "loadData: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTexture::loadScreenData(int x, int y, int w, int h)
 * api/openFrameworks/gl/ofTexture.h:120
 */
static int ofTexture_loadScreenData(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    int x = dub_checkint(L, 2);
    int y = dub_checkint(L, 3);
    int w = dub_checkint(L, 4);
    int h = dub_checkint(L, 5);
    self->loadScreenData(x, y, w, h);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "loadScreenData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "loadScreenData: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTexture::setAnchorPercent(float xPct, float yPct)
 * api/openFrameworks/gl/ofTexture.h:124
 */
static int ofTexture_setAnchorPercent(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    float xPct = dub_checknumber(L, 2);
    float yPct = dub_checknumber(L, 3);
    self->setAnchorPercent(xPct, yPct);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAnchorPercent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAnchorPercent: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTexture::setAnchorPoint(float x, float y)
 * api/openFrameworks/gl/ofTexture.h:125
 */
static int ofTexture_setAnchorPoint(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    float x = dub_checknumber(L, 2);
    float y = dub_checknumber(L, 3);
    self->setAnchorPoint(x, y);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAnchorPoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAnchorPoint: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTexture::resetAnchor()
 * api/openFrameworks/gl/ofTexture.h:126
 */
static int ofTexture_resetAnchor(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    self->resetAnchor();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "resetAnchor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "resetAnchor: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTexture::draw(const ofPoint &p1, const ofPoint &p2, const ofPoint &p3, const ofPoint &p4)
 * api/openFrameworks/gl/ofTexture.h:129
 */
static int ofTexture_draw(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      float w = dub_checknumber(L, 5);
      float h = dub_checknumber(L, 6);
      self->draw(x, y, z, w, h);
      return 0;
    } else if (top__ >= 5) {
      int type__ = lua_type(L, 3);
      if (type__ == LUA_TNUMBER) {
        float x = dub_checknumber(L, 2);
        float y = dub_checknumber(L, 3);
        float w = dub_checknumber(L, 4);
        float h = dub_checknumber(L, 5);
        self->draw(x, y, w, h);
        return 0;
      } else {
        ofVec3f *p1 = *((ofVec3f **)dub_checksdata(L, 2, "ofVec3f"));
        ofVec3f *p2 = *((ofVec3f **)dub_checksdata(L, 3, "ofVec3f"));
        ofVec3f *p3 = *((ofVec3f **)dub_checksdata(L, 4, "ofVec3f"));
        ofVec3f *p4 = *((ofVec3f **)dub_checksdata(L, 5, "ofVec3f"));
        self->draw(*p1, *p2, *p3, *p4);
        return 0;
      }
    } else if (top__ >= 4) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      self->draw(x, y, z);
      return 0;
    } else {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      self->draw(x, y);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "draw: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "draw: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTexture::drawSubsection(float x, float y, float w, float h, float sx, float sy)
 * api/openFrameworks/gl/ofTexture.h:135
 */
static int ofTexture_drawSubsection(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    int top__ = lua_gettop(L);
    if (top__ >= 10) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      float w = dub_checknumber(L, 5);
      float h = dub_checknumber(L, 6);
      float sx = dub_checknumber(L, 7);
      float sy = dub_checknumber(L, 8);
      float sw = dub_checknumber(L, 9);
      float sh = dub_checknumber(L, 10);
      self->drawSubsection(x, y, z, w, h, sx, sy, sw, sh);
      return 0;
    } else if (top__ >= 9) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float w = dub_checknumber(L, 4);
      float h = dub_checknumber(L, 5);
      float sx = dub_checknumber(L, 6);
      float sy = dub_checknumber(L, 7);
      float sw = dub_checknumber(L, 8);
      float sh = dub_checknumber(L, 9);
      self->drawSubsection(x, y, w, h, sx, sy, sw, sh);
      return 0;
    } else if (top__ >= 8) {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float z = dub_checknumber(L, 4);
      float w = dub_checknumber(L, 5);
      float h = dub_checknumber(L, 6);
      float sx = dub_checknumber(L, 7);
      float sy = dub_checknumber(L, 8);
      self->drawSubsection(x, y, z, w, h, sx, sy);
      return 0;
    } else {
      float x = dub_checknumber(L, 2);
      float y = dub_checknumber(L, 3);
      float w = dub_checknumber(L, 4);
      float h = dub_checknumber(L, 5);
      float sx = dub_checknumber(L, 6);
      float sy = dub_checknumber(L, 7);
      self->drawSubsection(x, y, w, h, sx, sy);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawSubsection: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawSubsection: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTexture::readToPixels(ofPixels &pixels)
 * api/openFrameworks/gl/ofTexture.h:140
 */
static int ofTexture_readToPixels(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub_issdata(L, 2, "ofShortPixels", type__)) ) {
      ofShortPixels *pixels = *((ofShortPixels **)ptr2__);
      self->readToPixels(*pixels);
      return 0;
    } else if ( (ptr2__ = dub_issdata(L, 2, "ofPixels", type__)) ) {
      ofPixels *pixels = *((ofPixels **)ptr2__);
      self->readToPixels(*pixels);
      return 0;
    } else {
      ofFloatPixels *pixels = *((ofFloatPixels **)dub_checksdata(L, 2, "ofFloatPixels"));
      self->readToPixels(*pixels);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "readToPixels: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "readToPixels: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTexture::bind()
 * api/openFrameworks/gl/ofTexture.h:145
 */
static int ofTexture_bind(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    self->bind();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "bind: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "bind: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTexture::unbind()
 * api/openFrameworks/gl/ofTexture.h:146
 */
static int ofTexture_unbind(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    self->unbind();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "unbind: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "unbind: Unknown exception");
  }
  return dub_error(L);
}

/** ofPoint ofTexture::getCoordFromPoint(float xPos, float yPos)
 * api/openFrameworks/gl/ofTexture.h:151
 */
static int ofTexture_getCoordFromPoint(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    float xPos = dub_checknumber(L, 2);
    float yPos = dub_checknumber(L, 3);
    dub_pushudata(L, new ofVec3f(self->getCoordFromPoint(xPos, yPos)), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCoordFromPoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCoordFromPoint: Unknown exception");
  }
  return dub_error(L);
}

/** ofPoint ofTexture::getCoordFromPercent(float xPts, float yPts)
 * api/openFrameworks/gl/ofTexture.h:152
 */
static int ofTexture_getCoordFromPercent(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    float xPts = dub_checknumber(L, 2);
    float yPts = dub_checknumber(L, 3);
    dub_pushudata(L, new ofVec3f(self->getCoordFromPercent(xPts, yPts)), "ofVec3f", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCoordFromPercent: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCoordFromPercent: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTexture::setTextureWrap(GLint wrapModeHorizontal, GLint wrapModeVertical)
 * api/openFrameworks/gl/ofTexture.h:154
 */
static int ofTexture_setTextureWrap(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    GLint wrapModeHorizontal = dub_checkint(L, 2);
    GLint wrapModeVertical = dub_checkint(L, 3);
    self->setTextureWrap(wrapModeHorizontal, wrapModeVertical);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setTextureWrap: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setTextureWrap: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTexture::setTextureMinMagFilter(GLint minFilter, GLint maxFilter)
 * api/openFrameworks/gl/ofTexture.h:155
 */
static int ofTexture_setTextureMinMagFilter(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    GLint minFilter = dub_checkint(L, 2);
    GLint maxFilter = dub_checkint(L, 3);
    self->setTextureMinMagFilter(minFilter, maxFilter);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setTextureMinMagFilter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setTextureMinMagFilter: Unknown exception");
  }
  return dub_error(L);
}

/** void ofTexture::setCompression(ofTexCompression compression)
 * api/openFrameworks/gl/ofTexture.h:157
 */
static int ofTexture_setCompression(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    ofTexCompression compression = (ofTexCompression)dub_checkint(L, 2);
    self->setCompression(compression);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCompression: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCompression: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofTexture::bAllocated()
 * api/openFrameworks/gl/ofTexture.h:159
 */
static int ofTexture_bAllocated(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    lua_pushboolean(L, self->bAllocated());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "bAllocated: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "bAllocated: Unknown exception");
  }
  return dub_error(L);
}

/** bool ofTexture::isAllocated()
 * api/openFrameworks/gl/ofTexture.h:160
 */
static int ofTexture_isAllocated(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    lua_pushboolean(L, self->isAllocated());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isAllocated: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isAllocated: Unknown exception");
  }
  return dub_error(L);
}

/** ofTextureData& ofTexture::getTextureData()
 * api/openFrameworks/gl/ofTexture.h:162
 */
static int ofTexture_getTextureData(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    dub_pushudata(L, &self->getTextureData(), "ofTextureData", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getTextureData: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getTextureData: Unknown exception");
  }
  return dub_error(L);
}

/** float ofTexture::getHeight()
 * api/openFrameworks/gl/ofTexture.h:169
 */
static int ofTexture_getHeight(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    lua_pushnumber(L, self->getHeight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getHeight: Unknown exception");
  }
  return dub_error(L);
}

/** float ofTexture::getWidth()
 * api/openFrameworks/gl/ofTexture.h:170
 */
static int ofTexture_getWidth(lua_State *L) {
  try {
    ofTexture *self = *((ofTexture **)dub_checksdata(L, 1, "ofTexture"));
    lua_pushnumber(L, self->getWidth());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWidth: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofTexture___tostring(lua_State *L) {
  ofTexture *self = *((ofTexture **)dub_checksdata_n(L, 1, "ofTexture"));
  lua_pushfstring(L, "ofTexture: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofTexture_member_methods[] = {
  { "__newindex"   , ofTexture__set_      },
  { "__index"      , ofTexture__get_      },
  { "_cast_"       , ofTexture__cast_     },
  { "new"          , ofTexture_ofTexture  },
  { "set"          , ofTexture_operator_sete },
  { "__gc"         , ofTexture__ofTexture },
  { "allocate"     , ofTexture_allocate   },
  { "clear"        , ofTexture_clear      },
  { "setUseExternalTextureID", ofTexture_setUseExternalTextureID },
  { "loadData"     , ofTexture_loadData   },
  { "loadScreenData", ofTexture_loadScreenData },
  { "setAnchorPercent", ofTexture_setAnchorPercent },
  { "setAnchorPoint", ofTexture_setAnchorPoint },
  { "resetAnchor"  , ofTexture_resetAnchor },
  { "draw"         , ofTexture_draw       },
  { "drawSubsection", ofTexture_drawSubsection },
  { "readToPixels" , ofTexture_readToPixels },
  { "bind"         , ofTexture_bind       },
  { "unbind"       , ofTexture_unbind     },
  { "getCoordFromPoint", ofTexture_getCoordFromPoint },
  { "getCoordFromPercent", ofTexture_getCoordFromPercent },
  { "setTextureWrap", ofTexture_setTextureWrap },
  { "setTextureMinMagFilter", ofTexture_setTextureMinMagFilter },
  { "setCompression", ofTexture_setCompression },
  { "bAllocated"   , ofTexture_bAllocated },
  { "isAllocated"  , ofTexture_isAllocated },
  { "getTextureData", ofTexture_getTextureData },
  { "getHeight"    , ofTexture_getHeight  },
  { "getWidth"     , ofTexture_getWidth   },
  { "__tostring"   , ofTexture___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofTexture(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofTexture");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofTexture_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofTexture", "ofTexture");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
