/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofBaseVideo
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/types/ofBaseTypes.h"


/** Cast (class_name)
 * 
 */
static int ofBaseVideo__cast_(lua_State *L) {

  ofBaseVideo *self = *((ofBaseVideo **)dub_checksdata_n(L, 1, "ofBaseVideo"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "ofBaseUpdates")) break;
      *retval__ = static_cast<ofBaseUpdates *>(self);
      return 1;
    }
  }
  return 0;
}

/** virtual ofBaseVideo::~ofBaseVideo()
 * api/openFrameworks/types/ofBaseTypes.h:173
 */
static int ofBaseVideo__ofBaseVideo(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofBaseVideo"));
    if (userdata->gc) {
      ofBaseVideo *self = (ofBaseVideo *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** virtual bool ofBaseVideo::isFrameNew()=0
 * api/openFrameworks/types/ofBaseTypes.h:174
 */
static int ofBaseVideo_isFrameNew(lua_State *L) {
  try {
    ofBaseVideo *self = *((ofBaseVideo **)dub_checksdata(L, 1, "ofBaseVideo"));
    lua_pushboolean(L, self->isFrameNew());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isFrameNew: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isFrameNew: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseVideo::close()=0
 * api/openFrameworks/types/ofBaseTypes.h:175
 */
static int ofBaseVideo_close(lua_State *L) {
  try {
    ofBaseVideo *self = *((ofBaseVideo **)dub_checksdata(L, 1, "ofBaseVideo"));
    self->close();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "close: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "close: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseUpdates::update()=0
 * api/openFrameworks/types/ofBaseTypes.h:69
 */
static int ofBaseVideo_update(lua_State *L) {
  try {
    ofBaseVideo *self = *((ofBaseVideo **)dub_checksdata(L, 1, "ofBaseVideo"));
    self->update();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "update: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "update: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofBaseVideo___tostring(lua_State *L) {
  ofBaseVideo *self = *((ofBaseVideo **)dub_checksdata_n(L, 1, "ofBaseVideo"));
  lua_pushfstring(L, "ofBaseVideo: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofBaseVideo_member_methods[] = {
  { "_cast_"       , ofBaseVideo__cast_   },
  { "__gc"         , ofBaseVideo__ofBaseVideo },
  { "isFrameNew"   , ofBaseVideo_isFrameNew },
  { "close"        , ofBaseVideo_close    },
  { "update"       , ofBaseVideo_update   },
  { "__tostring"   , ofBaseVideo___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofBaseVideo(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofBaseVideo");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofBaseVideo_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofBaseVideo", "ofBaseVideo");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
