/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofBaseLoggerChannel
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/utils/ofLog.h"


/** virtual ofBaseLoggerChannel::~ofBaseLoggerChannel()
 * api/openFrameworks/utils/ofLog.h:147
 */
static int ofBaseLoggerChannel__ofBaseLoggerChannel(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofBaseLoggerChannel"));
    if (userdata->gc) {
      ofBaseLoggerChannel *self = (ofBaseLoggerChannel *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseLoggerChannel::log(ofLogLevel level, const string &module, const string &message)=0
 * api/openFrameworks/utils/ofLog.h:148
 */
static int ofBaseLoggerChannel_log(lua_State *L) {
  try {
    ofBaseLoggerChannel *self = *((ofBaseLoggerChannel **)dub_checksdata(L, 1, "ofBaseLoggerChannel"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      ofLogLevel logLevel = (ofLogLevel)dub_checkint(L, 2);
      string *module = *((string **)dub_checksdata(L, 3, "string"));
      const char *format = dub_checkstring(L, 4);
      va_list *args = *((va_list **)dub_checksdata(L, 5, "va_list"));
      self->log(logLevel, *module, format, *args);
      return 0;
    } else {
      ofLogLevel level = (ofLogLevel)dub_checkint(L, 2);
      string *module = *((string **)dub_checksdata(L, 3, "string"));
      string *message = *((string **)dub_checksdata(L, 4, "string"));
      self->log(level, *module, *message);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "log: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "log: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofBaseLoggerChannel___tostring(lua_State *L) {
  ofBaseLoggerChannel *self = *((ofBaseLoggerChannel **)dub_checksdata_n(L, 1, "ofBaseLoggerChannel"));
  lua_pushfstring(L, "ofBaseLoggerChannel: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofBaseLoggerChannel_member_methods[] = {
  { "__gc"         , ofBaseLoggerChannel__ofBaseLoggerChannel },
  { "log"          , ofBaseLoggerChannel_log },
  { "__tostring"   , ofBaseLoggerChannel___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofBaseLoggerChannel(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofBaseLoggerChannel");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofBaseLoggerChannel_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofBaseLoggerChannel", "ofBaseLoggerChannel");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
