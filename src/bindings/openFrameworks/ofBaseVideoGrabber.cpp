/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofBaseVideoGrabber
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/types/ofBaseTypes.h"


/** Cast (class_name)
 * 
 */
static int ofBaseVideoGrabber__cast_(lua_State *L) {

  ofBaseVideoGrabber *self = *((ofBaseVideoGrabber **)dub_checksdata_n(L, 1, "ofBaseVideoGrabber"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "ofBaseVideo")) break;
      *retval__ = static_cast<ofBaseVideo *>(self);
      return 1;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "ofBaseUpdates")) break;
      *retval__ = static_cast<ofBaseUpdates *>(self);
      return 1;
    }
  }
  return 0;
}

/** virtual ofBaseVideoGrabber::~ofBaseVideoGrabber()
 * api/openFrameworks/types/ofBaseTypes.h:193
 */
static int ofBaseVideoGrabber__ofBaseVideoGrabber(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofBaseVideoGrabber"));
    if (userdata->gc) {
      ofBaseVideoGrabber *self = (ofBaseVideoGrabber *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseVideoGrabber::listDevices()=0
 * api/openFrameworks/types/ofBaseTypes.h:196
 */
static int ofBaseVideoGrabber_listDevices(lua_State *L) {
  try {
    ofBaseVideoGrabber *self = *((ofBaseVideoGrabber **)dub_checksdata(L, 1, "ofBaseVideoGrabber"));
    self->listDevices();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "listDevices: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "listDevices: Unknown exception");
  }
  return dub_error(L);
}

/** virtual bool ofBaseVideoGrabber::initGrabber(int w, int h)=0
 * api/openFrameworks/types/ofBaseTypes.h:197
 */
static int ofBaseVideoGrabber_initGrabber(lua_State *L) {
  try {
    ofBaseVideoGrabber *self = *((ofBaseVideoGrabber **)dub_checksdata(L, 1, "ofBaseVideoGrabber"));
    int w = dub_checkint(L, 2);
    int h = dub_checkint(L, 3);
    lua_pushboolean(L, self->initGrabber(w, h));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "initGrabber: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "initGrabber: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseVideoGrabber::update()=0
 * api/openFrameworks/types/ofBaseTypes.h:198
 */
static int ofBaseVideoGrabber_update(lua_State *L) {
  try {
    ofBaseVideoGrabber *self = *((ofBaseVideoGrabber **)dub_checksdata(L, 1, "ofBaseVideoGrabber"));
    self->update();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "update: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "update: Unknown exception");
  }
  return dub_error(L);
}

/** virtual bool ofBaseVideoGrabber::isFrameNew()=0
 * api/openFrameworks/types/ofBaseTypes.h:199
 */
static int ofBaseVideoGrabber_isFrameNew(lua_State *L) {
  try {
    ofBaseVideoGrabber *self = *((ofBaseVideoGrabber **)dub_checksdata(L, 1, "ofBaseVideoGrabber"));
    lua_pushboolean(L, self->isFrameNew());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isFrameNew: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isFrameNew: Unknown exception");
  }
  return dub_error(L);
}

/** virtual unsigned char* ofBaseVideoGrabber::getPixels()=0
 * api/openFrameworks/types/ofBaseTypes.h:201
 */
static int ofBaseVideoGrabber_getPixels(lua_State *L) {
  try {
    ofBaseVideoGrabber *self = *((ofBaseVideoGrabber **)dub_checksdata(L, 1, "ofBaseVideoGrabber"));
    lua_pushstring(L, self->getPixels());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPixels: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPixels: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseVideoGrabber::close()=0
 * api/openFrameworks/types/ofBaseTypes.h:203
 */
static int ofBaseVideoGrabber_close(lua_State *L) {
  try {
    ofBaseVideoGrabber *self = *((ofBaseVideoGrabber **)dub_checksdata(L, 1, "ofBaseVideoGrabber"));
    self->close();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "close: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "close: Unknown exception");
  }
  return dub_error(L);
}

/** virtual float ofBaseVideoGrabber::getHeight()=0
 * api/openFrameworks/types/ofBaseTypes.h:205
 */
static int ofBaseVideoGrabber_getHeight(lua_State *L) {
  try {
    ofBaseVideoGrabber *self = *((ofBaseVideoGrabber **)dub_checksdata(L, 1, "ofBaseVideoGrabber"));
    lua_pushnumber(L, self->getHeight());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getHeight: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getHeight: Unknown exception");
  }
  return dub_error(L);
}

/** virtual float ofBaseVideoGrabber::getWidth()=0
 * api/openFrameworks/types/ofBaseTypes.h:206
 */
static int ofBaseVideoGrabber_getWidth(lua_State *L) {
  try {
    ofBaseVideoGrabber *self = *((ofBaseVideoGrabber **)dub_checksdata(L, 1, "ofBaseVideoGrabber"));
    lua_pushnumber(L, self->getWidth());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWidth: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWidth: Unknown exception");
  }
  return dub_error(L);
}

/** virtual bool ofBaseVideoGrabber::setPixelFormat(ofPixelFormat pixelFormat)=0
 * api/openFrameworks/types/ofBaseTypes.h:208
 */
static int ofBaseVideoGrabber_setPixelFormat(lua_State *L) {
  try {
    ofBaseVideoGrabber *self = *((ofBaseVideoGrabber **)dub_checksdata(L, 1, "ofBaseVideoGrabber"));
    ofPixelFormat pixelFormat = (ofPixelFormat)dub_checkint(L, 2);
    lua_pushboolean(L, self->setPixelFormat(pixelFormat));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setPixelFormat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setPixelFormat: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofPixelFormat ofBaseVideoGrabber::getPixelFormat()=0
 * api/openFrameworks/types/ofBaseTypes.h:209
 */
static int ofBaseVideoGrabber_getPixelFormat(lua_State *L) {
  try {
    ofBaseVideoGrabber *self = *((ofBaseVideoGrabber **)dub_checksdata(L, 1, "ofBaseVideoGrabber"));
    lua_pushnumber(L, self->getPixelFormat());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPixelFormat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPixelFormat: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseVideoGrabber::setVerbose(bool bTalkToMe)
 * api/openFrameworks/types/ofBaseTypes.h:212
 */
static int ofBaseVideoGrabber_setVerbose(lua_State *L) {
  try {
    ofBaseVideoGrabber *self = *((ofBaseVideoGrabber **)dub_checksdata(L, 1, "ofBaseVideoGrabber"));
    bool bTalkToMe = dub_checkboolean(L, 2);
    self->setVerbose(bTalkToMe);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setVerbose: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setVerbose: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseVideoGrabber::setDeviceID(int _deviceID)
 * api/openFrameworks/types/ofBaseTypes.h:213
 */
static int ofBaseVideoGrabber_setDeviceID(lua_State *L) {
  try {
    ofBaseVideoGrabber *self = *((ofBaseVideoGrabber **)dub_checksdata(L, 1, "ofBaseVideoGrabber"));
    int _deviceID = dub_checkint(L, 2);
    self->setDeviceID(_deviceID);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDeviceID: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDeviceID: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseVideoGrabber::setDesiredFrameRate(int framerate)
 * api/openFrameworks/types/ofBaseTypes.h:214
 */
static int ofBaseVideoGrabber_setDesiredFrameRate(lua_State *L) {
  try {
    ofBaseVideoGrabber *self = *((ofBaseVideoGrabber **)dub_checksdata(L, 1, "ofBaseVideoGrabber"));
    int framerate = dub_checkint(L, 2);
    self->setDesiredFrameRate(framerate);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDesiredFrameRate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDesiredFrameRate: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseVideoGrabber::videoSettings()
 * api/openFrameworks/types/ofBaseTypes.h:215
 */
static int ofBaseVideoGrabber_videoSettings(lua_State *L) {
  try {
    ofBaseVideoGrabber *self = *((ofBaseVideoGrabber **)dub_checksdata(L, 1, "ofBaseVideoGrabber"));
    self->videoSettings();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "videoSettings: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "videoSettings: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofBaseVideoGrabber___tostring(lua_State *L) {
  ofBaseVideoGrabber *self = *((ofBaseVideoGrabber **)dub_checksdata_n(L, 1, "ofBaseVideoGrabber"));
  lua_pushfstring(L, "ofBaseVideoGrabber: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofBaseVideoGrabber_member_methods[] = {
  { "_cast_"       , ofBaseVideoGrabber__cast_ },
  { "__gc"         , ofBaseVideoGrabber__ofBaseVideoGrabber },
  { "listDevices"  , ofBaseVideoGrabber_listDevices },
  { "initGrabber"  , ofBaseVideoGrabber_initGrabber },
  { "update"       , ofBaseVideoGrabber_update },
  { "isFrameNew"   , ofBaseVideoGrabber_isFrameNew },
  { "getPixels"    , ofBaseVideoGrabber_getPixels },
  { "close"        , ofBaseVideoGrabber_close },
  { "getHeight"    , ofBaseVideoGrabber_getHeight },
  { "getWidth"     , ofBaseVideoGrabber_getWidth },
  { "setPixelFormat", ofBaseVideoGrabber_setPixelFormat },
  { "getPixelFormat", ofBaseVideoGrabber_getPixelFormat },
  { "setVerbose"   , ofBaseVideoGrabber_setVerbose },
  { "setDeviceID"  , ofBaseVideoGrabber_setDeviceID },
  { "setDesiredFrameRate", ofBaseVideoGrabber_setDesiredFrameRate },
  { "videoSettings", ofBaseVideoGrabber_videoSettings },
  { "__tostring"   , ofBaseVideoGrabber___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofBaseVideoGrabber(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofBaseVideoGrabber");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofBaseVideoGrabber_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofBaseVideoGrabber", "ofBaseVideoGrabber");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
