/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofBaseSoundOutput
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "api/openFrameworks/types/ofBaseTypes.h"


/** ofBaseSoundOutput()
 * 
 */
static int ofBaseSoundOutput_ofBaseSoundOutput(lua_State *L) {
  try {
    ofBaseSoundOutput *retval__ = new ofBaseSoundOutput();
    dub_pushudata(L, retval__, "ofBaseSoundOutput", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** virtual ofBaseSoundOutput::~ofBaseSoundOutput()
 * api/openFrameworks/types/ofBaseTypes.h:152
 */
static int ofBaseSoundOutput__ofBaseSoundOutput(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofBaseSoundOutput"));
    if (userdata->gc) {
      ofBaseSoundOutput *self = (ofBaseSoundOutput *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseSoundOutput::audioOut(float *output, int bufferSize, int nChannels, int deviceID, long unsigned long tickCount)
 * api/openFrameworks/types/ofBaseTypes.h:154
 */
static int ofBaseSoundOutput_audioOut(lua_State *L) {
  try {
    ofBaseSoundOutput *self = *((ofBaseSoundOutput **)dub_checksdata(L, 1, "ofBaseSoundOutput"));
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      float *output = *((float **)dub_checksdata(L, 2, "float"));
      int bufferSize = dub_checkint(L, 3);
      int nChannels = dub_checkint(L, 4);
      int deviceID = dub_checkint(L, 5);
      long unsigned long *tickCount = *((long unsigned long **)dub_checksdata(L, 6, "long unsigned long"));
      self->audioOut(output, bufferSize, nChannels, deviceID, *tickCount);
      return 0;
    } else {
      float *output = *((float **)dub_checksdata(L, 2, "float"));
      int bufferSize = dub_checkint(L, 3);
      int nChannels = dub_checkint(L, 4);
      self->audioOut(output, bufferSize, nChannels);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "audioOut: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "audioOut: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void ofBaseSoundOutput::audioRequested(float *output, int bufferSize, int nChannels)
 * api/openFrameworks/types/ofBaseTypes.h:163
 */
static int ofBaseSoundOutput_audioRequested(lua_State *L) {
  try {
    ofBaseSoundOutput *self = *((ofBaseSoundOutput **)dub_checksdata(L, 1, "ofBaseSoundOutput"));
    float *output = *((float **)dub_checksdata(L, 2, "float"));
    int bufferSize = dub_checkint(L, 3);
    int nChannels = dub_checkint(L, 4);
    self->audioRequested(output, bufferSize, nChannels);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "audioRequested: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "audioRequested: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofBaseSoundOutput___tostring(lua_State *L) {
  ofBaseSoundOutput *self = *((ofBaseSoundOutput **)dub_checksdata_n(L, 1, "ofBaseSoundOutput"));
  lua_pushfstring(L, "ofBaseSoundOutput: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofBaseSoundOutput_member_methods[] = {
  { "new"          , ofBaseSoundOutput_ofBaseSoundOutput },
  { "__gc"         , ofBaseSoundOutput__ofBaseSoundOutput },
  { "audioOut"     , ofBaseSoundOutput_audioOut },
  { "audioRequested", ofBaseSoundOutput_audioRequested },
  { "__tostring"   , ofBaseSoundOutput___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofBaseSoundOutput(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofBaseSoundOutput");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofBaseSoundOutput_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofBaseSoundOutput", "ofBaseSoundOutput");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
