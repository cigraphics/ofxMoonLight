/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofHttpResponse
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "utils/ofURLFileLoader.h"


/** ~ofHttpResponse()
 * 
 */
static int ofHttpResponse__ofHttpResponse(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "ofHttpResponse"));
    if (userdata->gc) {
      ofHttpResponse *self = (ofHttpResponse *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** Set attributes (key, value)
 * 
 */
static int ofHttpResponse__set_(lua_State *L) {

  ofHttpResponse *self = *((ofHttpResponse **)dub_checksdata_n(L, 1, "ofHttpResponse"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 5);
  switch(key_h) {
    case 4: {
      if (DUB_ASSERT_KEY(key, "request")) break;
      self->request = **((ofHttpRequest **)dub_checksdata_n(L, 3, "ofHttpRequest"));
      return 0;
    }
    case 3: {
      if (DUB_ASSERT_KEY(key, "data")) break;
      self->data = **((ofBuffer **)dub_checksdata_n(L, 3, "ofBuffer"));
      return 0;
    }
    case 2: {
      if (DUB_ASSERT_KEY(key, "status")) break;
      self->status = luaL_checkint(L, 3);
      return 0;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "error")) break;
      size_t error_sz_;
      const char *error = luaL_checklstring(L, 3, &error_sz_);self->error = std::string(error, error_sz_);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int ofHttpResponse__get_(lua_State *L) {

  ofHttpResponse *self = *((ofHttpResponse **)dub_checksdata_n(L, 1, "ofHttpResponse", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub_hash(key, 5);
  switch(key_h) {
    case 4: {
      if (DUB_ASSERT_KEY(key, "request")) break;
      dub_pushudata(L, &self->request, "ofHttpRequest", false);
      return 1;
    }
    case 3: {
      if (DUB_ASSERT_KEY(key, "data")) break;
      dub_pushudata(L, &self->data, "ofBuffer", false);
      return 1;
    }
    case 2: {
      if (DUB_ASSERT_KEY(key, "status")) break;
      lua_pushnumber(L, self->status);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "error")) break;
      lua_pushlstring(L, self->error.data(), self->error.length());
      return 1;
    }
  }
  return 0;
}

/** ofHttpResponse::ofHttpResponse()
 * api/openFrameworks/utils/ofURLFileLoader.h:35
 */
static int ofHttpResponse_ofHttpResponse(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      ofHttpRequest *request = *((ofHttpRequest **)dub_checksdata(L, 1, "ofHttpRequest"));
      ofBuffer *data = *((ofBuffer **)dub_checksdata(L, 2, "ofBuffer"));
      int status = dub_checkint(L, 3);
      size_t error_sz_;
      const char *error = dub_checklstring(L, 4, &error_sz_);
      ofHttpResponse *retval__ = new ofHttpResponse(*request, *data, status, std::string(error, error_sz_));
      dub_pushudata(L, retval__, "ofHttpResponse", true);
      return 1;
    } else if (top__ >= 3) {
      ofHttpRequest *request = *((ofHttpRequest **)dub_checksdata(L, 1, "ofHttpRequest"));
      int status = dub_checkint(L, 2);
      size_t error_sz_;
      const char *error = dub_checklstring(L, 3, &error_sz_);
      ofHttpResponse *retval__ = new ofHttpResponse(*request, status, std::string(error, error_sz_));
      dub_pushudata(L, retval__, "ofHttpResponse", true);
      return 1;
    } else {
      ofHttpResponse *retval__ = new ofHttpResponse();
      dub_pushudata(L, retval__, "ofHttpResponse", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int ofHttpResponse___tostring(lua_State *L) {
  ofHttpResponse *self = *((ofHttpResponse **)dub_checksdata_n(L, 1, "ofHttpResponse"));
  lua_pushfstring(L, "ofHttpResponse: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofHttpResponse_member_methods[] = {
  { "__gc"         , ofHttpResponse__ofHttpResponse },
  { "__newindex"   , ofHttpResponse__set_ },
  { "__index"      , ofHttpResponse__get_ },
  { "new"          , ofHttpResponse_ofHttpResponse },
  { "__tostring"   , ofHttpResponse___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofHttpResponse(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofHttpResponse");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofHttpResponse_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofHttpResponse", "ofHttpResponse");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
