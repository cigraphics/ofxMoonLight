/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class ofLuaApp
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "ofLuaApp.h"


/** Set attributes (key, value)
 * 
 */
static int ofLuaApp__set_(lua_State *L) {

  ofLuaApp *self = *((ofLuaApp **)dub_checksdata_n(L, 1, "ofLuaApp"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub_hash(key, 2);

  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int ofLuaApp__get_(lua_State *L) {

  ofLuaApp *self = *((ofLuaApp **)dub_checksdata_n(L, 1, "ofLuaApp", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  return 0;
}

/** Cast (class_name)
 * 
 */
static int ofLuaApp__cast_(lua_State *L) {

  ofLuaApp *self = *((ofLuaApp **)dub_checksdata_n(L, 1, "ofLuaApp"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 4);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "ofBaseApp")) break;
      *retval__ = static_cast<ofBaseApp *>(self);
      return 1;
    }
    case 3: {
      if (DUB_ASSERT_KEY(key, "ofBaseSoundInput")) break;
      *retval__ = static_cast<ofBaseSoundInput *>(self);
      return 1;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "ofBaseSoundOutput")) break;
      *retval__ = static_cast<ofBaseSoundOutput *>(self);
      return 1;
    }
  }
  return 0;
}

/** ofLuaApp()
 * 
 */
static int ofLuaApp_ofLuaApp(lua_State *L) {
  try {
    ofLuaApp *retval__ = new ofLuaApp();
    retval__->pushobject(L, retval__, "ofLuaApp", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

// --=============================================== __tostring
static int ofLuaApp___tostring(lua_State *L) {
  ofLuaApp *self = *((ofLuaApp **)dub_checksdata_n(L, 1, "ofLuaApp"));
  lua_pushfstring(L, "ofLuaApp: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg ofLuaApp_member_methods[] = {
  { "__newindex"   , ofLuaApp__set_       },
  { "__index"      , ofLuaApp__get_       },
  { "_cast_"       , ofLuaApp__cast_      },
  { "new"          , ofLuaApp_ofLuaApp    },
  { "__tostring"   , ofLuaApp___tostring  },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_ofLuaApp(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "ofLuaApp");
  // <mt>

  // register member methods
  luaL_register(L, NULL, ofLuaApp_member_methods);
  // save meta-table in _G
  dub_register(L, "_G", "ofLuaApp", "ofLuaApp");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
